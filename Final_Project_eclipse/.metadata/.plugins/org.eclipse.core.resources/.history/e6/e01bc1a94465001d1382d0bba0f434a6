/******************************************************************************
 *
 * Module: Human Machine interface
 *
 * File Name: HMI_ECU.c
 *
 * Description: Source file for the Human interface
 *
 * Author: Abdelrahman Maher
 *
 *******************************************************************************/

#include "HMI_ECU.h"


int main(void)
{
	uint8 state=0;

	SREG  |= ( 1 << 7 ); /* enables I bit */

	LCD_init();

	UART_ConfigType Uart_config ={eight_bit, disabled, one_bit, 9600};
	UART_init(&Uart_config);

	Timer1_ConfigType TIMER1_Config = {0, 31250, clock_256, compare};
	Timer1_init(&TIMER1_Config);
	Timer1_setCallBack(timer1_HMI_CallBack);
	/*
	 * F timer = (8*10^6/256) = 31250
	 * T timer = (1/31250) = 32*10^-6
	 * T = 32*10^-6 * levels
	 * 1s = 32*10^-6 * levels
	 * levels = 31250 level
	 * */

	UART_sendByte(ECU_READY);
	while ( UART_recieveByte() != ECU_READY);

	while(1)
	{
		state = display_enter_lcd_first_time();

		what_is_the_state(state);
	}
}


uint8 display_enter_lcd_first_time(void)
{
	uint8 password[no_of_Password];
	uint8 re_password[no_of_Password];
	uint8 state,j;

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
	LCD_moveCursor(1, 0);

	enter_password(password);

	while ( UART_recieveByte() != ECU_READY);

	for(j=0; j < no_of_Password ; j++)
	{
		UART_sendByte(password[j]);
		_delay_ms(50);
	}

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Re-Enter the");
	LCD_displayStringRowColumn(1,0,"same pass:");
	LCD_moveCursor(1, 10);
	enter_password(re_password);

	while ( UART_recieveByte() != ECU_READY);

	for(j=0; j < no_of_Password; j++)
	{
		UART_sendByte(re_password[j]);
		_delay_ms(50);
	}

	UART_sendByte(ECU_READY);
	_delay_ms(50);
	state =  UART_recieveByte();

	return state;
}

void enter_password(uint8 *pass)
{
	uint8 i=0;

	for (i=0; i < no_of_Password; i++)
	{
		pass[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(350);
	}

	while(KEYPAD_getPressedKey() != '=');

}

void what_is_the_state(uint8 state)
{
	uint8 a,option=0;

	if (state == correct_password)
	{
		option = enter_option();

		if(option == '+')
		{
			while (UART_recieveByte() != ECU_READY);
			_delay_ms(50);

			UART_sendByte(first_option);
			_delay_ms(50);

			option_one();

		}
		else if(option == '-')
		{
			while ( UART_recieveByte() != ECU_READY);
			_delay_ms(50);

			UART_sendByte(second_option);
			_delay_ms(50);

			//			a= UART_recieveByte();
			//
			//
			//			while (a != ECU_READY);
			//
			//			LCD_clearScreen();
			//			LCD_intgerToString(a);
			//			_delay_ms(3000);

			option_two();
		}
	}
	else
	{
		LCD_clearScreen();
		LCD_displayString("wrong not same");
		_delay_ms(2000);
		state = display_enter_lcd_first_time();
		what_is_the_state(state);
	}
}

uint8 enter_option(void)
{
	uint8 option;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
	LCD_displayStringRowColumn(1,0,"- : Change Pass");

	option = KEYPAD_getPressedKey();
	_delay_ms(350);

	return option;
}

void option_one (void)
{
	uint8 j, isitcorrect = 0;
	uint8 check_pass_eeprom[no_of_Password];
	static uint8 wrong_entery=0;

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
	LCD_moveCursor(1, 0);
	enter_password(check_pass_eeprom);


	while (UART_recieveByte() != SEND_PASSWORD);



	for(j=0; j < no_of_Password ;j++)
	{
		UART_sendByte(check_pass_eeprom[j]);
	}

	UART_sendByte(SEND_PASSWORD);
	_delay_ms(50);

	isitcorrect = UART_recieveByte();

	if(isitcorrect == correct_password)
	{
		wrong_entery= 0;

		LCD_clearScreen();
		g_secondsCount=0;
		LCD_displayStringRowColumn(0,0,"Door is Unlocking");
		while(g_secondsCount < 15);

		LCD_clearScreen();
		while(g_secondsCount < 18);

		LCD_displayStringRowColumn(0,0,"Door is locking");
		while(g_secondsCount < 33);
		what_is_the_state(correct_password);
	}

	else if (isitcorrect == wrong_password)
	{
		if (wrong_entery == max_wrong_pass)
		{
			g_secondsCount=0;
			wrong_entery=0;
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"pass wrong for 3 times");
			LCD_displayStringRowColumn(1,0,"wait 1 minute");
			while(g_secondsCount<60);
			what_is_the_state(correct_password);
		}
		wrong_entery++;

		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"wrong pass you");
		LCD_displayStringRowColumn(1,0,"have more");
		LCD_moveCursor(1, 10);
		LCD_intgerToString( (max_wrong_pass + 1) - wrong_entery);
		LCD_displayStringRowColumn(1,12,"try");
		_delay_ms(2000);

		option_one();
	}
}

void option_two(void)
{
	uint8 state,j,a ,isitcorrect = 0;
	uint8 check_pass_eeprom[no_of_Password];
	static uint8 wrong_entery=0;

	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Plz Enter old ");
	LCD_displayStringRowColumn(1,0,"Pass:");

	LCD_moveCursor(1, 6);
	enter_password(check_pass_eeprom);



	while (UART_recieveByte() != SEND_PASSWORD){}

	a = UART_recieveByte();
	LCD_clearScreen();
	LCD_intgerToString(a);
	_delay_ms(2000);

	for(j=0; j < no_of_Password ;j++)
	{
		UART_sendByte(check_pass_eeprom[j]);
	}

	UART_sendByte(SEND_PASSWORD);
	_delay_ms(50);

	isitcorrect = UART_recieveByte();

	//	LCD_clearScreen();
	//	LCD_intgerToString(isitcorrect);
	//	_delay_ms(2000);

	if(isitcorrect == correct_password)
	{
		wrong_entery= 0;

		state = display_enter_lcd_first_time();
		what_is_the_state(state);
	}

	else
	{
		if (wrong_entery == max_wrong_pass)
		{
			g_secondsCount=0;
			wrong_entery=0;
			LCD_clearScreen();
			LCD_displayStringRowColumn(0,0,"pass wrong for 3 times");
			LCD_displayStringRowColumn(1,0,"wait 1 minute");
			while(g_secondsCount<60);

			what_is_the_state(correct_password);
		}
		wrong_entery++;

		LCD_clearScreen();
		LCD_displayStringRowColumn(0,0,"wrong pass you");
		LCD_displayStringRowColumn(1,0,"have more");
		LCD_moveCursor(1, 10);
		LCD_intgerToString( (max_wrong_pass + 1) - wrong_entery);
		LCD_displayStringRowColumn(1,12,"try");
		_delay_ms(2000);

		option_one();
	}
}

void timer1_HMI_CallBack(void)
{
	/* Increment the seconds counter */
	g_secondsCount++;
}

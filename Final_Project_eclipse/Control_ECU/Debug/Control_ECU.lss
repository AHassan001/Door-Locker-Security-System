
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002290  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002290  00002324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800076  00800076  0000233a  2**0
                  ALLOC
  3 .stab         00002748  00000000  00000000  0000233c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001426  00000000  00000000  00004a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000615a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a5f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cc 05 	call	0xb98	; 0xb98 <main>
      8a:	0c 94 46 11 	jmp	0x228c	; 0x228c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0f 11 	jmp	0x221e	; 0x221e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2b 11 	jmp	0x2256	; 0x2256 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 *******************************************************************************/
#include "Buzzer.h"
#include "gpio.h"

void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN,  PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	66 e0       	ldi	r22, 0x06	; 6
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 02 0c 	call	0x1804	; 0x1804 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	66 e0       	ldi	r22, 0x06	; 6
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 ed 0c 	call	0x19da	; 0x19da <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:

void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     b70:	83 e0       	ldi	r24, 0x03	; 3
     b72:	66 e0       	ldi	r22, 0x06	; 6
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 ed 0c 	call	0x19da	; 0x19da <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	66 e0       	ldi	r22, 0x06	; 6
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 ed 0c 	call	0x19da	; 0x19da <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <main>:

#include "Control_ECU.h"


int main(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	6a 97       	sbiw	r28, 0x1a	; 26
     ba2:	0f b6       	in	r0, 0x3f	; 63
     ba4:	f8 94       	cli
     ba6:	de bf       	out	0x3e, r29	; 62
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	cd bf       	out	0x3d, r28	; 61
	uint8 state;

	SREG |= (1 << 7 ); 	/* enables I bit */
     bac:	af e5       	ldi	r26, 0x5F	; 95
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ef e5       	ldi	r30, 0x5F	; 95
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	8c 93       	st	X, r24

	DcMotor_init();
     bba:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <DcMotor_init>
	Buzzer_init();
     bbe:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>

	UART_ConfigType Uart_config ={eight_bit, disabled, one_bit, 9600};
     bc2:	ce 01       	movw	r24, r28
     bc4:	02 96       	adiw	r24, 0x02	; 2
     bc6:	9a 8b       	std	Y+18, r25	; 0x12
     bc8:	89 8b       	std	Y+17, r24	; 0x11
     bca:	ee e6       	ldi	r30, 0x6E	; 110
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	fc 8b       	std	Y+20, r31	; 0x14
     bd0:	eb 8b       	std	Y+19, r30	; 0x13
     bd2:	f7 e0       	ldi	r31, 0x07	; 7
     bd4:	fd 8b       	std	Y+21, r31	; 0x15
     bd6:	eb 89       	ldd	r30, Y+19	; 0x13
     bd8:	fc 89       	ldd	r31, Y+20	; 0x14
     bda:	00 80       	ld	r0, Z
     bdc:	8b 89       	ldd	r24, Y+19	; 0x13
     bde:	9c 89       	ldd	r25, Y+20	; 0x14
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	9c 8b       	std	Y+20, r25	; 0x14
     be4:	8b 8b       	std	Y+19, r24	; 0x13
     be6:	e9 89       	ldd	r30, Y+17	; 0x11
     be8:	fa 89       	ldd	r31, Y+18	; 0x12
     bea:	00 82       	st	Z, r0
     bec:	89 89       	ldd	r24, Y+17	; 0x11
     bee:	9a 89       	ldd	r25, Y+18	; 0x12
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	9a 8b       	std	Y+18, r25	; 0x12
     bf4:	89 8b       	std	Y+17, r24	; 0x11
     bf6:	9d 89       	ldd	r25, Y+21	; 0x15
     bf8:	91 50       	subi	r25, 0x01	; 1
     bfa:	9d 8b       	std	Y+21, r25	; 0x15
     bfc:	ed 89       	ldd	r30, Y+21	; 0x15
     bfe:	ee 23       	and	r30, r30
     c00:	51 f7       	brne	.-44     	; 0xbd6 <main+0x3e>
	UART_init(&Uart_config);
     c02:	ce 01       	movw	r24, r28
     c04:	02 96       	adiw	r24, 0x02	; 2
     c06:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <UART_init>

	TWI_ConfigType Twi_Config ={0x01, clk_div_4};
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	89 87       	std	Y+9, r24	; 0x09
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	8a 87       	std	Y+10, r24	; 0x0a
	TWI_init(&Twi_Config);
     c12:	ce 01       	movw	r24, r28
     c14:	09 96       	adiw	r24, 0x09	; 9
     c16:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <TWI_init>

	Timer1_ConfigType TIMER1_Config = {0, 31250, clock_256, compare};
     c1a:	ce 01       	movw	r24, r28
     c1c:	0b 96       	adiw	r24, 0x0b	; 11
     c1e:	9f 8b       	std	Y+23, r25	; 0x17
     c20:	8e 8b       	std	Y+22, r24	; 0x16
     c22:	e8 e6       	ldi	r30, 0x68	; 104
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	f9 8f       	std	Y+25, r31	; 0x19
     c28:	e8 8f       	std	Y+24, r30	; 0x18
     c2a:	f6 e0       	ldi	r31, 0x06	; 6
     c2c:	fa 8f       	std	Y+26, r31	; 0x1a
     c2e:	e8 8d       	ldd	r30, Y+24	; 0x18
     c30:	f9 8d       	ldd	r31, Y+25	; 0x19
     c32:	00 80       	ld	r0, Z
     c34:	88 8d       	ldd	r24, Y+24	; 0x18
     c36:	99 8d       	ldd	r25, Y+25	; 0x19
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	99 8f       	std	Y+25, r25	; 0x19
     c3c:	88 8f       	std	Y+24, r24	; 0x18
     c3e:	ee 89       	ldd	r30, Y+22	; 0x16
     c40:	ff 89       	ldd	r31, Y+23	; 0x17
     c42:	00 82       	st	Z, r0
     c44:	8e 89       	ldd	r24, Y+22	; 0x16
     c46:	9f 89       	ldd	r25, Y+23	; 0x17
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	9f 8b       	std	Y+23, r25	; 0x17
     c4c:	8e 8b       	std	Y+22, r24	; 0x16
     c4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     c50:	91 50       	subi	r25, 0x01	; 1
     c52:	9a 8f       	std	Y+26, r25	; 0x1a
     c54:	ea 8d       	ldd	r30, Y+26	; 0x1a
     c56:	ee 23       	and	r30, r30
     c58:	51 f7       	brne	.-44     	; 0xc2e <main+0x96>
	Timer1_init(&TIMER1_Config);
     c5a:	ce 01       	movw	r24, r28
     c5c:	0b 96       	adiw	r24, 0x0b	; 11
     c5e:	0e 94 31 0a 	call	0x1462	; 0x1462 <Timer1_init>
	Timer1_setCallBack(timer1ControlCallBack);
     c62:	84 e8       	ldi	r24, 0x84	; 132
     c64:	99 e0       	ldi	r25, 0x09	; 9
     c66:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <Timer1_setCallBack>
	 * T = 32*10^-6 * levels
	 * 1s = 32*10^-6 * levels
	 * levels = 31250 level
	 * */

	while ( UART_recieveByte() != ECU_READY);
     c6a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
     c6e:	81 31       	cpi	r24, 0x11	; 17
     c70:	e1 f7       	brne	.-8      	; 0xc6a <main+0xd2>
	UART_sendByte(ECU_READY);
     c72:	81 e1       	ldi	r24, 0x11	; 17
     c74:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

	while(1)
	{
		state = check_password_first_time();
     c78:	0e 94 43 06 	call	0xc86	; 0xc86 <check_password_first_time>
     c7c:	89 83       	std	Y+1, r24	; 0x01

		check_state(state);
     c7e:	89 81       	ldd	r24, Y+1	; 0x01
     c80:	0e 94 4e 07 	call	0xe9c	; 0xe9c <check_state>
     c84:	f9 cf       	rjmp	.-14     	; 0xc78 <main+0xe0>

00000c86 <check_password_first_time>:
	}
}

uint8 check_password_first_time(void)
{
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	df 93       	push	r29
     c8c:	cf 93       	push	r28
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
     c92:	2c 97       	sbiw	r28, 0x0c	; 12
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
	uint8 password[no_of_Password];
	uint8 re_password[no_of_Password];
	uint8 j,state;

	UART_sendByte(ECU_READY);
     c9e:	81 e1       	ldi	r24, 0x11	; 17
     ca0:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

	for(j=0; j < no_of_Password; j++)
     ca4:	1a 82       	std	Y+2, r1	; 0x02
     ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <check_password_first_time+0x40>
	{
		password[j] = UART_recieveByte();
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	08 2f       	mov	r16, r24
     cac:	10 e0       	ldi	r17, 0x00	; 0
     cae:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
     cb2:	28 2f       	mov	r18, r24
     cb4:	ce 01       	movw	r24, r28
     cb6:	03 96       	adiw	r24, 0x03	; 3
     cb8:	fc 01       	movw	r30, r24
     cba:	e0 0f       	add	r30, r16
     cbc:	f1 1f       	adc	r31, r17
     cbe:	20 83       	st	Z, r18
	uint8 re_password[no_of_Password];
	uint8 j,state;

	UART_sendByte(ECU_READY);

	for(j=0; j < no_of_Password; j++)
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	8a 83       	std	Y+2, r24	; 0x02
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	85 30       	cpi	r24, 0x05	; 5
     cca:	70 f3       	brcs	.-36     	; 0xca8 <check_password_first_time+0x22>
	{
		password[j] = UART_recieveByte();
	}
	password[no_of_Password]='\0';
     ccc:	18 86       	std	Y+8, r1	; 0x08

	UART_sendByte(ECU_READY);
     cce:	81 e1       	ldi	r24, 0x11	; 17
     cd0:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

	for(j=0; j < no_of_Password ;j++)
     cd4:	1a 82       	std	Y+2, r1	; 0x02
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <check_password_first_time+0x70>
	{
		re_password[j] = UART_recieveByte();
     cd8:	8a 81       	ldd	r24, Y+2	; 0x02
     cda:	08 2f       	mov	r16, r24
     cdc:	10 e0       	ldi	r17, 0x00	; 0
     cde:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
     ce2:	28 2f       	mov	r18, r24
     ce4:	ce 01       	movw	r24, r28
     ce6:	08 96       	adiw	r24, 0x08	; 8
     ce8:	fc 01       	movw	r30, r24
     cea:	e0 0f       	add	r30, r16
     cec:	f1 1f       	adc	r31, r17
     cee:	20 83       	st	Z, r18
	}
	password[no_of_Password]='\0';

	UART_sendByte(ECU_READY);

	for(j=0; j < no_of_Password ;j++)
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	8a 83       	std	Y+2, r24	; 0x02
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	85 30       	cpi	r24, 0x05	; 5
     cfa:	70 f3       	brcs	.-36     	; 0xcd8 <check_password_first_time+0x52>
	{
		re_password[j] = UART_recieveByte();
	}
	re_password[no_of_Password]='\0';
     cfc:	1d 86       	std	Y+13, r1	; 0x0d

	state = ComparePassword(password,re_password);
     cfe:	ce 01       	movw	r24, r28
     d00:	03 96       	adiw	r24, 0x03	; 3
     d02:	9e 01       	movw	r18, r28
     d04:	28 5f       	subi	r18, 0xF8	; 248
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	b9 01       	movw	r22, r18
     d0a:	0e 94 c9 07 	call	0xf92	; 0xf92 <ComparePassword>
     d0e:	89 83       	std	Y+1, r24	; 0x01

	if (state == correct_password)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	61 f4       	brne	.+24     	; 0xd2e <check_password_first_time+0xa8>
	{
		save_in_eeprom (re_password);
     d16:	ce 01       	movw	r24, r28
     d18:	08 96       	adiw	r24, 0x08	; 8
     d1a:	0e 94 aa 06 	call	0xd54	; 0xd54 <save_in_eeprom>

		while( UART_recieveByte() != ECU_READY);
     d1e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
     d22:	81 31       	cpi	r24, 0x11	; 17
     d24:	e1 f7       	brne	.-8      	; 0xd1e <check_password_first_time+0x98>

		UART_sendByte(correct_password);
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>
     d2c:	07 c0       	rjmp	.+14     	; 0xd3c <check_password_first_time+0xb6>
	}
	else
	{
		while( UART_recieveByte() != ECU_READY);
     d2e:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
     d32:	81 31       	cpi	r24, 0x11	; 17
     d34:	e1 f7       	brne	.-8      	; 0xd2e <check_password_first_time+0xa8>

		UART_sendByte(wrong_password);
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>
	}

	return state;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3e:	2c 96       	adiw	r28, 0x0c	; 12
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	f8 94       	cli
     d44:	de bf       	out	0x3e, r29	; 62
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	cd bf       	out	0x3d, r28	; 61
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	1f 91       	pop	r17
     d50:	0f 91       	pop	r16
     d52:	08 95       	ret

00000d54 <save_in_eeprom>:

void save_in_eeprom (uint8 *password)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	61 97       	sbiw	r28, 0x11	; 17
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	99 8b       	std	Y+17, r25	; 0x11
     d6a:	88 8b       	std	Y+16, r24	; 0x10
	uint8 j=0;
     d6c:	1f 86       	std	Y+15, r1	; 0x0f

	for(j=0; j < no_of_Password; j++)
     d6e:	1f 86       	std	Y+15, r1	; 0x0f
     d70:	88 c0       	rjmp	.+272    	; 0xe82 <save_in_eeprom+0x12e>
	{
		EEPROM_writeByte(0x0311+j, password[j]);
     d72:	8f 85       	ldd	r24, Y+15	; 0x0f
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	8f 5e       	subi	r24, 0xEF	; 239
     d7a:	9c 4f       	sbci	r25, 0xFC	; 252
     d7c:	ac 01       	movw	r20, r24
     d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	88 89       	ldd	r24, Y+16	; 0x10
     d86:	99 89       	ldd	r25, Y+17	; 0x11
     d88:	fc 01       	movw	r30, r24
     d8a:	e2 0f       	add	r30, r18
     d8c:	f3 1f       	adc	r31, r19
     d8e:	20 81       	ld	r18, Z
     d90:	ca 01       	movw	r24, r20
     d92:	62 2f       	mov	r22, r18
     d94:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <EEPROM_writeByte>
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	a0 e2       	ldi	r26, 0x20	; 32
     d9e:	b1 e4       	ldi	r27, 0x41	; 65
     da0:	8b 87       	std	Y+11, r24	; 0x0b
     da2:	9c 87       	std	Y+12, r25	; 0x0c
     da4:	ad 87       	std	Y+13, r26	; 0x0d
     da6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da8:	6b 85       	ldd	r22, Y+11	; 0x0b
     daa:	7c 85       	ldd	r23, Y+12	; 0x0c
     dac:	8d 85       	ldd	r24, Y+13	; 0x0d
     dae:	9e 85       	ldd	r25, Y+14	; 0x0e
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	4a ef       	ldi	r20, 0xFA	; 250
     db6:	54 e4       	ldi	r21, 0x44	; 68
     db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	8f 83       	std	Y+7, r24	; 0x07
     dc2:	98 87       	std	Y+8, r25	; 0x08
     dc4:	a9 87       	std	Y+9, r26	; 0x09
     dc6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dc8:	6f 81       	ldd	r22, Y+7	; 0x07
     dca:	78 85       	ldd	r23, Y+8	; 0x08
     dcc:	89 85       	ldd	r24, Y+9	; 0x09
     dce:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 e8       	ldi	r20, 0x80	; 128
     dd6:	5f e3       	ldi	r21, 0x3F	; 63
     dd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ddc:	88 23       	and	r24, r24
     dde:	2c f4       	brge	.+10     	; 0xdea <save_in_eeprom+0x96>
		__ticks = 1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	9e 83       	std	Y+6, r25	; 0x06
     de6:	8d 83       	std	Y+5, r24	; 0x05
     de8:	3f c0       	rjmp	.+126    	; 0xe68 <save_in_eeprom+0x114>
	else if (__tmp > 65535)
     dea:	6f 81       	ldd	r22, Y+7	; 0x07
     dec:	78 85       	ldd	r23, Y+8	; 0x08
     dee:	89 85       	ldd	r24, Y+9	; 0x09
     df0:	9a 85       	ldd	r25, Y+10	; 0x0a
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	3f ef       	ldi	r19, 0xFF	; 255
     df6:	4f e7       	ldi	r20, 0x7F	; 127
     df8:	57 e4       	ldi	r21, 0x47	; 71
     dfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dfe:	18 16       	cp	r1, r24
     e00:	4c f5       	brge	.+82     	; 0xe54 <save_in_eeprom+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e02:	6b 85       	ldd	r22, Y+11	; 0x0b
     e04:	7c 85       	ldd	r23, Y+12	; 0x0c
     e06:	8d 85       	ldd	r24, Y+13	; 0x0d
     e08:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e2       	ldi	r20, 0x20	; 32
     e10:	51 e4       	ldi	r21, 0x41	; 65
     e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	bc 01       	movw	r22, r24
     e1c:	cd 01       	movw	r24, r26
     e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	8d 83       	std	Y+5, r24	; 0x05
     e2a:	0f c0       	rjmp	.+30     	; 0xe4a <save_in_eeprom+0xf6>
     e2c:	88 ec       	ldi	r24, 0xC8	; 200
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9c 83       	std	Y+4, r25	; 0x04
     e32:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <save_in_eeprom+0xe4>
     e3c:	9c 83       	std	Y+4, r25	; 0x04
     e3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e40:	8d 81       	ldd	r24, Y+5	; 0x05
     e42:	9e 81       	ldd	r25, Y+6	; 0x06
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	9e 83       	std	Y+6, r25	; 0x06
     e48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4a:	8d 81       	ldd	r24, Y+5	; 0x05
     e4c:	9e 81       	ldd	r25, Y+6	; 0x06
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	69 f7       	brne	.-38     	; 0xe2c <save_in_eeprom+0xd8>
     e52:	14 c0       	rjmp	.+40     	; 0xe7c <save_in_eeprom+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e54:	6f 81       	ldd	r22, Y+7	; 0x07
     e56:	78 85       	ldd	r23, Y+8	; 0x08
     e58:	89 85       	ldd	r24, Y+9	; 0x09
     e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	9e 83       	std	Y+6, r25	; 0x06
     e66:	8d 83       	std	Y+5, r24	; 0x05
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <save_in_eeprom+0x120>
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	89 83       	std	Y+1, r24	; 0x01

void save_in_eeprom (uint8 *password)
{
	uint8 j=0;

	for(j=0; j < no_of_Password; j++)
     e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e7e:	8f 5f       	subi	r24, 0xFF	; 255
     e80:	8f 87       	std	Y+15, r24	; 0x0f
     e82:	8f 85       	ldd	r24, Y+15	; 0x0f
     e84:	85 30       	cpi	r24, 0x05	; 5
     e86:	08 f4       	brcc	.+2      	; 0xe8a <save_in_eeprom+0x136>
     e88:	74 cf       	rjmp	.-280    	; 0xd72 <save_in_eeprom+0x1e>
	{
		EEPROM_writeByte(0x0311+j, password[j]);
		_delay_ms(10);
	}
}
     e8a:	61 96       	adiw	r28, 0x11	; 17
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <check_state>:

void check_state (uint8 state)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <check_state+0x6>
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 option;

	if( state == correct_password )
     ea8:	8a 81       	ldd	r24, Y+2	; 0x02
     eaa:	81 30       	cpi	r24, 0x01	; 1
     eac:	91 f4       	brne	.+36     	; 0xed2 <check_state+0x36>
	{
		UART_sendByte(ECU_READY);
     eae:	81 e1       	ldi	r24, 0x11	; 17
     eb0:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

		option = UART_recieveByte();
     eb4:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
     eb8:	89 83       	std	Y+1, r24	; 0x01

		if (option == first_option)
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	88 32       	cpi	r24, 0x28	; 40
     ebe:	19 f4       	brne	.+6      	; 0xec6 <check_state+0x2a>
		{
			option_one();
     ec0:	0e 94 74 07 	call	0xee8	; 0xee8 <option_one>
     ec4:	0c c0       	rjmp	.+24     	; 0xede <check_state+0x42>
		}
		else if(option == second_option)
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	82 33       	cpi	r24, 0x32	; 50
     eca:	49 f4       	brne	.+18     	; 0xede <check_state+0x42>
		{
			option_two();
     ecc:	0e 94 05 09 	call	0x120a	; 0x120a <option_two>
     ed0:	06 c0       	rjmp	.+12     	; 0xede <check_state+0x42>
		}
	}
	else
	{
		state = check_password_first_time();
     ed2:	0e 94 43 06 	call	0xc86	; 0xc86 <check_password_first_time>
     ed6:	8a 83       	std	Y+2, r24	; 0x02
		check_state(state);
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	0e 94 4e 07 	call	0xe9c	; 0xe9c <check_state>
	}
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <option_one>:


void option_one (void)
{
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	2c 97       	sbiw	r28, 0x0c	; 12
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
	uint8 check_pass_eeprom[no_of_Password];
	uint8 check_re_password[no_of_Password];
	uint8 state,j;

	UART_sendByte(SEND_PASSWORD);
     f00:	82 e1       	ldi	r24, 0x12	; 18
     f02:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

	for(j=0; j < no_of_Password; j++)
     f06:	19 82       	std	Y+1, r1	; 0x01
     f08:	0f c0       	rjmp	.+30     	; 0xf28 <option_one+0x40>
	{
		check_re_password[j] = UART_recieveByte();
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	08 2f       	mov	r16, r24
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
     f14:	28 2f       	mov	r18, r24
     f16:	ce 01       	movw	r24, r28
     f18:	08 96       	adiw	r24, 0x08	; 8
     f1a:	fc 01       	movw	r30, r24
     f1c:	e0 0f       	add	r30, r16
     f1e:	f1 1f       	adc	r31, r17
     f20:	20 83       	st	Z, r18
	uint8 check_re_password[no_of_Password];
	uint8 state,j;

	UART_sendByte(SEND_PASSWORD);

	for(j=0; j < no_of_Password; j++)
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	85 30       	cpi	r24, 0x05	; 5
     f2c:	70 f3       	brcs	.-36     	; 0xf0a <option_one+0x22>
	{
		check_re_password[j] = UART_recieveByte();
	}
	check_re_password[no_of_Password] = '\0';
     f2e:	1d 86       	std	Y+13, r1	; 0x0d

	read_Password_eeprom(check_pass_eeprom);
     f30:	ce 01       	movw	r24, r28
     f32:	03 96       	adiw	r24, 0x03	; 3
     f34:	0e 94 63 08 	call	0x10c6	; 0x10c6 <read_Password_eeprom>

	state = ComparePassword(check_pass_eeprom, check_re_password);
     f38:	ce 01       	movw	r24, r28
     f3a:	03 96       	adiw	r24, 0x03	; 3
     f3c:	9e 01       	movw	r18, r28
     f3e:	28 5f       	subi	r18, 0xF8	; 248
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	b9 01       	movw	r22, r18
     f44:	0e 94 c9 07 	call	0xf92	; 0xf92 <ComparePassword>
     f48:	8a 83       	std	Y+2, r24	; 0x02

	if( state == correct_password )
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	51 f4       	brne	.+20     	; 0xf64 <option_one+0x7c>
	{
		while( UART_recieveByte() != SEND_PASSWORD);
     f50:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
     f54:	82 31       	cpi	r24, 0x12	; 18
     f56:	e1 f7       	brne	.-8      	; 0xf50 <option_one+0x68>
		UART_sendByte(correct_password);
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

		correct_option_one();
     f5e:	0e 94 ff 07 	call	0xffe	; 0xffe <correct_option_one>
     f62:	0c c0       	rjmp	.+24     	; 0xf7c <option_one+0x94>
	}

	else if (state == wrong_password)
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	88 23       	and	r24, r24
     f68:	49 f4       	brne	.+18     	; 0xf7c <option_one+0x94>
	{
		while( UART_recieveByte() != SEND_PASSWORD);
     f6a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
     f6e:	82 31       	cpi	r24, 0x12	; 18
     f70:	e1 f7       	brne	.-8      	; 0xf6a <option_one+0x82>
		UART_sendByte(wrong_password);
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

		wrong_option_one();
     f78:	0e 94 3d 08 	call	0x107a	; 0x107a <wrong_option_one>
	}
}
     f7c:	2c 96       	adiw	r28, 0x0c	; 12
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	1f 91       	pop	r17
     f8e:	0f 91       	pop	r16
     f90:	08 95       	ret

00000f92 <ComparePassword>:

uint8 ComparePassword(uint8 *first_pass,uint8 *second_pass)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <ComparePassword+0x6>
     f98:	00 d0       	rcall	.+0      	; 0xf9a <ComparePassword+0x8>
     f9a:	00 d0       	rcall	.+0      	; 0xf9c <ComparePassword+0xa>
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	9b 83       	std	Y+3, r25	; 0x03
     fa2:	8a 83       	std	Y+2, r24	; 0x02
     fa4:	7d 83       	std	Y+5, r23	; 0x05
     fa6:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
     fa8:	19 82       	std	Y+1, r1	; 0x01

	for(i=0; i < no_of_Password; i++)
     faa:	19 82       	std	Y+1, r1	; 0x01
     fac:	19 c0       	rjmp	.+50     	; 0xfe0 <ComparePassword+0x4e>
	{
		if(first_pass[i] != second_pass[i])
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	9b 81       	ldd	r25, Y+3	; 0x03
     fb8:	fc 01       	movw	r30, r24
     fba:	e2 0f       	add	r30, r18
     fbc:	f3 1f       	adc	r31, r19
     fbe:	40 81       	ld	r20, Z
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	9d 81       	ldd	r25, Y+5	; 0x05
     fca:	fc 01       	movw	r30, r24
     fcc:	e2 0f       	add	r30, r18
     fce:	f3 1f       	adc	r31, r19
     fd0:	80 81       	ld	r24, Z
     fd2:	48 17       	cp	r20, r24
     fd4:	11 f0       	breq	.+4      	; 0xfda <ComparePassword+0x48>
		{
			return wrong_password;
     fd6:	1e 82       	std	Y+6, r1	; 0x06
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <ComparePassword+0x58>

uint8 ComparePassword(uint8 *first_pass,uint8 *second_pass)
{
	uint8 i=0;

	for(i=0; i < no_of_Password; i++)
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	85 30       	cpi	r24, 0x05	; 5
     fe4:	20 f3       	brcs	.-56     	; 0xfae <ComparePassword+0x1c>
		if(first_pass[i] != second_pass[i])
		{
			return wrong_password;
		}
	}
	return correct_password;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	8e 83       	std	Y+6, r24	; 0x06
     fea:	8e 81       	ldd	r24, Y+6	; 0x06
}
     fec:	26 96       	adiw	r28, 0x06	; 6
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <correct_option_one>:


void correct_option_one (void)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62

	g_wrong_entery = 0;
    1006:	10 92 78 00 	sts	0x0078, r1
	g_secondsCount = 0;
    100a:	10 92 77 00 	sts	0x0077, r1
    100e:	10 92 76 00 	sts	0x0076, r1

	UART_sendByte(ECU_READY);
    1012:	81 e1       	ldi	r24, 0x11	; 17
    1014:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

	DcMotor_Rotate(clockwise, maximum_speed);
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	64 e6       	ldi	r22, 0x64	; 100
    101c:	0e 94 19 0b 	call	0x1632	; 0x1632 <DcMotor_Rotate>
	while(g_secondsCount < 15);
    1020:	80 91 76 00 	lds	r24, 0x0076
    1024:	90 91 77 00 	lds	r25, 0x0077
    1028:	8f 30       	cpi	r24, 0x0F	; 15
    102a:	91 05       	cpc	r25, r1
    102c:	c8 f3       	brcs	.-14     	; 0x1020 <correct_option_one+0x22>
	UART_sendByte(ECU_READY);
    102e:	81 e1       	ldi	r24, 0x11	; 17
    1030:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

	DcMotor_Rotate(stop, 0);
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	0e 94 19 0b 	call	0x1632	; 0x1632 <DcMotor_Rotate>
	while(g_secondsCount < 18);
    103c:	80 91 76 00 	lds	r24, 0x0076
    1040:	90 91 77 00 	lds	r25, 0x0077
    1044:	82 31       	cpi	r24, 0x12	; 18
    1046:	91 05       	cpc	r25, r1
    1048:	c8 f3       	brcs	.-14     	; 0x103c <correct_option_one+0x3e>
	UART_sendByte(ECU_READY);
    104a:	81 e1       	ldi	r24, 0x11	; 17
    104c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

	DcMotor_Rotate(anticlockwise, maximum_speed);
    1050:	82 e0       	ldi	r24, 0x02	; 2
    1052:	64 e6       	ldi	r22, 0x64	; 100
    1054:	0e 94 19 0b 	call	0x1632	; 0x1632 <DcMotor_Rotate>
	while(g_secondsCount < 33);
    1058:	80 91 76 00 	lds	r24, 0x0076
    105c:	90 91 77 00 	lds	r25, 0x0077
    1060:	81 32       	cpi	r24, 0x21	; 33
    1062:	91 05       	cpc	r25, r1
    1064:	c8 f3       	brcs	.-14     	; 0x1058 <correct_option_one+0x5a>
	DcMotor_Rotate(stop, 0);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	0e 94 19 0b 	call	0x1632	; 0x1632 <DcMotor_Rotate>

	check_state(correct_password);
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	0e 94 4e 07 	call	0xe9c	; 0xe9c <check_state>
}
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <wrong_option_one>:

void wrong_option_one (void)
{
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	if (g_wrong_entery == max_wrong_pass)
    1082:	80 91 78 00 	lds	r24, 0x0078
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	a1 f4       	brne	.+40     	; 0x10b2 <wrong_option_one+0x38>
	{
		Buzzer_on();
    108a:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
		g_secondsCount=0;
    108e:	10 92 77 00 	sts	0x0077, r1
    1092:	10 92 76 00 	sts	0x0076, r1
		while(g_secondsCount < 60);
    1096:	80 91 76 00 	lds	r24, 0x0076
    109a:	90 91 77 00 	lds	r25, 0x0077
    109e:	8c 33       	cpi	r24, 0x3C	; 60
    10a0:	91 05       	cpc	r25, r1
    10a2:	c8 f3       	brcs	.-14     	; 0x1096 <wrong_option_one+0x1c>

		Buzzer_off();
    10a4:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
		g_wrong_entery = 0;
    10a8:	10 92 78 00 	sts	0x0078, r1
		check_state(correct_password);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	0e 94 4e 07 	call	0xe9c	; 0xe9c <check_state>
	}
	++g_wrong_entery;
    10b2:	80 91 78 00 	lds	r24, 0x0078
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	80 93 78 00 	sts	0x0078, r24
	option_one();
    10bc:	0e 94 74 07 	call	0xee8	; 0xee8 <option_one>

}
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <read_Password_eeprom>:


void read_Password_eeprom (uint8 *check_pass_eeprom)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	61 97       	sbiw	r28, 0x11	; 17
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	99 8b       	std	Y+17, r25	; 0x11
    10dc:	88 8b       	std	Y+16, r24	; 0x10
	uint8 j=0;
    10de:	1f 86       	std	Y+15, r1	; 0x0f

	for(j=0; j < no_of_Password ; j++)
    10e0:	1f 86       	std	Y+15, r1	; 0x0f
    10e2:	86 c0       	rjmp	.+268    	; 0x11f0 <read_Password_eeprom+0x12a>
	{
		EEPROM_readByte(0x0311+j, &check_pass_eeprom[j]);
    10e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e6:	88 2f       	mov	r24, r24
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	8f 5e       	subi	r24, 0xEF	; 239
    10ec:	9c 4f       	sbci	r25, 0xFC	; 252
    10ee:	ac 01       	movw	r20, r24
    10f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	88 89       	ldd	r24, Y+16	; 0x10
    10f8:	99 89       	ldd	r25, Y+17	; 0x11
    10fa:	28 0f       	add	r18, r24
    10fc:	39 1f       	adc	r19, r25
    10fe:	ca 01       	movw	r24, r20
    1100:	b9 01       	movw	r22, r18
    1102:	0e 94 a2 0b 	call	0x1744	; 0x1744 <EEPROM_readByte>
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e2       	ldi	r26, 0x20	; 32
    110c:	b1 e4       	ldi	r27, 0x41	; 65
    110e:	8b 87       	std	Y+11, r24	; 0x0b
    1110:	9c 87       	std	Y+12, r25	; 0x0c
    1112:	ad 87       	std	Y+13, r26	; 0x0d
    1114:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1116:	6b 85       	ldd	r22, Y+11	; 0x0b
    1118:	7c 85       	ldd	r23, Y+12	; 0x0c
    111a:	8d 85       	ldd	r24, Y+13	; 0x0d
    111c:	9e 85       	ldd	r25, Y+14	; 0x0e
    111e:	20 e0       	ldi	r18, 0x00	; 0
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	4a ef       	ldi	r20, 0xFA	; 250
    1124:	54 e4       	ldi	r21, 0x44	; 68
    1126:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	8f 83       	std	Y+7, r24	; 0x07
    1130:	98 87       	std	Y+8, r25	; 0x08
    1132:	a9 87       	std	Y+9, r26	; 0x09
    1134:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1136:	6f 81       	ldd	r22, Y+7	; 0x07
    1138:	78 85       	ldd	r23, Y+8	; 0x08
    113a:	89 85       	ldd	r24, Y+9	; 0x09
    113c:	9a 85       	ldd	r25, Y+10	; 0x0a
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	40 e8       	ldi	r20, 0x80	; 128
    1144:	5f e3       	ldi	r21, 0x3F	; 63
    1146:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    114a:	88 23       	and	r24, r24
    114c:	2c f4       	brge	.+10     	; 0x1158 <read_Password_eeprom+0x92>
		__ticks = 1;
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9e 83       	std	Y+6, r25	; 0x06
    1154:	8d 83       	std	Y+5, r24	; 0x05
    1156:	3f c0       	rjmp	.+126    	; 0x11d6 <read_Password_eeprom+0x110>
	else if (__tmp > 65535)
    1158:	6f 81       	ldd	r22, Y+7	; 0x07
    115a:	78 85       	ldd	r23, Y+8	; 0x08
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	4f e7       	ldi	r20, 0x7F	; 127
    1166:	57 e4       	ldi	r21, 0x47	; 71
    1168:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116c:	18 16       	cp	r1, r24
    116e:	4c f5       	brge	.+82     	; 0x11c2 <read_Password_eeprom+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1170:	6b 85       	ldd	r22, Y+11	; 0x0b
    1172:	7c 85       	ldd	r23, Y+12	; 0x0c
    1174:	8d 85       	ldd	r24, Y+13	; 0x0d
    1176:	9e 85       	ldd	r25, Y+14	; 0x0e
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	40 e2       	ldi	r20, 0x20	; 32
    117e:	51 e4       	ldi	r21, 0x41	; 65
    1180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	bc 01       	movw	r22, r24
    118a:	cd 01       	movw	r24, r26
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	0f c0       	rjmp	.+30     	; 0x11b8 <read_Password_eeprom+0xf2>
    119a:	88 ec       	ldi	r24, 0xC8	; 200
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <read_Password_eeprom+0xe0>
    11aa:	9c 83       	std	Y+4, r25	; 0x04
    11ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ae:	8d 81       	ldd	r24, Y+5	; 0x05
    11b0:	9e 81       	ldd	r25, Y+6	; 0x06
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	69 f7       	brne	.-38     	; 0x119a <read_Password_eeprom+0xd4>
    11c0:	14 c0       	rjmp	.+40     	; 0x11ea <read_Password_eeprom+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c2:	6f 81       	ldd	r22, Y+7	; 0x07
    11c4:	78 85       	ldd	r23, Y+8	; 0x08
    11c6:	89 85       	ldd	r24, Y+9	; 0x09
    11c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9e 83       	std	Y+6, r25	; 0x06
    11d4:	8d 83       	std	Y+5, r24	; 0x05
    11d6:	8d 81       	ldd	r24, Y+5	; 0x05
    11d8:	9e 81       	ldd	r25, Y+6	; 0x06
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	9a 81       	ldd	r25, Y+2	; 0x02
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	f1 f7       	brne	.-4      	; 0x11e2 <read_Password_eeprom+0x11c>
    11e6:	9a 83       	std	Y+2, r25	; 0x02
    11e8:	89 83       	std	Y+1, r24	; 0x01

void read_Password_eeprom (uint8 *check_pass_eeprom)
{
	uint8 j=0;

	for(j=0; j < no_of_Password ; j++)
    11ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ec:	8f 5f       	subi	r24, 0xFF	; 255
    11ee:	8f 87       	std	Y+15, r24	; 0x0f
    11f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f2:	85 30       	cpi	r24, 0x05	; 5
    11f4:	08 f4       	brcc	.+2      	; 0x11f8 <read_Password_eeprom+0x132>
    11f6:	76 cf       	rjmp	.-276    	; 0x10e4 <read_Password_eeprom+0x1e>
	{
		EEPROM_readByte(0x0311+j, &check_pass_eeprom[j]);
		_delay_ms(10);
	}
}
    11f8:	61 96       	adiw	r28, 0x11	; 17
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <option_two>:

void option_two(void)
{
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	2c 97       	sbiw	r28, 0x0c	; 12
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
	uint8 check_pass_eeprom[no_of_Password];
	uint8 check_re_password[no_of_Password];
	uint8 state,j;

	UART_sendByte(SEND_PASSWORD);
    1222:	82 e1       	ldi	r24, 0x12	; 18
    1224:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

	for(j=0; j < no_of_Password; j++)
    1228:	19 82       	std	Y+1, r1	; 0x01
    122a:	0f c0       	rjmp	.+30     	; 0x124a <option_two+0x40>
	{
		check_re_password[j] = UART_recieveByte();
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	08 2f       	mov	r16, r24
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
    1236:	28 2f       	mov	r18, r24
    1238:	ce 01       	movw	r24, r28
    123a:	08 96       	adiw	r24, 0x08	; 8
    123c:	fc 01       	movw	r30, r24
    123e:	e0 0f       	add	r30, r16
    1240:	f1 1f       	adc	r31, r17
    1242:	20 83       	st	Z, r18
	uint8 check_re_password[no_of_Password];
	uint8 state,j;

	UART_sendByte(SEND_PASSWORD);

	for(j=0; j < no_of_Password; j++)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	89 83       	std	Y+1, r24	; 0x01
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	85 30       	cpi	r24, 0x05	; 5
    124e:	70 f3       	brcs	.-36     	; 0x122c <option_two+0x22>
	{
		check_re_password[j] = UART_recieveByte();
	}
	check_re_password[no_of_Password] = '\0';
    1250:	1d 86       	std	Y+13, r1	; 0x0d

	read_Password_eeprom(check_pass_eeprom);
    1252:	ce 01       	movw	r24, r28
    1254:	03 96       	adiw	r24, 0x03	; 3
    1256:	0e 94 63 08 	call	0x10c6	; 0x10c6 <read_Password_eeprom>

	state = ComparePassword(check_pass_eeprom, check_re_password);
    125a:	ce 01       	movw	r24, r28
    125c:	03 96       	adiw	r24, 0x03	; 3
    125e:	9e 01       	movw	r18, r28
    1260:	28 5f       	subi	r18, 0xF8	; 248
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	b9 01       	movw	r22, r18
    1266:	0e 94 c9 07 	call	0xf92	; 0xf92 <ComparePassword>
    126a:	8a 83       	std	Y+2, r24	; 0x02

	if( state == correct_password )
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	71 f4       	brne	.+28     	; 0x128e <option_two+0x84>
	{
		while ( UART_recieveByte() != SEND_PASSWORD);
    1272:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
    1276:	82 31       	cpi	r24, 0x12	; 18
    1278:	e1 f7       	brne	.-8      	; 0x1272 <option_two+0x68>

		UART_sendByte(correct_password);
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>
		state = check_password_first_time();
    1280:	0e 94 43 06 	call	0xc86	; 0xc86 <check_password_first_time>
    1284:	8a 83       	std	Y+2, r24	; 0x02
		check_state(state);
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	0e 94 4e 07 	call	0xe9c	; 0xe9c <check_state>
    128c:	0c c0       	rjmp	.+24     	; 0x12a6 <option_two+0x9c>
	}

	else if (state == wrong_password)
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	88 23       	and	r24, r24
    1292:	49 f4       	brne	.+18     	; 0x12a6 <option_two+0x9c>
	{
		while ( UART_recieveByte() != SEND_PASSWORD);
    1294:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
    1298:	82 31       	cpi	r24, 0x12	; 18
    129a:	e1 f7       	brne	.-8      	; 0x1294 <option_two+0x8a>
		UART_sendByte(wrong_password);
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>

		wrong_option_two();
    12a2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <wrong_option_two>
	}

}
    12a6:	2c 96       	adiw	r28, 0x0c	; 12
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	cf 91       	pop	r28
    12b4:	df 91       	pop	r29
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	08 95       	ret

000012bc <wrong_option_two>:
void wrong_option_two (void)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	if (g_wrong_entery == max_wrong_pass)
    12c4:	80 91 78 00 	lds	r24, 0x0078
    12c8:	82 30       	cpi	r24, 0x02	; 2
    12ca:	a1 f4       	brne	.+40     	; 0x12f4 <wrong_option_two+0x38>
	{
		Buzzer_on();
    12cc:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
		g_secondsCount=0;
    12d0:	10 92 77 00 	sts	0x0077, r1
    12d4:	10 92 76 00 	sts	0x0076, r1
		while(g_secondsCount < 60);
    12d8:	80 91 76 00 	lds	r24, 0x0076
    12dc:	90 91 77 00 	lds	r25, 0x0077
    12e0:	8c 33       	cpi	r24, 0x3C	; 60
    12e2:	91 05       	cpc	r25, r1
    12e4:	c8 f3       	brcs	.-14     	; 0x12d8 <wrong_option_two+0x1c>

		Buzzer_off();
    12e6:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>
		g_wrong_entery = 0;
    12ea:	10 92 78 00 	sts	0x0078, r1
		check_state(correct_password);
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	0e 94 4e 07 	call	0xe9c	; 0xe9c <check_state>
	}
	++g_wrong_entery;
    12f4:	80 91 78 00 	lds	r24, 0x0078
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	80 93 78 00 	sts	0x0078, r24
	option_two();
    12fe:	0e 94 05 09 	call	0x120a	; 0x120a <option_two>
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <timer1ControlCallBack>:


void timer1ControlCallBack()
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
	/* Increment the seconds counter */
	g_secondsCount++;
    1310:	80 91 76 00 	lds	r24, 0x0076
    1314:	90 91 77 00 	lds	r25, 0x0077
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	90 93 77 00 	sts	0x0077, r25
    131e:	80 93 76 00 	sts	0x0076, r24
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <__vector_9>:
#include <avr/io.h>

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_OVF_vect)
{
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	2f 93       	push	r18
    1334:	3f 93       	push	r19
    1336:	4f 93       	push	r20
    1338:	5f 93       	push	r21
    133a:	6f 93       	push	r22
    133c:	7f 93       	push	r23
    133e:	8f 93       	push	r24
    1340:	9f 93       	push	r25
    1342:	af 93       	push	r26
    1344:	bf 93       	push	r27
    1346:	ef 93       	push	r30
    1348:	ff 93       	push	r31
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
	if( g_callBackPtr != NULL_PTR)
    1352:	80 91 79 00 	lds	r24, 0x0079
    1356:	90 91 7a 00 	lds	r25, 0x007A
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	29 f0       	breq	.+10     	; 0x1368 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    135e:	e0 91 79 00 	lds	r30, 0x0079
    1362:	f0 91 7a 00 	lds	r31, 0x007A
    1366:	09 95       	icall
	}
}
    1368:	cf 91       	pop	r28
    136a:	df 91       	pop	r29
    136c:	ff 91       	pop	r31
    136e:	ef 91       	pop	r30
    1370:	bf 91       	pop	r27
    1372:	af 91       	pop	r26
    1374:	9f 91       	pop	r25
    1376:	8f 91       	pop	r24
    1378:	7f 91       	pop	r23
    137a:	6f 91       	pop	r22
    137c:	5f 91       	pop	r21
    137e:	4f 91       	pop	r20
    1380:	3f 91       	pop	r19
    1382:	2f 91       	pop	r18
    1384:	0f 90       	pop	r0
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	0f 90       	pop	r0
    138a:	1f 90       	pop	r1
    138c:	18 95       	reti

0000138e <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	2f 93       	push	r18
    139a:	3f 93       	push	r19
    139c:	4f 93       	push	r20
    139e:	5f 93       	push	r21
    13a0:	6f 93       	push	r22
    13a2:	7f 93       	push	r23
    13a4:	8f 93       	push	r24
    13a6:	9f 93       	push	r25
    13a8:	af 93       	push	r26
    13aa:	bf 93       	push	r27
    13ac:	ef 93       	push	r30
    13ae:	ff 93       	push	r31
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    13b8:	80 91 79 00 	lds	r24, 0x0079
    13bc:	90 91 7a 00 	lds	r25, 0x007A
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	29 f0       	breq	.+10     	; 0x13ce <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    13c4:	e0 91 79 00 	lds	r30, 0x0079
    13c8:	f0 91 7a 00 	lds	r31, 0x007A
    13cc:	09 95       	icall
	}

}
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	ff 91       	pop	r31
    13d4:	ef 91       	pop	r30
    13d6:	bf 91       	pop	r27
    13d8:	af 91       	pop	r26
    13da:	9f 91       	pop	r25
    13dc:	8f 91       	pop	r24
    13de:	7f 91       	pop	r23
    13e0:	6f 91       	pop	r22
    13e2:	5f 91       	pop	r21
    13e4:	4f 91       	pop	r20
    13e6:	3f 91       	pop	r19
    13e8:	2f 91       	pop	r18
    13ea:	0f 90       	pop	r0
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	0f 90       	pop	r0
    13f0:	1f 90       	pop	r1
    13f2:	18 95       	reti

000013f4 <PWM_Timer0_Start>:


void PWM_Timer0_Start (uint8 duty_cycle)
{
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	0f 92       	push	r0
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0;
    1400:	e2 e5       	ldi	r30, 0x52	; 82
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	10 82       	st	Z, r1

	if (duty_cycle == 25)
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	89 31       	cpi	r24, 0x19	; 25
    140a:	29 f4       	brne	.+10     	; 0x1416 <PWM_Timer0_Start+0x22>
	{
		OCR0 = 63;
    140c:	ec e5       	ldi	r30, 0x5C	; 92
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8f e3       	ldi	r24, 0x3F	; 63
    1412:	80 83       	st	Z, r24
    1414:	17 c0       	rjmp	.+46     	; 0x1444 <PWM_Timer0_Start+0x50>
	}
	else if (duty_cycle == 50)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	82 33       	cpi	r24, 0x32	; 50
    141a:	29 f4       	brne	.+10     	; 0x1426 <PWM_Timer0_Start+0x32>
	{
		OCR0 = 127 ;
    141c:	ec e5       	ldi	r30, 0x5C	; 92
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	8f e7       	ldi	r24, 0x7F	; 127
    1422:	80 83       	st	Z, r24
    1424:	0f c0       	rjmp	.+30     	; 0x1444 <PWM_Timer0_Start+0x50>
	}
	else if (duty_cycle == 75)
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	8b 34       	cpi	r24, 0x4B	; 75
    142a:	29 f4       	brne	.+10     	; 0x1436 <PWM_Timer0_Start+0x42>
	{
		OCR0 = 191;
    142c:	ec e5       	ldi	r30, 0x5C	; 92
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	8f eb       	ldi	r24, 0xBF	; 191
    1432:	80 83       	st	Z, r24
    1434:	07 c0       	rjmp	.+14     	; 0x1444 <PWM_Timer0_Start+0x50>
	}
	else if (duty_cycle == 100)
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	84 36       	cpi	r24, 0x64	; 100
    143a:	21 f4       	brne	.+8      	; 0x1444 <PWM_Timer0_Start+0x50>
	{
		OCR0  = 255;
    143c:	ec e5       	ldi	r30, 0x5C	; 92
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	8f ef       	ldi	r24, 0xFF	; 255
    1442:	80 83       	st	Z, r24
	}
	DDRB  |= (1<<PB3);
    1444:	a7 e3       	ldi	r26, 0x37	; 55
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e7 e3       	ldi	r30, 0x37	; 55
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	88 60       	ori	r24, 0x08	; 8
    1450:	8c 93       	st	X, r24

	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1452:	e3 e5       	ldi	r30, 0x53	; 83
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	8a e6       	ldi	r24, 0x6A	; 106
    1458:	80 83       	st	Z, r24
}
    145a:	0f 90       	pop	r0
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	00 d0       	rcall	.+0      	; 0x1468 <Timer1_init+0x6>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr-> initial_value;
    1470:	ac e4       	ldi	r26, 0x4C	; 76
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e9 81       	ldd	r30, Y+1	; 0x01
    1476:	fa 81       	ldd	r31, Y+2	; 0x02
    1478:	80 81       	ld	r24, Z
    147a:	91 81       	ldd	r25, Z+1	; 0x01
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	9c 93       	st	X, r25
    1480:	8e 93       	st	-X, r24

	if ( Config_Ptr-> mode == normal)
    1482:	e9 81       	ldd	r30, Y+1	; 0x01
    1484:	fa 81       	ldd	r31, Y+2	; 0x02
    1486:	85 81       	ldd	r24, Z+5	; 0x05
    1488:	88 23       	and	r24, r24
    148a:	11 f5       	brne	.+68     	; 0x14d0 <Timer1_init+0x6e>
	{
		TCCR1A |= (1<<FOC1A); /* Compare unit A */
    148c:	af e4       	ldi	r26, 0x4F	; 79
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ef e4       	ldi	r30, 0x4F	; 79
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	88 60       	ori	r24, 0x08	; 8
    1498:	8c 93       	st	X, r24
		TCCR1B &= ~(1<<WGM12); /* Normal mode */
    149a:	ae e4       	ldi	r26, 0x4E	; 78
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ee e4       	ldi	r30, 0x4E	; 78
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	87 7f       	andi	r24, 0xF7	; 247
    14a6:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | Config_Ptr-> prescaler;
    14a8:	ae e4       	ldi	r26, 0x4E	; 78
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ee e4       	ldi	r30, 0x4E	; 78
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	98 2f       	mov	r25, r24
    14b4:	98 7f       	andi	r25, 0xF8	; 248
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	84 81       	ldd	r24, Z+4	; 0x04
    14bc:	89 2b       	or	r24, r25
    14be:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE1); /* Enables interrupt of overflow */
    14c0:	a9 e5       	ldi	r26, 0x59	; 89
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e9 e5       	ldi	r30, 0x59	; 89
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	84 60       	ori	r24, 0x04	; 4
    14cc:	8c 93       	st	X, r24
    14ce:	58 c0       	rjmp	.+176    	; 0x1580 <Timer1_init+0x11e>
	}

	else if(Config_Ptr-> mode == compare)
    14d0:	e9 81       	ldd	r30, Y+1	; 0x01
    14d2:	fa 81       	ldd	r31, Y+2	; 0x02
    14d4:	85 81       	ldd	r24, Z+5	; 0x05
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	59 f5       	brne	.+86     	; 0x1530 <Timer1_init+0xce>
	{
		TCCR1A |= (1<<FOC1A); /* Compare unit A */
    14da:	af e4       	ldi	r26, 0x4F	; 79
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	ef e4       	ldi	r30, 0x4F	; 79
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	88 60       	ori	r24, 0x08	; 8
    14e6:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12); /* CTC */
    14e8:	ae e4       	ldi	r26, 0x4E	; 78
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ee e4       	ldi	r30, 0x4E	; 78
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	88 60       	ori	r24, 0x08	; 8
    14f4:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | Config_Ptr-> prescaler;
    14f6:	ae e4       	ldi	r26, 0x4E	; 78
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ee e4       	ldi	r30, 0x4E	; 78
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	98 2f       	mov	r25, r24
    1502:	98 7f       	andi	r25, 0xF8	; 248
    1504:	e9 81       	ldd	r30, Y+1	; 0x01
    1506:	fa 81       	ldd	r31, Y+2	; 0x02
    1508:	84 81       	ldd	r24, Z+4	; 0x04
    150a:	89 2b       	or	r24, r25
    150c:	8c 93       	st	X, r24

		OCR1A = Config_Ptr-> compare_value; /* Output compare register A */
    150e:	aa e4       	ldi	r26, 0x4A	; 74
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e9 81       	ldd	r30, Y+1	; 0x01
    1514:	fa 81       	ldd	r31, Y+2	; 0x02
    1516:	82 81       	ldd	r24, Z+2	; 0x02
    1518:	93 81       	ldd	r25, Z+3	; 0x03
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	9c 93       	st	X, r25
    151e:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A); /*Enables interrupt of Compare Match A*/
    1520:	a9 e5       	ldi	r26, 0x59	; 89
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e9 e5       	ldi	r30, 0x59	; 89
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	80 61       	ori	r24, 0x10	; 16
    152c:	8c 93       	st	X, r24
    152e:	28 c0       	rjmp	.+80     	; 0x1580 <Timer1_init+0x11e>
	}

	else if(Config_Ptr-> mode == PWM)
    1530:	e9 81       	ldd	r30, Y+1	; 0x01
    1532:	fa 81       	ldd	r31, Y+2	; 0x02
    1534:	85 81       	ldd	r24, Z+5	; 0x05
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	19 f5       	brne	.+70     	; 0x1580 <Timer1_init+0x11e>
	{
		TCCR1A |= (1<<WGM10) | (1<<WGM11);
    153a:	af e4       	ldi	r26, 0x4F	; 79
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	ef e4       	ldi	r30, 0x4F	; 79
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	83 60       	ori	r24, 0x03	; 3
    1546:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12) | (1<<WGM13);
    1548:	ae e4       	ldi	r26, 0x4E	; 78
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	ee e4       	ldi	r30, 0x4E	; 78
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	88 61       	ori	r24, 0x18	; 24
    1554:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | Config_Ptr-> prescaler;
    1556:	ae e4       	ldi	r26, 0x4E	; 78
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ee e4       	ldi	r30, 0x4E	; 78
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	98 2f       	mov	r25, r24
    1562:	98 7f       	andi	r25, 0xF8	; 248
    1564:	e9 81       	ldd	r30, Y+1	; 0x01
    1566:	fa 81       	ldd	r31, Y+2	; 0x02
    1568:	84 81       	ldd	r24, Z+4	; 0x04
    156a:	89 2b       	or	r24, r25
    156c:	8c 93       	st	X, r24
		OCR1A = Config_Ptr-> compare_value;
    156e:	aa e4       	ldi	r26, 0x4A	; 74
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e9 81       	ldd	r30, Y+1	; 0x01
    1574:	fa 81       	ldd	r31, Y+2	; 0x02
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	11 96       	adiw	r26, 0x01	; 1
    157c:	9c 93       	st	X, r25
    157e:	8e 93       	st	-X, r24
	}
}
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <Timer1_deInit>:

void Timer1_deInit(void)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	TCCR1A &= 0x0B; 	/* FOC1A/WGM11/WGM10 =0*/
    1592:	af e4       	ldi	r26, 0x4F	; 79
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	ef e4       	ldi	r30, 0x4F	; 79
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	8b 70       	andi	r24, 0x0B	; 11
    159e:	8c 93       	st	X, r24
	TCCR1B &= 0xE0;     /* No clock source(Timer/counter stop)and WGM13/WGM12 =0 */
    15a0:	ae e4       	ldi	r26, 0x4E	; 78
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	ee e4       	ldi	r30, 0x4E	; 78
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	80 7e       	andi	r24, 0xE0	; 224
    15ac:	8c 93       	st	X, r24
	TCNT1 = 0;			/* clear the initial value */
    15ae:	ec e4       	ldi	r30, 0x4C	; 76
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	11 82       	std	Z+1, r1	; 0x01
    15b4:	10 82       	st	Z, r1
	TIMSK &= ~(1<<OCIE1A); /* disable interrupt of overflow */
    15b6:	a9 e5       	ldi	r26, 0x59	; 89
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e9 e5       	ldi	r30, 0x59	; 89
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	8f 7e       	andi	r24, 0xEF	; 239
    15c2:	8c 93       	st	X, r24
	TIMSK &= ~(1<<TOIE1); /*disable interrupt of Compare Match A*/
    15c4:	a9 e5       	ldi	r26, 0x59	; 89
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e9 e5       	ldi	r30, 0x59	; 89
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	8b 7f       	andi	r24, 0xFB	; 251
    15d0:	8c 93       	st	X, r24
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	00 d0       	rcall	.+0      	; 0x15de <Timer1_setCallBack+0x6>
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
    15e2:	9a 83       	std	Y+2, r25	; 0x02
    15e4:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	90 93 7a 00 	sts	0x007A, r25
    15ee:	80 93 79 00 	sts	0x0079, r24
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <DcMotor_init>:
/*
 * Description : Function to initialize the Dc Motor driver
 *
 */
void DcMotor_init(void)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID_S1 , DC_MOTOR_PIN_ID_S1 , PIN_OUTPUT);
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	0e 94 02 0c 	call	0x1804	; 0x1804 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID_S2 , DC_MOTOR_PIN_ID_S2 , PIN_OUTPUT);
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	0e 94 02 0c 	call	0x1804	; 0x1804 <GPIO_setupPinDirection>

	GPIO_writePin(DC_MOTOR_PORT_ID_S1,DC_MOTOR_PIN_ID_S1,LOGIC_LOW);
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	0e 94 ed 0c 	call	0x19da	; 0x19da <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID_S2,DC_MOTOR_PIN_ID_S2,LOGIC_LOW);
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	61 e0       	ldi	r22, 0x01	; 1
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	0e 94 ed 0c 	call	0x19da	; 0x19da <GPIO_writePin>
}
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <DcMotor_Rotate>:

void DcMotor_Rotate(  DcMotor_state state, uint8 g_speed)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	00 d0       	rcall	.+0      	; 0x1638 <DcMotor_Rotate+0x6>
    1638:	00 d0       	rcall	.+0      	; 0x163a <DcMotor_Rotate+0x8>
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	6a 83       	std	Y+2, r22	; 0x02
	switch (state)
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	3c 83       	std	Y+4, r19	; 0x04
    164a:	2b 83       	std	Y+3, r18	; 0x03
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	91 05       	cpc	r25, r1
    1654:	a1 f0       	breq	.+40     	; 0x167e <DcMotor_Rotate+0x4c>
    1656:	2b 81       	ldd	r18, Y+3	; 0x03
    1658:	3c 81       	ldd	r19, Y+4	; 0x04
    165a:	22 30       	cpi	r18, 0x02	; 2
    165c:	31 05       	cpc	r19, r1
    165e:	e9 f0       	breq	.+58     	; 0x169a <DcMotor_Rotate+0x68>
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	31 f5       	brne	.+76     	; 0x16b4 <DcMotor_Rotate+0x82>
	{
	case stop :
		GPIO_writePin(DC_MOTOR_PORT_ID_S1,DC_MOTOR_PIN_ID_S1,LOGIC_LOW);
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	40 e0       	ldi	r20, 0x00	; 0
    166e:	0e 94 ed 0c 	call	0x19da	; 0x19da <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID_S2,DC_MOTOR_PIN_ID_S2,LOGIC_LOW);
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	0e 94 ed 0c 	call	0x19da	; 0x19da <GPIO_writePin>
    167c:	1b c0       	rjmp	.+54     	; 0x16b4 <DcMotor_Rotate+0x82>
		break;

	case clockwise:
		GPIO_writePin(DC_MOTOR_PORT_ID_S1,DC_MOTOR_PIN_ID_S1,LOGIC_HIGH);
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	0e 94 ed 0c 	call	0x19da	; 0x19da <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID_S2,DC_MOTOR_PIN_ID_S2,LOGIC_LOW);
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	40 e0       	ldi	r20, 0x00	; 0
    168e:	0e 94 ed 0c 	call	0x19da	; 0x19da <GPIO_writePin>
		PWM_Timer0_Start(g_speed);
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <PWM_Timer0_Start>
    1698:	0d c0       	rjmp	.+26     	; 0x16b4 <DcMotor_Rotate+0x82>
		break ;

	case anticlockwise:
		GPIO_writePin(DC_MOTOR_PORT_ID_S1,DC_MOTOR_PIN_ID_S1,LOGIC_LOW);
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	40 e0       	ldi	r20, 0x00	; 0
    16a0:	0e 94 ed 0c 	call	0x19da	; 0x19da <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID_S2,DC_MOTOR_PIN_ID_S2,LOGIC_HIGH);
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	61 e0       	ldi	r22, 0x01	; 1
    16a8:	41 e0       	ldi	r20, 0x01	; 1
    16aa:	0e 94 ed 0c 	call	0x19da	; 0x19da <GPIO_writePin>
		PWM_Timer0_Start(g_speed);
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <PWM_Timer0_Start>
		break;
	}
}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <EEPROM_writeByte+0x6>
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <EEPROM_writeByte+0x8>
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    16d4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    16d8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_getStatus>
    16dc:	88 30       	cpi	r24, 0x08	; 8
    16de:	11 f0       	breq	.+4      	; 0x16e4 <EEPROM_writeByte+0x22>
        return ERROR;
    16e0:	1c 82       	std	Y+4, r1	; 0x04
    16e2:	28 c0       	rjmp	.+80     	; 0x1734 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	80 70       	andi	r24, 0x00	; 0
    16ea:	97 70       	andi	r25, 0x07	; 7
    16ec:	88 0f       	add	r24, r24
    16ee:	89 2f       	mov	r24, r25
    16f0:	88 1f       	adc	r24, r24
    16f2:	99 0b       	sbc	r25, r25
    16f4:	91 95       	neg	r25
    16f6:	80 6a       	ori	r24, 0xA0	; 160
    16f8:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    16fc:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_getStatus>
    1700:	88 31       	cpi	r24, 0x18	; 24
    1702:	11 f0       	breq	.+4      	; 0x1708 <EEPROM_writeByte+0x46>
        return ERROR; 
    1704:	1c 82       	std	Y+4, r1	; 0x04
    1706:	16 c0       	rjmp	.+44     	; 0x1734 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    170e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_getStatus>
    1712:	88 32       	cpi	r24, 0x28	; 40
    1714:	11 f0       	breq	.+4      	; 0x171a <EEPROM_writeByte+0x58>
        return ERROR;
    1716:	1c 82       	std	Y+4, r1	; 0x04
    1718:	0d c0       	rjmp	.+26     	; 0x1734 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1720:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_getStatus>
    1724:	88 32       	cpi	r24, 0x28	; 40
    1726:	11 f0       	breq	.+4      	; 0x172c <EEPROM_writeByte+0x6a>
        return ERROR;
    1728:	1c 82       	std	Y+4, r1	; 0x04
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    172c:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <TWI_stop>
	
    return SUCCESS;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	8c 83       	std	Y+4, r24	; 0x04
    1734:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	00 d0       	rcall	.+0      	; 0x174a <EEPROM_readByte+0x6>
    174a:	00 d0       	rcall	.+0      	; 0x174c <EEPROM_readByte+0x8>
    174c:	0f 92       	push	r0
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	9a 83       	std	Y+2, r25	; 0x02
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	7c 83       	std	Y+4, r23	; 0x04
    1758:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    175a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    175e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_getStatus>
    1762:	88 30       	cpi	r24, 0x08	; 8
    1764:	11 f0       	breq	.+4      	; 0x176a <EEPROM_readByte+0x26>
        return ERROR;
    1766:	1d 82       	std	Y+5, r1	; 0x05
    1768:	44 c0       	rjmp	.+136    	; 0x17f2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	80 70       	andi	r24, 0x00	; 0
    1770:	97 70       	andi	r25, 0x07	; 7
    1772:	88 0f       	add	r24, r24
    1774:	89 2f       	mov	r24, r25
    1776:	88 1f       	adc	r24, r24
    1778:	99 0b       	sbc	r25, r25
    177a:	91 95       	neg	r25
    177c:	80 6a       	ori	r24, 0xA0	; 160
    177e:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1782:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_getStatus>
    1786:	88 31       	cpi	r24, 0x18	; 24
    1788:	11 f0       	breq	.+4      	; 0x178e <EEPROM_readByte+0x4a>
        return ERROR;
    178a:	1d 82       	std	Y+5, r1	; 0x05
    178c:	32 c0       	rjmp	.+100    	; 0x17f2 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1794:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_getStatus>
    1798:	88 32       	cpi	r24, 0x28	; 40
    179a:	11 f0       	breq	.+4      	; 0x17a0 <EEPROM_readByte+0x5c>
        return ERROR;
    179c:	1d 82       	std	Y+5, r1	; 0x05
    179e:	29 c0       	rjmp	.+82     	; 0x17f2 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    17a0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    17a4:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_getStatus>
    17a8:	80 31       	cpi	r24, 0x10	; 16
    17aa:	11 f0       	breq	.+4      	; 0x17b0 <EEPROM_readByte+0x6c>
        return ERROR;
    17ac:	1d 82       	std	Y+5, r1	; 0x05
    17ae:	21 c0       	rjmp	.+66     	; 0x17f2 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	80 70       	andi	r24, 0x00	; 0
    17b6:	97 70       	andi	r25, 0x07	; 7
    17b8:	88 0f       	add	r24, r24
    17ba:	89 2f       	mov	r24, r25
    17bc:	88 1f       	adc	r24, r24
    17be:	99 0b       	sbc	r25, r25
    17c0:	91 95       	neg	r25
    17c2:	81 6a       	ori	r24, 0xA1	; 161
    17c4:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    17c8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_getStatus>
    17cc:	80 34       	cpi	r24, 0x40	; 64
    17ce:	11 f0       	breq	.+4      	; 0x17d4 <EEPROM_readByte+0x90>
        return ERROR;
    17d0:	1d 82       	std	Y+5, r1	; 0x05
    17d2:	0f c0       	rjmp	.+30     	; 0x17f2 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    17d4:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <TWI_readByteWithNACK>
    17d8:	eb 81       	ldd	r30, Y+3	; 0x03
    17da:	fc 81       	ldd	r31, Y+4	; 0x04
    17dc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    17de:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_getStatus>
    17e2:	88 35       	cpi	r24, 0x58	; 88
    17e4:	11 f0       	breq	.+4      	; 0x17ea <EEPROM_readByte+0xa6>
        return ERROR;
    17e6:	1d 82       	std	Y+5, r1	; 0x05
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    17ea:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <TWI_stop>

    return SUCCESS;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	8d 83       	std	Y+5, r24	; 0x05
    17f2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	00 d0       	rcall	.+0      	; 0x180a <GPIO_setupPinDirection+0x6>
    180a:	00 d0       	rcall	.+0      	; 0x180c <GPIO_setupPinDirection+0x8>
    180c:	0f 92       	push	r0
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	6a 83       	std	Y+2, r22	; 0x02
    1816:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	88 30       	cpi	r24, 0x08	; 8
    181c:	08 f0       	brcs	.+2      	; 0x1820 <GPIO_setupPinDirection+0x1c>
    181e:	d5 c0       	rjmp	.+426    	; 0x19ca <GPIO_setupPinDirection+0x1c6>
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	84 30       	cpi	r24, 0x04	; 4
    1824:	08 f0       	brcs	.+2      	; 0x1828 <GPIO_setupPinDirection+0x24>
    1826:	d1 c0       	rjmp	.+418    	; 0x19ca <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	3d 83       	std	Y+5, r19	; 0x05
    1830:	2c 83       	std	Y+4, r18	; 0x04
    1832:	8c 81       	ldd	r24, Y+4	; 0x04
    1834:	9d 81       	ldd	r25, Y+5	; 0x05
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	91 05       	cpc	r25, r1
    183a:	09 f4       	brne	.+2      	; 0x183e <GPIO_setupPinDirection+0x3a>
    183c:	43 c0       	rjmp	.+134    	; 0x18c4 <GPIO_setupPinDirection+0xc0>
    183e:	2c 81       	ldd	r18, Y+4	; 0x04
    1840:	3d 81       	ldd	r19, Y+5	; 0x05
    1842:	22 30       	cpi	r18, 0x02	; 2
    1844:	31 05       	cpc	r19, r1
    1846:	2c f4       	brge	.+10     	; 0x1852 <GPIO_setupPinDirection+0x4e>
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	9d 81       	ldd	r25, Y+5	; 0x05
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	71 f0       	breq	.+28     	; 0x186c <GPIO_setupPinDirection+0x68>
    1850:	bc c0       	rjmp	.+376    	; 0x19ca <GPIO_setupPinDirection+0x1c6>
    1852:	2c 81       	ldd	r18, Y+4	; 0x04
    1854:	3d 81       	ldd	r19, Y+5	; 0x05
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	31 05       	cpc	r19, r1
    185a:	09 f4       	brne	.+2      	; 0x185e <GPIO_setupPinDirection+0x5a>
    185c:	5f c0       	rjmp	.+190    	; 0x191c <GPIO_setupPinDirection+0x118>
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	09 f4       	brne	.+2      	; 0x186a <GPIO_setupPinDirection+0x66>
    1868:	85 c0       	rjmp	.+266    	; 0x1974 <GPIO_setupPinDirection+0x170>
    186a:	af c0       	rjmp	.+350    	; 0x19ca <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	a1 f4       	brne	.+40     	; 0x189a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1872:	aa e3       	ldi	r26, 0x3A	; 58
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ea e3       	ldi	r30, 0x3A	; 58
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	48 2f       	mov	r20, r24
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	02 2e       	mov	r0, r18
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <GPIO_setupPinDirection+0x8c>
    188c:	88 0f       	add	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	0a 94       	dec	r0
    1892:	e2 f7       	brpl	.-8      	; 0x188c <GPIO_setupPinDirection+0x88>
    1894:	84 2b       	or	r24, r20
    1896:	8c 93       	st	X, r24
    1898:	98 c0       	rjmp	.+304    	; 0x19ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    189a:	aa e3       	ldi	r26, 0x3A	; 58
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ea e3       	ldi	r30, 0x3A	; 58
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	48 2f       	mov	r20, r24
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	02 2e       	mov	r0, r18
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <GPIO_setupPinDirection+0xb4>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	0a 94       	dec	r0
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <GPIO_setupPinDirection+0xb0>
    18bc:	80 95       	com	r24
    18be:	84 23       	and	r24, r20
    18c0:	8c 93       	st	X, r24
    18c2:	83 c0       	rjmp	.+262    	; 0x19ca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	a1 f4       	brne	.+40     	; 0x18f2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    18ca:	a7 e3       	ldi	r26, 0x37	; 55
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	e7 e3       	ldi	r30, 0x37	; 55
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	48 2f       	mov	r20, r24
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <GPIO_setupPinDirection+0xe4>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <GPIO_setupPinDirection+0xe0>
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	6c c0       	rjmp	.+216    	; 0x19ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    18f2:	a7 e3       	ldi	r26, 0x37	; 55
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e7 e3       	ldi	r30, 0x37	; 55
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	48 2f       	mov	r20, r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	28 2f       	mov	r18, r24
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	02 2e       	mov	r0, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <GPIO_setupPinDirection+0x10c>
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	0a 94       	dec	r0
    1912:	e2 f7       	brpl	.-8      	; 0x190c <GPIO_setupPinDirection+0x108>
    1914:	80 95       	com	r24
    1916:	84 23       	and	r24, r20
    1918:	8c 93       	st	X, r24
    191a:	57 c0       	rjmp	.+174    	; 0x19ca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	a1 f4       	brne	.+40     	; 0x194a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1922:	a4 e3       	ldi	r26, 0x34	; 52
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	e4 e3       	ldi	r30, 0x34	; 52
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <GPIO_setupPinDirection+0x13c>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <GPIO_setupPinDirection+0x138>
    1944:	84 2b       	or	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	40 c0       	rjmp	.+128    	; 0x19ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    194a:	a4 e3       	ldi	r26, 0x34	; 52
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e4 e3       	ldi	r30, 0x34	; 52
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	48 2f       	mov	r20, r24
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <GPIO_setupPinDirection+0x164>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <GPIO_setupPinDirection+0x160>
    196c:	80 95       	com	r24
    196e:	84 23       	and	r24, r20
    1970:	8c 93       	st	X, r24
    1972:	2b c0       	rjmp	.+86     	; 0x19ca <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	a1 f4       	brne	.+40     	; 0x19a2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    197a:	a1 e3       	ldi	r26, 0x31	; 49
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e1 e3       	ldi	r30, 0x31	; 49
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	48 2f       	mov	r20, r24
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 2e       	mov	r0, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <GPIO_setupPinDirection+0x194>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	0a 94       	dec	r0
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <GPIO_setupPinDirection+0x190>
    199c:	84 2b       	or	r24, r20
    199e:	8c 93       	st	X, r24
    19a0:	14 c0       	rjmp	.+40     	; 0x19ca <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19a2:	a1 e3       	ldi	r26, 0x31	; 49
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e1 e3       	ldi	r30, 0x31	; 49
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <GPIO_setupPinDirection+0x1bc>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <GPIO_setupPinDirection+0x1b8>
    19c4:	80 95       	com	r24
    19c6:	84 23       	and	r24, r20
    19c8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <GPIO_writePin+0x6>
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <GPIO_writePin+0x8>
    19e2:	0f 92       	push	r0
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	6a 83       	std	Y+2, r22	; 0x02
    19ec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	88 30       	cpi	r24, 0x08	; 8
    19f2:	08 f0       	brcs	.+2      	; 0x19f6 <GPIO_writePin+0x1c>
    19f4:	d5 c0       	rjmp	.+426    	; 0x1ba0 <GPIO_writePin+0x1c6>
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	84 30       	cpi	r24, 0x04	; 4
    19fa:	08 f0       	brcs	.+2      	; 0x19fe <GPIO_writePin+0x24>
    19fc:	d1 c0       	rjmp	.+418    	; 0x1ba0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3d 83       	std	Y+5, r19	; 0x05
    1a06:	2c 83       	std	Y+4, r18	; 0x04
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <GPIO_writePin+0x3a>
    1a12:	43 c0       	rjmp	.+134    	; 0x1a9a <GPIO_writePin+0xc0>
    1a14:	2c 81       	ldd	r18, Y+4	; 0x04
    1a16:	3d 81       	ldd	r19, Y+5	; 0x05
    1a18:	22 30       	cpi	r18, 0x02	; 2
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	2c f4       	brge	.+10     	; 0x1a28 <GPIO_writePin+0x4e>
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	9d 81       	ldd	r25, Y+5	; 0x05
    1a22:	00 97       	sbiw	r24, 0x00	; 0
    1a24:	71 f0       	breq	.+28     	; 0x1a42 <GPIO_writePin+0x68>
    1a26:	bc c0       	rjmp	.+376    	; 0x1ba0 <GPIO_writePin+0x1c6>
    1a28:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 05       	cpc	r19, r1
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <GPIO_writePin+0x5a>
    1a32:	5f c0       	rjmp	.+190    	; 0x1af2 <GPIO_writePin+0x118>
    1a34:	8c 81       	ldd	r24, Y+4	; 0x04
    1a36:	9d 81       	ldd	r25, Y+5	; 0x05
    1a38:	83 30       	cpi	r24, 0x03	; 3
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <GPIO_writePin+0x66>
    1a3e:	85 c0       	rjmp	.+266    	; 0x1b4a <GPIO_writePin+0x170>
    1a40:	af c0       	rjmp	.+350    	; 0x1ba0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	81 30       	cpi	r24, 0x01	; 1
    1a46:	a1 f4       	brne	.+40     	; 0x1a70 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1a48:	ab e3       	ldi	r26, 0x3B	; 59
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	eb e3       	ldi	r30, 0x3B	; 59
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <GPIO_writePin+0x8c>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <GPIO_writePin+0x88>
    1a6a:	84 2b       	or	r24, r20
    1a6c:	8c 93       	st	X, r24
    1a6e:	98 c0       	rjmp	.+304    	; 0x1ba0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1a70:	ab e3       	ldi	r26, 0x3B	; 59
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	eb e3       	ldi	r30, 0x3B	; 59
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	48 2f       	mov	r20, r24
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	28 2f       	mov	r18, r24
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	02 2e       	mov	r0, r18
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <GPIO_writePin+0xb4>
    1a8a:	88 0f       	add	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <GPIO_writePin+0xb0>
    1a92:	80 95       	com	r24
    1a94:	84 23       	and	r24, r20
    1a96:	8c 93       	st	X, r24
    1a98:	83 c0       	rjmp	.+262    	; 0x1ba0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	a1 f4       	brne	.+40     	; 0x1ac8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1aa0:	a8 e3       	ldi	r26, 0x38	; 56
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e8 e3       	ldi	r30, 0x38	; 56
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	48 2f       	mov	r20, r24
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	02 2e       	mov	r0, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <GPIO_writePin+0xe4>
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	0a 94       	dec	r0
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <GPIO_writePin+0xe0>
    1ac2:	84 2b       	or	r24, r20
    1ac4:	8c 93       	st	X, r24
    1ac6:	6c c0       	rjmp	.+216    	; 0x1ba0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1ac8:	a8 e3       	ldi	r26, 0x38	; 56
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e8 e3       	ldi	r30, 0x38	; 56
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	48 2f       	mov	r20, r24
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 2e       	mov	r0, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <GPIO_writePin+0x10c>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <GPIO_writePin+0x108>
    1aea:	80 95       	com	r24
    1aec:	84 23       	and	r24, r20
    1aee:	8c 93       	st	X, r24
    1af0:	57 c0       	rjmp	.+174    	; 0x1ba0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	a1 f4       	brne	.+40     	; 0x1b20 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1af8:	a5 e3       	ldi	r26, 0x35	; 53
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	e5 e3       	ldi	r30, 0x35	; 53
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	02 2e       	mov	r0, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <GPIO_writePin+0x13c>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	0a 94       	dec	r0
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <GPIO_writePin+0x138>
    1b1a:	84 2b       	or	r24, r20
    1b1c:	8c 93       	st	X, r24
    1b1e:	40 c0       	rjmp	.+128    	; 0x1ba0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1b20:	a5 e3       	ldi	r26, 0x35	; 53
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e5 e3       	ldi	r30, 0x35	; 53
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 2e       	mov	r0, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <GPIO_writePin+0x164>
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	0a 94       	dec	r0
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <GPIO_writePin+0x160>
    1b42:	80 95       	com	r24
    1b44:	84 23       	and	r24, r20
    1b46:	8c 93       	st	X, r24
    1b48:	2b c0       	rjmp	.+86     	; 0x1ba0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	a1 f4       	brne	.+40     	; 0x1b78 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1b50:	a2 e3       	ldi	r26, 0x32	; 50
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e2 e3       	ldi	r30, 0x32	; 50
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	48 2f       	mov	r20, r24
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 2e       	mov	r0, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <GPIO_writePin+0x194>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0a 94       	dec	r0
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <GPIO_writePin+0x190>
    1b72:	84 2b       	or	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	14 c0       	rjmp	.+40     	; 0x1ba0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b78:	a2 e3       	ldi	r26, 0x32	; 50
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e2 e3       	ldi	r30, 0x32	; 50
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <GPIO_writePin+0x1bc>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <GPIO_writePin+0x1b8>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <GPIO_readPin+0x6>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <GPIO_readPin+0x8>
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
    1bc0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	88 30       	cpi	r24, 0x08	; 8
    1bc8:	08 f0       	brcs	.+2      	; 0x1bcc <GPIO_readPin+0x1c>
    1bca:	84 c0       	rjmp	.+264    	; 0x1cd4 <GPIO_readPin+0x124>
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	84 30       	cpi	r24, 0x04	; 4
    1bd0:	08 f0       	brcs	.+2      	; 0x1bd4 <GPIO_readPin+0x24>
    1bd2:	80 c0       	rjmp	.+256    	; 0x1cd4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	3d 83       	std	Y+5, r19	; 0x05
    1bdc:	2c 83       	std	Y+4, r18	; 0x04
    1bde:	4c 81       	ldd	r20, Y+4	; 0x04
    1be0:	5d 81       	ldd	r21, Y+5	; 0x05
    1be2:	41 30       	cpi	r20, 0x01	; 1
    1be4:	51 05       	cpc	r21, r1
    1be6:	79 f1       	breq	.+94     	; 0x1c46 <GPIO_readPin+0x96>
    1be8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bea:	9d 81       	ldd	r25, Y+5	; 0x05
    1bec:	82 30       	cpi	r24, 0x02	; 2
    1bee:	91 05       	cpc	r25, r1
    1bf0:	34 f4       	brge	.+12     	; 0x1bfe <GPIO_readPin+0x4e>
    1bf2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bf6:	21 15       	cp	r18, r1
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	69 f0       	breq	.+26     	; 0x1c16 <GPIO_readPin+0x66>
    1bfc:	6b c0       	rjmp	.+214    	; 0x1cd4 <GPIO_readPin+0x124>
    1bfe:	4c 81       	ldd	r20, Y+4	; 0x04
    1c00:	5d 81       	ldd	r21, Y+5	; 0x05
    1c02:	42 30       	cpi	r20, 0x02	; 2
    1c04:	51 05       	cpc	r21, r1
    1c06:	b9 f1       	breq	.+110    	; 0x1c76 <GPIO_readPin+0xc6>
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0c:	83 30       	cpi	r24, 0x03	; 3
    1c0e:	91 05       	cpc	r25, r1
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <GPIO_readPin+0x64>
    1c12:	49 c0       	rjmp	.+146    	; 0x1ca6 <GPIO_readPin+0xf6>
    1c14:	5f c0       	rjmp	.+190    	; 0x1cd4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1c16:	e9 e3       	ldi	r30, 0x39	; 57
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a9 01       	movw	r20, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <GPIO_readPin+0x7e>
    1c2a:	55 95       	asr	r21
    1c2c:	47 95       	ror	r20
    1c2e:	8a 95       	dec	r24
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <GPIO_readPin+0x7a>
    1c32:	ca 01       	movw	r24, r20
    1c34:	81 70       	andi	r24, 0x01	; 1
    1c36:	90 70       	andi	r25, 0x00	; 0
    1c38:	88 23       	and	r24, r24
    1c3a:	19 f0       	breq	.+6      	; 0x1c42 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	49 c0       	rjmp	.+146    	; 0x1cd4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c42:	19 82       	std	Y+1, r1	; 0x01
    1c44:	47 c0       	rjmp	.+142    	; 0x1cd4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1c46:	e6 e3       	ldi	r30, 0x36	; 54
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	88 2f       	mov	r24, r24
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	a9 01       	movw	r20, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <GPIO_readPin+0xae>
    1c5a:	55 95       	asr	r21
    1c5c:	47 95       	ror	r20
    1c5e:	8a 95       	dec	r24
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <GPIO_readPin+0xaa>
    1c62:	ca 01       	movw	r24, r20
    1c64:	81 70       	andi	r24, 0x01	; 1
    1c66:	90 70       	andi	r25, 0x00	; 0
    1c68:	88 23       	and	r24, r24
    1c6a:	19 f0       	breq	.+6      	; 0x1c72 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	31 c0       	rjmp	.+98     	; 0x1cd4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c72:	19 82       	std	Y+1, r1	; 0x01
    1c74:	2f c0       	rjmp	.+94     	; 0x1cd4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c76:	e3 e3       	ldi	r30, 0x33	; 51
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a9 01       	movw	r20, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <GPIO_readPin+0xde>
    1c8a:	55 95       	asr	r21
    1c8c:	47 95       	ror	r20
    1c8e:	8a 95       	dec	r24
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <GPIO_readPin+0xda>
    1c92:	ca 01       	movw	r24, r20
    1c94:	81 70       	andi	r24, 0x01	; 1
    1c96:	90 70       	andi	r25, 0x00	; 0
    1c98:	88 23       	and	r24, r24
    1c9a:	19 f0       	breq	.+6      	; 0x1ca2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	19 c0       	rjmp	.+50     	; 0x1cd4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ca2:	19 82       	std	Y+1, r1	; 0x01
    1ca4:	17 c0       	rjmp	.+46     	; 0x1cd4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ca6:	e0 e3       	ldi	r30, 0x30	; 48
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a9 01       	movw	r20, r18
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <GPIO_readPin+0x10e>
    1cba:	55 95       	asr	r21
    1cbc:	47 95       	ror	r20
    1cbe:	8a 95       	dec	r24
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <GPIO_readPin+0x10a>
    1cc2:	ca 01       	movw	r24, r20
    1cc4:	81 70       	andi	r24, 0x01	; 1
    1cc6:	90 70       	andi	r25, 0x00	; 0
    1cc8:	88 23       	and	r24, r24
    1cca:	19 f0       	breq	.+6      	; 0x1cd2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	01 c0       	rjmp	.+2      	; 0x1cd4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cd2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <GPIO_setupPortDirection+0x6>
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <GPIO_setupPortDirection+0x8>
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	84 30       	cpi	r24, 0x04	; 4
    1cfa:	90 f5       	brcc	.+100    	; 0x1d60 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1cfc:	89 81       	ldd	r24, Y+1	; 0x01
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	3c 83       	std	Y+4, r19	; 0x04
    1d04:	2b 83       	std	Y+3, r18	; 0x03
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	d1 f0       	breq	.+52     	; 0x1d44 <GPIO_setupPortDirection+0x5e>
    1d10:	2b 81       	ldd	r18, Y+3	; 0x03
    1d12:	3c 81       	ldd	r19, Y+4	; 0x04
    1d14:	22 30       	cpi	r18, 0x02	; 2
    1d16:	31 05       	cpc	r19, r1
    1d18:	2c f4       	brge	.+10     	; 0x1d24 <GPIO_setupPortDirection+0x3e>
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	61 f0       	breq	.+24     	; 0x1d3a <GPIO_setupPortDirection+0x54>
    1d22:	1e c0       	rjmp	.+60     	; 0x1d60 <GPIO_setupPortDirection+0x7a>
    1d24:	2b 81       	ldd	r18, Y+3	; 0x03
    1d26:	3c 81       	ldd	r19, Y+4	; 0x04
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	81 f0       	breq	.+32     	; 0x1d4e <GPIO_setupPortDirection+0x68>
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	83 30       	cpi	r24, 0x03	; 3
    1d34:	91 05       	cpc	r25, r1
    1d36:	81 f0       	breq	.+32     	; 0x1d58 <GPIO_setupPortDirection+0x72>
    1d38:	13 c0       	rjmp	.+38     	; 0x1d60 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d3a:	ea e3       	ldi	r30, 0x3A	; 58
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	80 83       	st	Z, r24
    1d42:	0e c0       	rjmp	.+28     	; 0x1d60 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d44:	e7 e3       	ldi	r30, 0x37	; 55
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	80 83       	st	Z, r24
    1d4c:	09 c0       	rjmp	.+18     	; 0x1d60 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d4e:	e4 e3       	ldi	r30, 0x34	; 52
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	80 83       	st	Z, r24
    1d56:	04 c0       	rjmp	.+8      	; 0x1d60 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d58:	e1 e3       	ldi	r30, 0x31	; 49
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <GPIO_writePort+0x6>
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <GPIO_writePort+0x8>
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	84 30       	cpi	r24, 0x04	; 4
    1d82:	90 f5       	brcc	.+100    	; 0x1de8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	3c 83       	std	Y+4, r19	; 0x04
    1d8c:	2b 83       	std	Y+3, r18	; 0x03
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	91 05       	cpc	r25, r1
    1d96:	d1 f0       	breq	.+52     	; 0x1dcc <GPIO_writePort+0x5e>
    1d98:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	31 05       	cpc	r19, r1
    1da0:	2c f4       	brge	.+10     	; 0x1dac <GPIO_writePort+0x3e>
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	61 f0       	breq	.+24     	; 0x1dc2 <GPIO_writePort+0x54>
    1daa:	1e c0       	rjmp	.+60     	; 0x1de8 <GPIO_writePort+0x7a>
    1dac:	2b 81       	ldd	r18, Y+3	; 0x03
    1dae:	3c 81       	ldd	r19, Y+4	; 0x04
    1db0:	22 30       	cpi	r18, 0x02	; 2
    1db2:	31 05       	cpc	r19, r1
    1db4:	81 f0       	breq	.+32     	; 0x1dd6 <GPIO_writePort+0x68>
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	83 30       	cpi	r24, 0x03	; 3
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	81 f0       	breq	.+32     	; 0x1de0 <GPIO_writePort+0x72>
    1dc0:	13 c0       	rjmp	.+38     	; 0x1de8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1dc2:	eb e3       	ldi	r30, 0x3B	; 59
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	80 83       	st	Z, r24
    1dca:	0e c0       	rjmp	.+28     	; 0x1de8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1dcc:	e8 e3       	ldi	r30, 0x38	; 56
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	80 83       	st	Z, r24
    1dd4:	09 c0       	rjmp	.+18     	; 0x1de8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1dd6:	e5 e3       	ldi	r30, 0x35	; 53
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	80 83       	st	Z, r24
    1dde:	04 c0       	rjmp	.+8      	; 0x1de8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1de0:	e2 e3       	ldi	r30, 0x32	; 50
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <GPIO_readPort+0x6>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <GPIO_readPort+0x8>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e04:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	84 30       	cpi	r24, 0x04	; 4
    1e0a:	90 f5       	brcc	.+100    	; 0x1e70 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	3c 83       	std	Y+4, r19	; 0x04
    1e14:	2b 83       	std	Y+3, r18	; 0x03
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	d1 f0       	breq	.+52     	; 0x1e54 <GPIO_readPort+0x5e>
    1e20:	2b 81       	ldd	r18, Y+3	; 0x03
    1e22:	3c 81       	ldd	r19, Y+4	; 0x04
    1e24:	22 30       	cpi	r18, 0x02	; 2
    1e26:	31 05       	cpc	r19, r1
    1e28:	2c f4       	brge	.+10     	; 0x1e34 <GPIO_readPort+0x3e>
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	61 f0       	breq	.+24     	; 0x1e4a <GPIO_readPort+0x54>
    1e32:	1e c0       	rjmp	.+60     	; 0x1e70 <GPIO_readPort+0x7a>
    1e34:	2b 81       	ldd	r18, Y+3	; 0x03
    1e36:	3c 81       	ldd	r19, Y+4	; 0x04
    1e38:	22 30       	cpi	r18, 0x02	; 2
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	81 f0       	breq	.+32     	; 0x1e5e <GPIO_readPort+0x68>
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	83 30       	cpi	r24, 0x03	; 3
    1e44:	91 05       	cpc	r25, r1
    1e46:	81 f0       	breq	.+32     	; 0x1e68 <GPIO_readPort+0x72>
    1e48:	13 c0       	rjmp	.+38     	; 0x1e70 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1e4a:	e9 e3       	ldi	r30, 0x39	; 57
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	0e c0       	rjmp	.+28     	; 0x1e70 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1e54:	e6 e3       	ldi	r30, 0x36	; 54
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1e5e:	e3 e3       	ldi	r30, 0x33	; 51
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	89 83       	std	Y+1, r24	; 0x01
    1e66:	04 c0       	rjmp	.+8      	; 0x1e70 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1e68:	e0 e3       	ldi	r30, 0x30	; 48
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	cf 91       	pop	r28
    1e7c:	df 91       	pop	r29
    1e7e:	08 95       	ret

00001e80 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <TWI_init+0xa>
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01

	TWSR = (TWSR & 0xF3) | Config_Ptr-> bit_rate;
    1e92:	a1 e2       	ldi	r26, 0x21	; 33
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e1 e2       	ldi	r30, 0x21	; 33
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	98 2f       	mov	r25, r24
    1e9e:	93 7f       	andi	r25, 0xF3	; 243
    1ea0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea4:	81 81       	ldd	r24, Z+1	; 0x01
    1ea6:	89 2b       	or	r24, r25
    1ea8:	8c 93       	st	X, r24
	TWBR = ( (F_CPU / SCL) - 16 ) / ( 2*(4^Config_Ptr-> bit_rate));
    1eaa:	00 e2       	ldi	r16, 0x20	; 32
    1eac:	10 e0       	ldi	r17, 0x00	; 0
    1eae:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	84 e0       	ldi	r24, 0x04	; 4
    1eb6:	89 27       	eor	r24, r25
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	9c 01       	movw	r18, r24
    1ec2:	44 27       	eor	r20, r20
    1ec4:	37 fd       	sbrc	r19, 7
    1ec6:	40 95       	com	r20
    1ec8:	54 2f       	mov	r21, r20
    1eca:	80 e4       	ldi	r24, 0x40	; 64
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	a0 e0       	ldi	r26, 0x00	; 0
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 ed 10 	call	0x21da	; 0x21da <__udivmodsi4>
    1eda:	da 01       	movw	r26, r20
    1edc:	c9 01       	movw	r24, r18
    1ede:	f8 01       	movw	r30, r16
    1ee0:	80 83       	st	Z, r24
	
    TWAR = Config_Ptr->address << 1 ; // my address = 0x01 :)
    1ee2:	a2 e2       	ldi	r26, 0x22	; 34
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eea:	80 81       	ld	r24, Z
    1eec:	88 0f       	add	r24, r24
    1eee:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1ef0:	e6 e5       	ldi	r30, 0x56	; 86
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	84 e0       	ldi	r24, 0x04	; 4
    1ef6:	80 83       	st	Z, r24
}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	1f 91       	pop	r17
    1f02:	0f 91       	pop	r16
    1f04:	08 95       	ret

00001f06 <TWI_start>:

void TWI_start(void)
{
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1f0e:	e6 e5       	ldi	r30, 0x56	; 86
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	84 ea       	ldi	r24, 0xA4	; 164
    1f14:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f16:	e6 e5       	ldi	r30, 0x56	; 86
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 23       	and	r24, r24
    1f1e:	dc f7       	brge	.-10     	; 0x1f16 <TWI_start+0x10>
}
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <TWI_stop>:

void TWI_stop(void)
{
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1f2e:	e6 e5       	ldi	r30, 0x56	; 86
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	84 e9       	ldi	r24, 0x94	; 148
    1f34:	80 83       	st	Z, r24
}
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	0f 92       	push	r0
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1f48:	e3 e2       	ldi	r30, 0x23	; 35
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	89 81       	ldd	r24, Y+1	; 0x01
    1f4e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1f50:	e6 e5       	ldi	r30, 0x56	; 86
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	84 e8       	ldi	r24, 0x84	; 132
    1f56:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f58:	e6 e5       	ldi	r30, 0x56	; 86
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	88 23       	and	r24, r24
    1f60:	dc f7       	brge	.-10     	; 0x1f58 <TWI_writeByte+0x1c>
}
    1f62:	0f 90       	pop	r0
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1f72:	e6 e5       	ldi	r30, 0x56	; 86
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	84 ec       	ldi	r24, 0xC4	; 196
    1f78:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1f7a:	e6 e5       	ldi	r30, 0x56	; 86
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 23       	and	r24, r24
    1f82:	dc f7       	brge	.-10     	; 0x1f7a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1f84:	e3 e2       	ldi	r30, 0x23	; 35
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
}
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1f98:	e6 e5       	ldi	r30, 0x56	; 86
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	84 e8       	ldi	r24, 0x84	; 132
    1f9e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1fa0:	e6 e5       	ldi	r30, 0x56	; 86
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 23       	and	r24, r24
    1fa8:	dc f7       	brge	.-10     	; 0x1fa0 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1faa:	e3 e2       	ldi	r30, 0x23	; 35
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
}
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	0f 92       	push	r0
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1fc0:	e1 e2       	ldi	r30, 0x21	; 33
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	88 7f       	andi	r24, 0xF8	; 248
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <UART_init+0x6>
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <UART_init+0x8>
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	9c 83       	std	Y+4, r25	; 0x04
    1fe2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1fe4:	1a 82       	std	Y+2, r1	; 0x02
    1fe6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1fe8:	eb e2       	ldi	r30, 0x2B	; 43
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	82 e0       	ldi	r24, 0x02	; 2
    1fee:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1ff0:	ea e2       	ldi	r30, 0x2A	; 42
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	88 e1       	ldi	r24, 0x18	; 24
    1ff6:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    1ff8:	e0 e4       	ldi	r30, 0x40	; 64
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 e8       	ldi	r24, 0x80	; 128
    1ffe:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xC1) | (Config_Ptr->parity) << 4 | (Config_Ptr->stop_bit) << 3 | (Config_Ptr->bit_data) << 1;
    2000:	a0 e4       	ldi	r26, 0x40	; 64
    2002:	b0 e0       	ldi	r27, 0x00	; 0
    2004:	e0 e4       	ldi	r30, 0x40	; 64
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	28 2f       	mov	r18, r24
    200c:	21 7c       	andi	r18, 0xC1	; 193
    200e:	eb 81       	ldd	r30, Y+3	; 0x03
    2010:	fc 81       	ldd	r31, Y+4	; 0x04
    2012:	81 81       	ldd	r24, Z+1	; 0x01
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	82 95       	swap	r24
    201a:	92 95       	swap	r25
    201c:	90 7f       	andi	r25, 0xF0	; 240
    201e:	98 27       	eor	r25, r24
    2020:	80 7f       	andi	r24, 0xF0	; 240
    2022:	98 27       	eor	r25, r24
    2024:	28 2b       	or	r18, r24
    2026:	eb 81       	ldd	r30, Y+3	; 0x03
    2028:	fc 81       	ldd	r31, Y+4	; 0x04
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	28 2b       	or	r18, r24
    203e:	eb 81       	ldd	r30, Y+3	; 0x03
    2040:	fc 81       	ldd	r31, Y+4	; 0x04
    2042:	80 81       	ld	r24, Z
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	82 2b       	or	r24, r18
    204e:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2050:	eb 81       	ldd	r30, Y+3	; 0x03
    2052:	fc 81       	ldd	r31, Y+4	; 0x04
    2054:	83 81       	ldd	r24, Z+3	; 0x03
    2056:	94 81       	ldd	r25, Z+4	; 0x04
    2058:	a5 81       	ldd	r26, Z+5	; 0x05
    205a:	b6 81       	ldd	r27, Z+6	; 0x06
    205c:	88 0f       	add	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	aa 1f       	adc	r26, r26
    2062:	bb 1f       	adc	r27, r27
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	aa 1f       	adc	r26, r26
    206a:	bb 1f       	adc	r27, r27
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	aa 1f       	adc	r26, r26
    2072:	bb 1f       	adc	r27, r27
    2074:	9c 01       	movw	r18, r24
    2076:	ad 01       	movw	r20, r26
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	92 e1       	ldi	r25, 0x12	; 18
    207c:	aa e7       	ldi	r26, 0x7A	; 122
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	bc 01       	movw	r22, r24
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 ed 10 	call	0x21da	; 0x21da <__udivmodsi4>
    2088:	da 01       	movw	r26, r20
    208a:	c9 01       	movw	r24, r18
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2092:	e0 e4       	ldi	r30, 0x40	; 64
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	89 2f       	mov	r24, r25
    209c:	99 27       	eor	r25, r25
    209e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    20a0:	e9 e2       	ldi	r30, 0x29	; 41
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	80 83       	st	Z, r24
}
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	0f 92       	push	r0
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    20c2:	eb e2       	ldi	r30, 0x2B	; 43
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	80 72       	andi	r24, 0x20	; 32
    20ce:	90 70       	andi	r25, 0x00	; 0
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	b9 f3       	breq	.-18     	; 0x20c2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    20d4:	ec e2       	ldi	r30, 0x2C	; 44
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    20dc:	0f 90       	pop	r0
    20de:	cf 91       	pop	r28
    20e0:	df 91       	pop	r29
    20e2:	08 95       	ret

000020e4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    20e4:	df 93       	push	r29
    20e6:	cf 93       	push	r28
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    20ec:	eb e2       	ldi	r30, 0x2B	; 43
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	88 23       	and	r24, r24
    20f4:	dc f7       	brge	.-10     	; 0x20ec <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    20f6:	ec e2       	ldi	r30, 0x2C	; 44
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
}
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	00 d0       	rcall	.+0      	; 0x2108 <UART_sendString+0x6>
    2108:	0f 92       	push	r0
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	9b 83       	std	Y+3, r25	; 0x03
    2110:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2112:	19 82       	std	Y+1, r1	; 0x01
    2114:	0e c0       	rjmp	.+28     	; 0x2132 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	9b 81       	ldd	r25, Y+3	; 0x03
    2120:	fc 01       	movw	r30, r24
    2122:	e2 0f       	add	r30, r18
    2124:	f3 1f       	adc	r31, r19
    2126:	80 81       	ld	r24, Z
    2128:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <UART_sendByte>
		i++;
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	8f 5f       	subi	r24, 0xFF	; 255
    2130:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	28 2f       	mov	r18, r24
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	9b 81       	ldd	r25, Y+3	; 0x03
    213c:	fc 01       	movw	r30, r24
    213e:	e2 0f       	add	r30, r18
    2140:	f3 1f       	adc	r31, r19
    2142:	80 81       	ld	r24, Z
    2144:	88 23       	and	r24, r24
    2146:	39 f7       	brne	.-50     	; 0x2116 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	0f 90       	pop	r0
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	00 d0       	rcall	.+0      	; 0x215e <UART_receiveString+0xa>
    215e:	0f 92       	push	r0
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	9b 83       	std	Y+3, r25	; 0x03
    2166:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2168:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	9b 81       	ldd	r25, Y+3	; 0x03
    2174:	8c 01       	movw	r16, r24
    2176:	02 0f       	add	r16, r18
    2178:	13 1f       	adc	r17, r19
    217a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
    217e:	f8 01       	movw	r30, r16
    2180:	80 83       	st	Z, r24
    2182:	0f c0       	rjmp	.+30     	; 0x21a2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	8f 5f       	subi	r24, 0xFF	; 255
    2188:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	9b 81       	ldd	r25, Y+3	; 0x03
    2194:	8c 01       	movw	r16, r24
    2196:	02 0f       	add	r16, r18
    2198:	13 1f       	adc	r17, r19
    219a:	0e 94 72 10 	call	0x20e4	; 0x20e4 <UART_recieveByte>
    219e:	f8 01       	movw	r30, r16
    21a0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	fc 01       	movw	r30, r24
    21ae:	e2 0f       	add	r30, r18
    21b0:	f3 1f       	adc	r31, r19
    21b2:	80 81       	ld	r24, Z
    21b4:	83 32       	cpi	r24, 0x23	; 35
    21b6:	31 f7       	brne	.-52     	; 0x2184 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	9b 81       	ldd	r25, Y+3	; 0x03
    21c2:	fc 01       	movw	r30, r24
    21c4:	e2 0f       	add	r30, r18
    21c6:	f3 1f       	adc	r31, r19
    21c8:	10 82       	st	Z, r1
}
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	cf 91       	pop	r28
    21d2:	df 91       	pop	r29
    21d4:	1f 91       	pop	r17
    21d6:	0f 91       	pop	r16
    21d8:	08 95       	ret

000021da <__udivmodsi4>:
    21da:	a1 e2       	ldi	r26, 0x21	; 33
    21dc:	1a 2e       	mov	r1, r26
    21de:	aa 1b       	sub	r26, r26
    21e0:	bb 1b       	sub	r27, r27
    21e2:	fd 01       	movw	r30, r26
    21e4:	0d c0       	rjmp	.+26     	; 0x2200 <__udivmodsi4_ep>

000021e6 <__udivmodsi4_loop>:
    21e6:	aa 1f       	adc	r26, r26
    21e8:	bb 1f       	adc	r27, r27
    21ea:	ee 1f       	adc	r30, r30
    21ec:	ff 1f       	adc	r31, r31
    21ee:	a2 17       	cp	r26, r18
    21f0:	b3 07       	cpc	r27, r19
    21f2:	e4 07       	cpc	r30, r20
    21f4:	f5 07       	cpc	r31, r21
    21f6:	20 f0       	brcs	.+8      	; 0x2200 <__udivmodsi4_ep>
    21f8:	a2 1b       	sub	r26, r18
    21fa:	b3 0b       	sbc	r27, r19
    21fc:	e4 0b       	sbc	r30, r20
    21fe:	f5 0b       	sbc	r31, r21

00002200 <__udivmodsi4_ep>:
    2200:	66 1f       	adc	r22, r22
    2202:	77 1f       	adc	r23, r23
    2204:	88 1f       	adc	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	1a 94       	dec	r1
    220a:	69 f7       	brne	.-38     	; 0x21e6 <__udivmodsi4_loop>
    220c:	60 95       	com	r22
    220e:	70 95       	com	r23
    2210:	80 95       	com	r24
    2212:	90 95       	com	r25
    2214:	9b 01       	movw	r18, r22
    2216:	ac 01       	movw	r20, r24
    2218:	bd 01       	movw	r22, r26
    221a:	cf 01       	movw	r24, r30
    221c:	08 95       	ret

0000221e <__prologue_saves__>:
    221e:	2f 92       	push	r2
    2220:	3f 92       	push	r3
    2222:	4f 92       	push	r4
    2224:	5f 92       	push	r5
    2226:	6f 92       	push	r6
    2228:	7f 92       	push	r7
    222a:	8f 92       	push	r8
    222c:	9f 92       	push	r9
    222e:	af 92       	push	r10
    2230:	bf 92       	push	r11
    2232:	cf 92       	push	r12
    2234:	df 92       	push	r13
    2236:	ef 92       	push	r14
    2238:	ff 92       	push	r15
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	cf 93       	push	r28
    2240:	df 93       	push	r29
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	ca 1b       	sub	r28, r26
    2248:	db 0b       	sbc	r29, r27
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	de bf       	out	0x3e, r29	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	cd bf       	out	0x3d, r28	; 61
    2254:	09 94       	ijmp

00002256 <__epilogue_restores__>:
    2256:	2a 88       	ldd	r2, Y+18	; 0x12
    2258:	39 88       	ldd	r3, Y+17	; 0x11
    225a:	48 88       	ldd	r4, Y+16	; 0x10
    225c:	5f 84       	ldd	r5, Y+15	; 0x0f
    225e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2260:	7d 84       	ldd	r7, Y+13	; 0x0d
    2262:	8c 84       	ldd	r8, Y+12	; 0x0c
    2264:	9b 84       	ldd	r9, Y+11	; 0x0b
    2266:	aa 84       	ldd	r10, Y+10	; 0x0a
    2268:	b9 84       	ldd	r11, Y+9	; 0x09
    226a:	c8 84       	ldd	r12, Y+8	; 0x08
    226c:	df 80       	ldd	r13, Y+7	; 0x07
    226e:	ee 80       	ldd	r14, Y+6	; 0x06
    2270:	fd 80       	ldd	r15, Y+5	; 0x05
    2272:	0c 81       	ldd	r16, Y+4	; 0x04
    2274:	1b 81       	ldd	r17, Y+3	; 0x03
    2276:	aa 81       	ldd	r26, Y+2	; 0x02
    2278:	b9 81       	ldd	r27, Y+1	; 0x01
    227a:	ce 0f       	add	r28, r30
    227c:	d1 1d       	adc	r29, r1
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	ed 01       	movw	r28, r26
    228a:	08 95       	ret

0000228c <_exit>:
    228c:	f8 94       	cli

0000228e <__stop_program>:
    228e:	ff cf       	rjmp	.-2      	; 0x228e <__stop_program>


HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  00003918  000039ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800156  00800156  00003aa2  2**0
                  ALLOC
  3 .stab         00003210  00000000  00000000  00003aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000126b  00000000  00000000  00006cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000805f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000081cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ad03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000be9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c66b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e1       	ldi	r30, 0x18	; 24
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 35       	cpi	r26, 0x5C	; 92
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e4       	ldi	r26, 0x40	; 64
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e4       	ldi	r24, 0x40	; 64
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

#include "HMI_ECU.h"


int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	68 97       	sbiw	r28, 0x18	; 24
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 state=0;
     b5a:	19 82       	std	Y+1, r1	; 0x01

	SREG  |= ( 1 << 7 ); /* enables I bit */
     b5c:	af e5       	ldi	r26, 0x5F	; 95
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e5       	ldi	r30, 0x5F	; 95
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 68       	ori	r24, 0x80	; 128
     b68:	8c 93       	st	X, r24

	LCD_init();
     b6a:	0e 94 90 10 	call	0x2120	; 0x2120 <LCD_init>

	UART_ConfigType Uart_config ={eight_bit, disabled, one_bit, 9600};
     b6e:	ce 01       	movw	r24, r28
     b70:	02 96       	adiw	r24, 0x02	; 2
     b72:	98 8b       	std	Y+16, r25	; 0x10
     b74:	8f 87       	std	Y+15, r24	; 0x0f
     b76:	ee e4       	ldi	r30, 0x4E	; 78
     b78:	f1 e0       	ldi	r31, 0x01	; 1
     b7a:	fa 8b       	std	Y+18, r31	; 0x12
     b7c:	e9 8b       	std	Y+17, r30	; 0x11
     b7e:	f7 e0       	ldi	r31, 0x07	; 7
     b80:	fb 8b       	std	Y+19, r31	; 0x13
     b82:	e9 89       	ldd	r30, Y+17	; 0x11
     b84:	fa 89       	ldd	r31, Y+18	; 0x12
     b86:	00 80       	ld	r0, Z
     b88:	89 89       	ldd	r24, Y+17	; 0x11
     b8a:	9a 89       	ldd	r25, Y+18	; 0x12
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	9a 8b       	std	Y+18, r25	; 0x12
     b90:	89 8b       	std	Y+17, r24	; 0x11
     b92:	ef 85       	ldd	r30, Y+15	; 0x0f
     b94:	f8 89       	ldd	r31, Y+16	; 0x10
     b96:	00 82       	st	Z, r0
     b98:	8f 85       	ldd	r24, Y+15	; 0x0f
     b9a:	98 89       	ldd	r25, Y+16	; 0x10
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	98 8b       	std	Y+16, r25	; 0x10
     ba0:	8f 87       	std	Y+15, r24	; 0x0f
     ba2:	9b 89       	ldd	r25, Y+19	; 0x13
     ba4:	91 50       	subi	r25, 0x01	; 1
     ba6:	9b 8b       	std	Y+19, r25	; 0x13
     ba8:	eb 89       	ldd	r30, Y+19	; 0x13
     baa:	ee 23       	and	r30, r30
     bac:	51 f7       	brne	.-44     	; 0xb82 <main+0x3c>
	UART_init(&Uart_config);
     bae:	ce 01       	movw	r24, r28
     bb0:	02 96       	adiw	r24, 0x02	; 2
     bb2:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_init>

	Timer1_ConfigType TIMER1_Config = {0, 31250, clock_256, compare};
     bb6:	ce 01       	movw	r24, r28
     bb8:	09 96       	adiw	r24, 0x09	; 9
     bba:	9d 8b       	std	Y+21, r25	; 0x15
     bbc:	8c 8b       	std	Y+20, r24	; 0x14
     bbe:	e8 e4       	ldi	r30, 0x48	; 72
     bc0:	f1 e0       	ldi	r31, 0x01	; 1
     bc2:	ff 8b       	std	Y+23, r31	; 0x17
     bc4:	ee 8b       	std	Y+22, r30	; 0x16
     bc6:	f6 e0       	ldi	r31, 0x06	; 6
     bc8:	f8 8f       	std	Y+24, r31	; 0x18
     bca:	ee 89       	ldd	r30, Y+22	; 0x16
     bcc:	ff 89       	ldd	r31, Y+23	; 0x17
     bce:	00 80       	ld	r0, Z
     bd0:	8e 89       	ldd	r24, Y+22	; 0x16
     bd2:	9f 89       	ldd	r25, Y+23	; 0x17
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	9f 8b       	std	Y+23, r25	; 0x17
     bd8:	8e 8b       	std	Y+22, r24	; 0x16
     bda:	ec 89       	ldd	r30, Y+20	; 0x14
     bdc:	fd 89       	ldd	r31, Y+21	; 0x15
     bde:	00 82       	st	Z, r0
     be0:	8c 89       	ldd	r24, Y+20	; 0x14
     be2:	9d 89       	ldd	r25, Y+21	; 0x15
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	9d 8b       	std	Y+21, r25	; 0x15
     be8:	8c 8b       	std	Y+20, r24	; 0x14
     bea:	98 8d       	ldd	r25, Y+24	; 0x18
     bec:	91 50       	subi	r25, 0x01	; 1
     bee:	98 8f       	std	Y+24, r25	; 0x18
     bf0:	e8 8d       	ldd	r30, Y+24	; 0x18
     bf2:	ee 23       	and	r30, r30
     bf4:	51 f7       	brne	.-44     	; 0xbca <main+0x84>
	Timer1_init(&TIMER1_Config);
     bf6:	ce 01       	movw	r24, r28
     bf8:	09 96       	adiw	r24, 0x09	; 9
     bfa:	0e 94 8d 0b 	call	0x171a	; 0x171a <Timer1_init>
	Timer1_setCallBack(timer1_HMI_CallBack);
     bfe:	80 ee       	ldi	r24, 0xE0	; 224
     c00:	9a e0       	ldi	r25, 0x0A	; 10
     c02:	0e 94 48 0c 	call	0x1890	; 0x1890 <Timer1_setCallBack>
	 * T = 32*10^-6 * levels
	 * 1s = 32*10^-6 * levels
	 * levels = 31250 level
	 * */

	UART_sendByte(ECU_READY);
     c06:	81 e1       	ldi	r24, 0x11	; 17
     c08:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_sendByte>
	while ( UART_recieveByte() != ECU_READY);
     c0c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
     c10:	81 31       	cpi	r24, 0x11	; 17
     c12:	e1 f7       	brne	.-8      	; 0xc0c <main+0xc6>

	while(1)
	{
		state = display_enter_lcd_first_time();
     c14:	0e 94 11 06 	call	0xc22	; 0xc22 <display_enter_lcd_first_time>
     c18:	89 83       	std	Y+1, r24	; 0x01

		what_is_the_state(state);
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	0e 94 2a 07 	call	0xe54	; 0xe54 <what_is_the_state>
     c20:	f9 cf       	rjmp	.-14     	; 0xc14 <main+0xce>

00000c22 <display_enter_lcd_first_time>:
	}
}


uint8 display_enter_lcd_first_time(void)
{
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	2c 97       	sbiw	r28, 0x0c	; 12
     c2c:	0f b6       	in	r0, 0x3f	; 63
     c2e:	f8 94       	cli
     c30:	de bf       	out	0x3e, r29	; 62
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	cd bf       	out	0x3d, r28	; 61
	uint8 password[no_of_Password];
	uint8 re_password[no_of_Password];
	uint8 state,j;

	LCD_clearScreen();
     c36:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
     c3a:	20 e6       	ldi	r18, 0x60	; 96
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	a9 01       	movw	r20, r18
     c44:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <LCD_moveCursor>

	enter_password(password);
     c50:	ce 01       	movw	r24, r28
     c52:	03 96       	adiw	r24, 0x03	; 3
     c54:	0e 94 82 06 	call	0xd04	; 0xd04 <enter_password>

	while ( UART_recieveByte() != ECU_READY);
     c58:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
     c5c:	81 31       	cpi	r24, 0x11	; 17
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <display_enter_lcd_first_time+0x36>

	for(j=0; j < no_of_Password ; j++)
     c60:	19 82       	std	Y+1, r1	; 0x01
     c62:	0e c0       	rjmp	.+28     	; 0xc80 <display_enter_lcd_first_time+0x5e>
	{
		UART_sendByte(password[j]);
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	ce 01       	movw	r24, r28
     c6c:	03 96       	adiw	r24, 0x03	; 3
     c6e:	fc 01       	movw	r30, r24
     c70:	e2 0f       	add	r30, r18
     c72:	f3 1f       	adc	r31, r19
     c74:	80 81       	ld	r24, Z
     c76:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_sendByte>

	enter_password(password);

	while ( UART_recieveByte() != ECU_READY);

	for(j=0; j < no_of_Password ; j++)
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	85 30       	cpi	r24, 0x05	; 5
     c84:	78 f3       	brcs	.-34     	; 0xc64 <display_enter_lcd_first_time+0x42>
	{
		UART_sendByte(password[j]);
	}

	LCD_clearScreen();
     c86:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Re-Enter the");
     c8a:	20 e7       	ldi	r18, 0x70	; 112
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	a9 01       	movw	r20, r18
     c94:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"same pass:");
     c98:	21 e8       	ldi	r18, 0x81	; 129
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	a9 01       	movw	r20, r18
     ca2:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 10);
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	6a e0       	ldi	r22, 0x0A	; 10
     caa:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <LCD_moveCursor>
	enter_password(re_password);
     cae:	ce 01       	movw	r24, r28
     cb0:	08 96       	adiw	r24, 0x08	; 8
     cb2:	0e 94 82 06 	call	0xd04	; 0xd04 <enter_password>

	while ( UART_recieveByte() != ECU_READY);
     cb6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
     cba:	81 31       	cpi	r24, 0x11	; 17
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <display_enter_lcd_first_time+0x94>

	for(j=0; j < no_of_Password; j++)
     cbe:	19 82       	std	Y+1, r1	; 0x01
     cc0:	0e c0       	rjmp	.+28     	; 0xcde <display_enter_lcd_first_time+0xbc>
	{
		UART_sendByte(re_password[j]);
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	ce 01       	movw	r24, r28
     cca:	08 96       	adiw	r24, 0x08	; 8
     ccc:	fc 01       	movw	r30, r24
     cce:	e2 0f       	add	r30, r18
     cd0:	f3 1f       	adc	r31, r19
     cd2:	80 81       	ld	r24, Z
     cd4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_sendByte>
	LCD_moveCursor(1, 10);
	enter_password(re_password);

	while ( UART_recieveByte() != ECU_READY);

	for(j=0; j < no_of_Password; j++)
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	89 83       	std	Y+1, r24	; 0x01
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	85 30       	cpi	r24, 0x05	; 5
     ce2:	78 f3       	brcs	.-34     	; 0xcc2 <display_enter_lcd_first_time+0xa0>
	{
		UART_sendByte(re_password[j]);
	}

	UART_sendByte(ECU_READY);
     ce4:	81 e1       	ldi	r24, 0x11	; 17
     ce6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_sendByte>
	state =  UART_recieveByte();
     cea:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
     cee:	8a 83       	std	Y+2, r24	; 0x02

	return state;
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
}
     cf2:	2c 96       	adiw	r28, 0x0c	; 12
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	cf 91       	pop	r28
     d00:	df 91       	pop	r29
     d02:	08 95       	ret

00000d04 <enter_password>:

void enter_password(uint8 *pass)
{
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	df 93       	push	r29
     d0a:	cf 93       	push	r28
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	61 97       	sbiw	r28, 0x11	; 17
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	99 8b       	std	Y+17, r25	; 0x11
     d1e:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i=0;
     d20:	1f 86       	std	Y+15, r1	; 0x0f

	for (i=0; i < no_of_Password; i++)
     d22:	1f 86       	std	Y+15, r1	; 0x0f
     d24:	84 c0       	rjmp	.+264    	; 0xe2e <enter_password+0x12a>
	{
		pass[i] = KEYPAD_getPressedKey();
     d26:	8f 85       	ldd	r24, Y+15	; 0x0f
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	88 89       	ldd	r24, Y+16	; 0x10
     d2e:	99 89       	ldd	r25, Y+17	; 0x11
     d30:	8c 01       	movw	r16, r24
     d32:	02 0f       	add	r16, r18
     d34:	13 1f       	adc	r17, r19
     d36:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <KEYPAD_getPressedKey>
     d3a:	f8 01       	movw	r30, r16
     d3c:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
     d3e:	8a e2       	ldi	r24, 0x2A	; 42
     d40:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <LCD_displayCharacter>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	af ea       	ldi	r26, 0xAF	; 175
     d4a:	b3 e4       	ldi	r27, 0x43	; 67
     d4c:	8b 87       	std	Y+11, r24	; 0x0b
     d4e:	9c 87       	std	Y+12, r25	; 0x0c
     d50:	ad 87       	std	Y+13, r26	; 0x0d
     d52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d54:	6b 85       	ldd	r22, Y+11	; 0x0b
     d56:	7c 85       	ldd	r23, Y+12	; 0x0c
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4a ef       	ldi	r20, 0xFA	; 250
     d62:	54 e4       	ldi	r21, 0x44	; 68
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8f 83       	std	Y+7, r24	; 0x07
     d6e:	98 87       	std	Y+8, r25	; 0x08
     d70:	a9 87       	std	Y+9, r26	; 0x09
     d72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d74:	6f 81       	ldd	r22, Y+7	; 0x07
     d76:	78 85       	ldd	r23, Y+8	; 0x08
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	2c f4       	brge	.+10     	; 0xd96 <enter_password+0x92>
		__ticks = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
     d94:	3f c0       	rjmp	.+126    	; 0xe14 <enter_password+0x110>
	else if (__tmp > 65535)
     d96:	6f 81       	ldd	r22, Y+7	; 0x07
     d98:	78 85       	ldd	r23, Y+8	; 0x08
     d9a:	89 85       	ldd	r24, Y+9	; 0x09
     d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     daa:	18 16       	cp	r1, r24
     dac:	4c f5       	brge	.+82     	; 0xe00 <enter_password+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dae:	6b 85       	ldd	r22, Y+11	; 0x0b
     db0:	7c 85       	ldd	r23, Y+12	; 0x0c
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	bc 01       	movw	r22, r24
     dc8:	cd 01       	movw	r24, r26
     dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	9e 83       	std	Y+6, r25	; 0x06
     dd4:	8d 83       	std	Y+5, r24	; 0x05
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <enter_password+0xf2>
     dd8:	88 ec       	ldi	r24, 0xC8	; 200
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	9c 83       	std	Y+4, r25	; 0x04
     dde:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	9c 81       	ldd	r25, Y+4	; 0x04
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <enter_password+0xe0>
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	9e 83       	std	Y+6, r25	; 0x06
     df4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	69 f7       	brne	.-38     	; 0xdd8 <enter_password+0xd4>
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <enter_password+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <enter_password+0x11c>
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01

void enter_password(uint8 *pass)
{
	uint8 i=0;

	for (i=0; i < no_of_Password; i++)
     e28:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	8f 87       	std	Y+15, r24	; 0x0f
     e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e30:	85 30       	cpi	r24, 0x05	; 5
     e32:	08 f4       	brcc	.+2      	; 0xe36 <enter_password+0x132>
     e34:	78 cf       	rjmp	.-272    	; 0xd26 <enter_password+0x22>
		pass[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(350);
	}

	while(KEYPAD_getPressedKey() != '=');
     e36:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <KEYPAD_getPressedKey>
     e3a:	8d 33       	cpi	r24, 0x3D	; 61
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <enter_password+0x132>

}
     e3e:	61 96       	adiw	r28, 0x11	; 17
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <what_is_the_state>:

void what_is_the_state(uint8 state)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	60 97       	sbiw	r28, 0x10	; 16
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	f8 94       	cli
     e62:	de bf       	out	0x3e, r29	; 62
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	cd bf       	out	0x3d, r28	; 61
     e68:	88 8b       	std	Y+16, r24	; 0x10
	uint8 option=0;
     e6a:	1f 86       	std	Y+15, r1	; 0x0f

	if (state == correct_password)
     e6c:	88 89       	ldd	r24, Y+16	; 0x10
     e6e:	81 30       	cpi	r24, 0x01	; 1
     e70:	f1 f4       	brne	.+60     	; 0xeae <what_is_the_state+0x5a>
	{
		option = enter_option();
     e72:	0e 94 de 07 	call	0xfbc	; 0xfbc <enter_option>
     e76:	8f 87       	std	Y+15, r24	; 0x0f

		if(option == '+')
     e78:	8f 85       	ldd	r24, Y+15	; 0x0f
     e7a:	8b 32       	cpi	r24, 0x2B	; 43
     e7c:	51 f4       	brne	.+20     	; 0xe92 <what_is_the_state+0x3e>
		{
			while (UART_recieveByte() != ECU_READY);
     e7e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
     e82:	81 31       	cpi	r24, 0x11	; 17
     e84:	e1 f7       	brne	.-8      	; 0xe7e <what_is_the_state+0x2a>

			UART_sendByte(first_option);
     e86:	88 e2       	ldi	r24, 0x28	; 40
     e88:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_sendByte>

			option_one();
     e8c:	0e 94 77 08 	call	0x10ee	; 0x10ee <option_one>
     e90:	8c c0       	rjmp	.+280    	; 0xfaa <what_is_the_state+0x156>

		}
		else if(option == '-')
     e92:	8f 85       	ldd	r24, Y+15	; 0x0f
     e94:	8d 32       	cpi	r24, 0x2D	; 45
     e96:	09 f0       	breq	.+2      	; 0xe9a <what_is_the_state+0x46>
     e98:	88 c0       	rjmp	.+272    	; 0xfaa <what_is_the_state+0x156>
		{
			while ( UART_recieveByte() != ECU_READY);
     e9a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
     e9e:	81 31       	cpi	r24, 0x11	; 17
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <what_is_the_state+0x46>

			UART_sendByte(second_option);
     ea2:	82 e3       	ldi	r24, 0x32	; 50
     ea4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_sendByte>

			option_two();
     ea8:	0e 94 c9 09 	call	0x1392	; 0x1392 <option_two>
     eac:	7e c0       	rjmp	.+252    	; 0xfaa <what_is_the_state+0x156>
		}
	}
	else
	{
		LCD_clearScreen();
     eae:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
		LCD_displayString("wrong not same");
     eb2:	8c e8       	ldi	r24, 0x8C	; 140
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_displayString>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	aa ef       	ldi	r26, 0xFA	; 250
     ec0:	b4 e4       	ldi	r27, 0x44	; 68
     ec2:	8b 87       	std	Y+11, r24	; 0x0b
     ec4:	9c 87       	std	Y+12, r25	; 0x0c
     ec6:	ad 87       	std	Y+13, r26	; 0x0d
     ec8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eca:	6b 85       	ldd	r22, Y+11	; 0x0b
     ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
     ece:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	4a ef       	ldi	r20, 0xFA	; 250
     ed8:	54 e4       	ldi	r21, 0x44	; 68
     eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	8f 83       	std	Y+7, r24	; 0x07
     ee4:	98 87       	std	Y+8, r25	; 0x08
     ee6:	a9 87       	std	Y+9, r26	; 0x09
     ee8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eea:	6f 81       	ldd	r22, Y+7	; 0x07
     eec:	78 85       	ldd	r23, Y+8	; 0x08
     eee:	89 85       	ldd	r24, Y+9	; 0x09
     ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e8       	ldi	r20, 0x80	; 128
     ef8:	5f e3       	ldi	r21, 0x3F	; 63
     efa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     efe:	88 23       	and	r24, r24
     f00:	2c f4       	brge	.+10     	; 0xf0c <what_is_the_state+0xb8>
		__ticks = 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	9e 83       	std	Y+6, r25	; 0x06
     f08:	8d 83       	std	Y+5, r24	; 0x05
     f0a:	3f c0       	rjmp	.+126    	; 0xf8a <what_is_the_state+0x136>
	else if (__tmp > 65535)
     f0c:	6f 81       	ldd	r22, Y+7	; 0x07
     f0e:	78 85       	ldd	r23, Y+8	; 0x08
     f10:	89 85       	ldd	r24, Y+9	; 0x09
     f12:	9a 85       	ldd	r25, Y+10	; 0x0a
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	3f ef       	ldi	r19, 0xFF	; 255
     f18:	4f e7       	ldi	r20, 0x7F	; 127
     f1a:	57 e4       	ldi	r21, 0x47	; 71
     f1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f20:	18 16       	cp	r1, r24
     f22:	4c f5       	brge	.+82     	; 0xf76 <what_is_the_state+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f24:	6b 85       	ldd	r22, Y+11	; 0x0b
     f26:	7c 85       	ldd	r23, Y+12	; 0x0c
     f28:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e2       	ldi	r20, 0x20	; 32
     f32:	51 e4       	ldi	r21, 0x41	; 65
     f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	bc 01       	movw	r22, r24
     f3e:	cd 01       	movw	r24, r26
     f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	9e 83       	std	Y+6, r25	; 0x06
     f4a:	8d 83       	std	Y+5, r24	; 0x05
     f4c:	0f c0       	rjmp	.+30     	; 0xf6c <what_is_the_state+0x118>
     f4e:	88 ec       	ldi	r24, 0xC8	; 200
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	8b 83       	std	Y+3, r24	; 0x03
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <what_is_the_state+0x106>
     f5e:	9c 83       	std	Y+4, r25	; 0x04
     f60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	9e 83       	std	Y+6, r25	; 0x06
     f6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6c:	8d 81       	ldd	r24, Y+5	; 0x05
     f6e:	9e 81       	ldd	r25, Y+6	; 0x06
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	69 f7       	brne	.-38     	; 0xf4e <what_is_the_state+0xfa>
     f74:	14 c0       	rjmp	.+40     	; 0xf9e <what_is_the_state+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f76:	6f 81       	ldd	r22, Y+7	; 0x07
     f78:	78 85       	ldd	r23, Y+8	; 0x08
     f7a:	89 85       	ldd	r24, Y+9	; 0x09
     f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	9e 83       	std	Y+6, r25	; 0x06
     f88:	8d 83       	std	Y+5, r24	; 0x05
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	9a 81       	ldd	r25, Y+2	; 0x02
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	f1 f7       	brne	.-4      	; 0xf96 <what_is_the_state+0x142>
     f9a:	9a 83       	std	Y+2, r25	; 0x02
     f9c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		state = display_enter_lcd_first_time();
     f9e:	0e 94 11 06 	call	0xc22	; 0xc22 <display_enter_lcd_first_time>
     fa2:	88 8b       	std	Y+16, r24	; 0x10
		what_is_the_state(state);
     fa4:	88 89       	ldd	r24, Y+16	; 0x10
     fa6:	0e 94 2a 07 	call	0xe54	; 0xe54 <what_is_the_state>
	}
}
     faa:	60 96       	adiw	r28, 0x10	; 16
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	f8 94       	cli
     fb0:	de bf       	out	0x3e, r29	; 62
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	cd bf       	out	0x3d, r28	; 61
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <enter_option>:

uint8 enter_option(void)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	2f 97       	sbiw	r28, 0x0f	; 15
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
	uint8 option;
	LCD_clearScreen();
     fd0:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+ : Open Door");
     fd4:	2b e9       	ldi	r18, 0x9B	; 155
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	a9 01       	movw	r20, r18
     fde:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
     fe2:	29 ea       	ldi	r18, 0xA9	; 169
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	a9 01       	movw	r20, r18
     fec:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>

	option = KEYPAD_getPressedKey();
     ff0:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <KEYPAD_getPressedKey>
     ff4:	8f 87       	std	Y+15, r24	; 0x0f
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	af ea       	ldi	r26, 0xAF	; 175
     ffc:	b3 e4       	ldi	r27, 0x43	; 67
     ffe:	8b 87       	std	Y+11, r24	; 0x0b
    1000:	9c 87       	std	Y+12, r25	; 0x0c
    1002:	ad 87       	std	Y+13, r26	; 0x0d
    1004:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1006:	6b 85       	ldd	r22, Y+11	; 0x0b
    1008:	7c 85       	ldd	r23, Y+12	; 0x0c
    100a:	8d 85       	ldd	r24, Y+13	; 0x0d
    100c:	9e 85       	ldd	r25, Y+14	; 0x0e
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	4a ef       	ldi	r20, 0xFA	; 250
    1014:	54 e4       	ldi	r21, 0x44	; 68
    1016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	8f 83       	std	Y+7, r24	; 0x07
    1020:	98 87       	std	Y+8, r25	; 0x08
    1022:	a9 87       	std	Y+9, r26	; 0x09
    1024:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1026:	6f 81       	ldd	r22, Y+7	; 0x07
    1028:	78 85       	ldd	r23, Y+8	; 0x08
    102a:	89 85       	ldd	r24, Y+9	; 0x09
    102c:	9a 85       	ldd	r25, Y+10	; 0x0a
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 e8       	ldi	r20, 0x80	; 128
    1034:	5f e3       	ldi	r21, 0x3F	; 63
    1036:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    103a:	88 23       	and	r24, r24
    103c:	2c f4       	brge	.+10     	; 0x1048 <enter_option+0x8c>
		__ticks = 1;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9e 83       	std	Y+6, r25	; 0x06
    1044:	8d 83       	std	Y+5, r24	; 0x05
    1046:	3f c0       	rjmp	.+126    	; 0x10c6 <enter_option+0x10a>
	else if (__tmp > 65535)
    1048:	6f 81       	ldd	r22, Y+7	; 0x07
    104a:	78 85       	ldd	r23, Y+8	; 0x08
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	3f ef       	ldi	r19, 0xFF	; 255
    1054:	4f e7       	ldi	r20, 0x7F	; 127
    1056:	57 e4       	ldi	r21, 0x47	; 71
    1058:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    105c:	18 16       	cp	r1, r24
    105e:	4c f5       	brge	.+82     	; 0x10b2 <enter_option+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1060:	6b 85       	ldd	r22, Y+11	; 0x0b
    1062:	7c 85       	ldd	r23, Y+12	; 0x0c
    1064:	8d 85       	ldd	r24, Y+13	; 0x0d
    1066:	9e 85       	ldd	r25, Y+14	; 0x0e
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	40 e2       	ldi	r20, 0x20	; 32
    106e:	51 e4       	ldi	r21, 0x41	; 65
    1070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1080:	dc 01       	movw	r26, r24
    1082:	cb 01       	movw	r24, r22
    1084:	9e 83       	std	Y+6, r25	; 0x06
    1086:	8d 83       	std	Y+5, r24	; 0x05
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <enter_option+0xec>
    108a:	88 ec       	ldi	r24, 0xC8	; 200
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9c 83       	std	Y+4, r25	; 0x04
    1090:	8b 83       	std	Y+3, r24	; 0x03
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	9c 81       	ldd	r25, Y+4	; 0x04
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <enter_option+0xda>
    109a:	9c 83       	std	Y+4, r25	; 0x04
    109c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	9e 81       	ldd	r25, Y+6	; 0x06
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	9e 83       	std	Y+6, r25	; 0x06
    10a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a8:	8d 81       	ldd	r24, Y+5	; 0x05
    10aa:	9e 81       	ldd	r25, Y+6	; 0x06
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	69 f7       	brne	.-38     	; 0x108a <enter_option+0xce>
    10b0:	14 c0       	rjmp	.+40     	; 0x10da <enter_option+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b2:	6f 81       	ldd	r22, Y+7	; 0x07
    10b4:	78 85       	ldd	r23, Y+8	; 0x08
    10b6:	89 85       	ldd	r24, Y+9	; 0x09
    10b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	9e 83       	std	Y+6, r25	; 0x06
    10c4:	8d 83       	std	Y+5, r24	; 0x05
    10c6:	8d 81       	ldd	r24, Y+5	; 0x05
    10c8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	f1 f7       	brne	.-4      	; 0x10d2 <enter_option+0x116>
    10d6:	9a 83       	std	Y+2, r25	; 0x02
    10d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(350);

	return option;
    10da:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    10dc:	2f 96       	adiw	r28, 0x0f	; 15
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	08 95       	ret

000010ee <option_one>:

void option_one (void)
{
    10ee:	df 93       	push	r29
    10f0:	cf 93       	push	r28
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	65 97       	sbiw	r28, 0x15	; 21
    10f8:	0f b6       	in	r0, 0x3f	; 63
    10fa:	f8 94       	cli
    10fc:	de bf       	out	0x3e, r29	; 62
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	cd bf       	out	0x3d, r28	; 61
	uint8 j, isitcorrect = 0;
    1102:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 check_pass_eeprom[no_of_Password];
	static uint8 wrong_entery=0;

	LCD_clearScreen();
    1104:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter Pass:");
    1108:	20 e6       	ldi	r18, 0x60	; 96
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	a9 01       	movw	r20, r18
    1112:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
	LCD_moveCursor(1, 0);
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <LCD_moveCursor>
	enter_password(check_pass_eeprom);
    111e:	ce 01       	movw	r24, r28
    1120:	41 96       	adiw	r24, 0x11	; 17
    1122:	0e 94 82 06 	call	0xd04	; 0xd04 <enter_password>


	while (UART_recieveByte() != SEND_PASSWORD);
    1126:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
    112a:	82 31       	cpi	r24, 0x12	; 18
    112c:	e1 f7       	brne	.-8      	; 0x1126 <option_one+0x38>



	for(j=0; j < no_of_Password ;j++)
    112e:	18 8a       	std	Y+16, r1	; 0x10
    1130:	0e c0       	rjmp	.+28     	; 0x114e <option_one+0x60>
	{
		UART_sendByte(check_pass_eeprom[j]);
    1132:	88 89       	ldd	r24, Y+16	; 0x10
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	ce 01       	movw	r24, r28
    113a:	41 96       	adiw	r24, 0x11	; 17
    113c:	fc 01       	movw	r30, r24
    113e:	e2 0f       	add	r30, r18
    1140:	f3 1f       	adc	r31, r19
    1142:	80 81       	ld	r24, Z
    1144:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_sendByte>

	while (UART_recieveByte() != SEND_PASSWORD);



	for(j=0; j < no_of_Password ;j++)
    1148:	88 89       	ldd	r24, Y+16	; 0x10
    114a:	8f 5f       	subi	r24, 0xFF	; 255
    114c:	88 8b       	std	Y+16, r24	; 0x10
    114e:	88 89       	ldd	r24, Y+16	; 0x10
    1150:	85 30       	cpi	r24, 0x05	; 5
    1152:	78 f3       	brcs	.-34     	; 0x1132 <option_one+0x44>
	{
		UART_sendByte(check_pass_eeprom[j]);
	}

	UART_sendByte(SEND_PASSWORD);
    1154:	82 e1       	ldi	r24, 0x12	; 18
    1156:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_sendByte>

	isitcorrect = UART_recieveByte();
    115a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
    115e:	8f 87       	std	Y+15, r24	; 0x0f

	if(isitcorrect == correct_password)
    1160:	8f 85       	ldd	r24, Y+15	; 0x0f
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	09 f0       	breq	.+2      	; 0x1168 <option_one+0x7a>
    1166:	46 c0       	rjmp	.+140    	; 0x11f4 <option_one+0x106>
	{
		wrong_entery= 0;
    1168:	10 92 58 01 	sts	0x0158, r1

		LCD_clearScreen();
    116c:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
		g_secondsCount=0;
    1170:	10 92 57 01 	sts	0x0157, r1
    1174:	10 92 56 01 	sts	0x0156, r1

		while(UART_recieveByte()!=ECU_READY){}
    1178:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
    117c:	81 31       	cpi	r24, 0x11	; 17
    117e:	e1 f7       	brne	.-8      	; 0x1178 <option_one+0x8a>

		LCD_displayStringRowColumn(0,0,"Door is Unlocking");
    1180:	29 eb       	ldi	r18, 0xB9	; 185
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	a9 01       	movw	r20, r18
    118a:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
		while(g_secondsCount < 15);
    118e:	80 91 56 01 	lds	r24, 0x0156
    1192:	90 91 57 01 	lds	r25, 0x0157
    1196:	8f 30       	cpi	r24, 0x0F	; 15
    1198:	91 05       	cpc	r25, r1
    119a:	c8 f3       	brcs	.-14     	; 0x118e <option_one+0xa0>

		while(UART_recieveByte()!=ECU_READY);
    119c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
    11a0:	81 31       	cpi	r24, 0x11	; 17
    11a2:	e1 f7       	brne	.-8      	; 0x119c <option_one+0xae>

		LCD_clearScreen();
    11a4:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Enter Quickly");
    11a8:	2b ec       	ldi	r18, 0xCB	; 203
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
		while(g_secondsCount < 18);
    11b6:	80 91 56 01 	lds	r24, 0x0156
    11ba:	90 91 57 01 	lds	r25, 0x0157
    11be:	82 31       	cpi	r24, 0x12	; 18
    11c0:	91 05       	cpc	r25, r1
    11c2:	c8 f3       	brcs	.-14     	; 0x11b6 <option_one+0xc8>

		while(UART_recieveByte()!=ECU_READY){}
    11c4:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
    11c8:	81 31       	cpi	r24, 0x11	; 17
    11ca:	e1 f7       	brne	.-8      	; 0x11c4 <option_one+0xd6>

		LCD_clearScreen();
    11cc:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Door is locking");
    11d0:	29 ed       	ldi	r18, 0xD9	; 217
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	a9 01       	movw	r20, r18
    11da:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
		while(g_secondsCount < 33);
    11de:	80 91 56 01 	lds	r24, 0x0156
    11e2:	90 91 57 01 	lds	r25, 0x0157
    11e6:	81 32       	cpi	r24, 0x21	; 33
    11e8:	91 05       	cpc	r25, r1
    11ea:	c8 f3       	brcs	.-14     	; 0x11de <option_one+0xf0>
		what_is_the_state(correct_password);
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	0e 94 2a 07 	call	0xe54	; 0xe54 <what_is_the_state>
    11f2:	c6 c0       	rjmp	.+396    	; 0x1380 <option_one+0x292>
	}

	else if (isitcorrect == wrong_password)
    11f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f6:	88 23       	and	r24, r24
    11f8:	09 f0       	breq	.+2      	; 0x11fc <option_one+0x10e>
    11fa:	c2 c0       	rjmp	.+388    	; 0x1380 <option_one+0x292>
	{
		if (wrong_entery == max_wrong_pass)
    11fc:	80 91 58 01 	lds	r24, 0x0158
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	01 f5       	brne	.+64     	; 0x1244 <option_one+0x156>
		{
			g_secondsCount=0;
    1204:	10 92 57 01 	sts	0x0157, r1
    1208:	10 92 56 01 	sts	0x0156, r1
			wrong_entery=0;
    120c:	10 92 58 01 	sts	0x0158, r1
			LCD_clearScreen();
    1210:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"pass wrong for 3 times");
    1214:	29 ee       	ldi	r18, 0xE9	; 233
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	a9 01       	movw	r20, r18
    121e:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"wait 1 minute");
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	31 e0       	ldi	r19, 0x01	; 1
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	a9 01       	movw	r20, r18
    122c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
			while(g_secondsCount<60);
    1230:	80 91 56 01 	lds	r24, 0x0156
    1234:	90 91 57 01 	lds	r25, 0x0157
    1238:	8c 33       	cpi	r24, 0x3C	; 60
    123a:	91 05       	cpc	r25, r1
    123c:	c8 f3       	brcs	.-14     	; 0x1230 <option_one+0x142>
			what_is_the_state(correct_password);
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	0e 94 2a 07 	call	0xe54	; 0xe54 <what_is_the_state>
		}
		wrong_entery++;
    1244:	80 91 58 01 	lds	r24, 0x0158
    1248:	8f 5f       	subi	r24, 0xFF	; 255
    124a:	80 93 58 01 	sts	0x0158, r24

		LCD_clearScreen();
    124e:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"wrong pass you");
    1252:	2e e0       	ldi	r18, 0x0E	; 14
    1254:	31 e0       	ldi	r19, 0x01	; 1
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	60 e0       	ldi	r22, 0x00	; 0
    125a:	a9 01       	movw	r20, r18
    125c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"have more");
    1260:	2d e1       	ldi	r18, 0x1D	; 29
    1262:	31 e0       	ldi	r19, 0x01	; 1
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	a9 01       	movw	r20, r18
    126a:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 10);
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	6a e0       	ldi	r22, 0x0A	; 10
    1272:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <LCD_moveCursor>
		LCD_intgerToString( (max_wrong_pass+1) - wrong_entery);
    1276:	80 91 58 01 	lds	r24, 0x0158
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	82 1b       	sub	r24, r18
    1284:	93 0b       	sbc	r25, r19
    1286:	0e 94 bc 1a 	call	0x3578	; 0x3578 <LCD_intgerToString>
		LCD_displayStringRowColumn(1,12,"try");
    128a:	27 e2       	ldi	r18, 0x27	; 39
    128c:	31 e0       	ldi	r19, 0x01	; 1
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	6c e0       	ldi	r22, 0x0C	; 12
    1292:	a9 01       	movw	r20, r18
    1294:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	aa ef       	ldi	r26, 0xFA	; 250
    129e:	b4 e4       	ldi	r27, 0x44	; 68
    12a0:	8b 87       	std	Y+11, r24	; 0x0b
    12a2:	9c 87       	std	Y+12, r25	; 0x0c
    12a4:	ad 87       	std	Y+13, r26	; 0x0d
    12a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a ef       	ldi	r20, 0xFA	; 250
    12b6:	54 e4       	ldi	r21, 0x44	; 68
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8f 83       	std	Y+7, r24	; 0x07
    12c2:	98 87       	std	Y+8, r25	; 0x08
    12c4:	a9 87       	std	Y+9, r26	; 0x09
    12c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ca:	78 85       	ldd	r23, Y+8	; 0x08
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e8       	ldi	r20, 0x80	; 128
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12dc:	88 23       	and	r24, r24
    12de:	2c f4       	brge	.+10     	; 0x12ea <option_one+0x1fc>
		__ticks = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	3f c0       	rjmp	.+126    	; 0x1368 <option_one+0x27a>
	else if (__tmp > 65535)
    12ea:	6f 81       	ldd	r22, Y+7	; 0x07
    12ec:	78 85       	ldd	r23, Y+8	; 0x08
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	4f e7       	ldi	r20, 0x7F	; 127
    12f8:	57 e4       	ldi	r21, 0x47	; 71
    12fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	4c f5       	brge	.+82     	; 0x1354 <option_one+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1302:	6b 85       	ldd	r22, Y+11	; 0x0b
    1304:	7c 85       	ldd	r23, Y+12	; 0x0c
    1306:	8d 85       	ldd	r24, Y+13	; 0x0d
    1308:	9e 85       	ldd	r25, Y+14	; 0x0e
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	0f c0       	rjmp	.+30     	; 0x134a <option_one+0x25c>
    132c:	88 ec       	ldi	r24, 0xC8	; 200
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <option_one+0x24a>
    133c:	9c 83       	std	Y+4, r25	; 0x04
    133e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	69 f7       	brne	.-38     	; 0x132c <option_one+0x23e>
    1352:	14 c0       	rjmp	.+40     	; 0x137c <option_one+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1354:	6f 81       	ldd	r22, Y+7	; 0x07
    1356:	78 85       	ldd	r23, Y+8	; 0x08
    1358:	89 85       	ldd	r24, Y+9	; 0x09
    135a:	9a 85       	ldd	r25, Y+10	; 0x0a
    135c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <option_one+0x286>
    1378:	9a 83       	std	Y+2, r25	; 0x02
    137a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);

		option_one();
    137c:	0e 94 77 08 	call	0x10ee	; 0x10ee <option_one>
	}
}
    1380:	65 96       	adiw	r28, 0x15	; 21
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <option_two>:

void option_two(void)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	66 97       	sbiw	r28, 0x16	; 22
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	de bf       	out	0x3e, r29	; 62
    13a2:	0f be       	out	0x3f, r0	; 63
    13a4:	cd bf       	out	0x3d, r28	; 61
	uint8 state,j ,isitcorrect = 0;
    13a6:	1f 86       	std	Y+15, r1	; 0x0f
	uint8 check_pass_eeprom[no_of_Password];
	static uint8 wrong_entery=0;

	LCD_clearScreen();
    13a8:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz Enter old ");
    13ac:	2b e2       	ldi	r18, 0x2B	; 43
    13ae:	31 e0       	ldi	r19, 0x01	; 1
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Pass:");
    13ba:	2a e3       	ldi	r18, 0x3A	; 58
    13bc:	31 e0       	ldi	r19, 0x01	; 1
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	a9 01       	movw	r20, r18
    13c4:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>

	LCD_moveCursor(1, 6);
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	66 e0       	ldi	r22, 0x06	; 6
    13cc:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <LCD_moveCursor>
	enter_password(check_pass_eeprom);
    13d0:	ce 01       	movw	r24, r28
    13d2:	42 96       	adiw	r24, 0x12	; 18
    13d4:	0e 94 82 06 	call	0xd04	; 0xd04 <enter_password>



	while (UART_recieveByte() != SEND_PASSWORD);
    13d8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
    13dc:	82 31       	cpi	r24, 0x12	; 18
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <option_two+0x46>

	for(j=0; j < no_of_Password ;j++)
    13e0:	18 8a       	std	Y+16, r1	; 0x10
    13e2:	0e c0       	rjmp	.+28     	; 0x1400 <option_two+0x6e>
	{
		UART_sendByte(check_pass_eeprom[j]);
    13e4:	88 89       	ldd	r24, Y+16	; 0x10
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	ce 01       	movw	r24, r28
    13ec:	42 96       	adiw	r24, 0x12	; 18
    13ee:	fc 01       	movw	r30, r24
    13f0:	e2 0f       	add	r30, r18
    13f2:	f3 1f       	adc	r31, r19
    13f4:	80 81       	ld	r24, Z
    13f6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_sendByte>



	while (UART_recieveByte() != SEND_PASSWORD);

	for(j=0; j < no_of_Password ;j++)
    13fa:	88 89       	ldd	r24, Y+16	; 0x10
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	88 8b       	std	Y+16, r24	; 0x10
    1400:	88 89       	ldd	r24, Y+16	; 0x10
    1402:	85 30       	cpi	r24, 0x05	; 5
    1404:	78 f3       	brcs	.-34     	; 0x13e4 <option_two+0x52>
	{
		UART_sendByte(check_pass_eeprom[j]);
	}

	UART_sendByte(SEND_PASSWORD);
    1406:	82 e1       	ldi	r24, 0x12	; 18
    1408:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_sendByte>

	isitcorrect = UART_recieveByte();
    140c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
    1410:	8f 87       	std	Y+15, r24	; 0x0f


	if(isitcorrect == correct_password)
    1412:	8f 85       	ldd	r24, Y+15	; 0x0f
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	49 f4       	brne	.+18     	; 0x142a <option_two+0x98>
	{
		wrong_entery= 0;
    1418:	10 92 59 01 	sts	0x0159, r1

		state = display_enter_lcd_first_time();
    141c:	0e 94 11 06 	call	0xc22	; 0xc22 <display_enter_lcd_first_time>
    1420:	89 8b       	std	Y+17, r24	; 0x11
		what_is_the_state(state);
    1422:	89 89       	ldd	r24, Y+17	; 0x11
    1424:	0e 94 2a 07 	call	0xe54	; 0xe54 <what_is_the_state>
    1428:	c2 c0       	rjmp	.+388    	; 0x15ae <option_two+0x21c>
	}

	else
	{
		if (wrong_entery == max_wrong_pass)
    142a:	80 91 59 01 	lds	r24, 0x0159
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	01 f5       	brne	.+64     	; 0x1472 <option_two+0xe0>
		{
			g_secondsCount=0;
    1432:	10 92 57 01 	sts	0x0157, r1
    1436:	10 92 56 01 	sts	0x0156, r1
			wrong_entery=0;
    143a:	10 92 59 01 	sts	0x0159, r1
			LCD_clearScreen();
    143e:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"pass wrong for 3 times");
    1442:	29 ee       	ldi	r18, 0xE9	; 233
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	a9 01       	movw	r20, r18
    144c:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"wait 1 minute");
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	31 e0       	ldi	r19, 0x01	; 1
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
			while(g_secondsCount < 60);
    145e:	80 91 56 01 	lds	r24, 0x0156
    1462:	90 91 57 01 	lds	r25, 0x0157
    1466:	8c 33       	cpi	r24, 0x3C	; 60
    1468:	91 05       	cpc	r25, r1
    146a:	c8 f3       	brcs	.-14     	; 0x145e <option_two+0xcc>

			what_is_the_state(correct_password);
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	0e 94 2a 07 	call	0xe54	; 0xe54 <what_is_the_state>
		}
		wrong_entery++;
    1472:	80 91 59 01 	lds	r24, 0x0159
    1476:	8f 5f       	subi	r24, 0xFF	; 255
    1478:	80 93 59 01 	sts	0x0159, r24

		LCD_clearScreen();
    147c:	0e 94 df 1a 	call	0x35be	; 0x35be <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"wrong pass you");
    1480:	2e e0       	ldi	r18, 0x0E	; 14
    1482:	31 e0       	ldi	r19, 0x01	; 1
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"have more");
    148e:	2d e1       	ldi	r18, 0x1D	; 29
    1490:	31 e0       	ldi	r19, 0x01	; 1
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	a9 01       	movw	r20, r18
    1498:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 10);
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	6a e0       	ldi	r22, 0x0A	; 10
    14a0:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <LCD_moveCursor>
		LCD_intgerToString( (max_wrong_pass +1) - wrong_entery);
    14a4:	80 91 59 01 	lds	r24, 0x0159
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	83 e0       	ldi	r24, 0x03	; 3
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	82 1b       	sub	r24, r18
    14b2:	93 0b       	sbc	r25, r19
    14b4:	0e 94 bc 1a 	call	0x3578	; 0x3578 <LCD_intgerToString>
		LCD_displayStringRowColumn(1,12,"try");
    14b8:	27 e2       	ldi	r18, 0x27	; 39
    14ba:	31 e0       	ldi	r19, 0x01	; 1
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	6c e0       	ldi	r22, 0x0C	; 12
    14c0:	a9 01       	movw	r20, r18
    14c2:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_displayStringRowColumn>
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	aa ef       	ldi	r26, 0xFA	; 250
    14cc:	b4 e4       	ldi	r27, 0x44	; 68
    14ce:	8b 87       	std	Y+11, r24	; 0x0b
    14d0:	9c 87       	std	Y+12, r25	; 0x0c
    14d2:	ad 87       	std	Y+13, r26	; 0x0d
    14d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14da:	8d 85       	ldd	r24, Y+13	; 0x0d
    14dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	4a ef       	ldi	r20, 0xFA	; 250
    14e4:	54 e4       	ldi	r21, 0x44	; 68
    14e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	8f 83       	std	Y+7, r24	; 0x07
    14f0:	98 87       	std	Y+8, r25	; 0x08
    14f2:	a9 87       	std	Y+9, r26	; 0x09
    14f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14f6:	6f 81       	ldd	r22, Y+7	; 0x07
    14f8:	78 85       	ldd	r23, Y+8	; 0x08
    14fa:	89 85       	ldd	r24, Y+9	; 0x09
    14fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	40 e8       	ldi	r20, 0x80	; 128
    1504:	5f e3       	ldi	r21, 0x3F	; 63
    1506:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    150a:	88 23       	and	r24, r24
    150c:	2c f4       	brge	.+10     	; 0x1518 <option_two+0x186>
		__ticks = 1;
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9e 83       	std	Y+6, r25	; 0x06
    1514:	8d 83       	std	Y+5, r24	; 0x05
    1516:	3f c0       	rjmp	.+126    	; 0x1596 <option_two+0x204>
	else if (__tmp > 65535)
    1518:	6f 81       	ldd	r22, Y+7	; 0x07
    151a:	78 85       	ldd	r23, Y+8	; 0x08
    151c:	89 85       	ldd	r24, Y+9	; 0x09
    151e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	3f ef       	ldi	r19, 0xFF	; 255
    1524:	4f e7       	ldi	r20, 0x7F	; 127
    1526:	57 e4       	ldi	r21, 0x47	; 71
    1528:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    152c:	18 16       	cp	r1, r24
    152e:	4c f5       	brge	.+82     	; 0x1582 <option_two+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1530:	6b 85       	ldd	r22, Y+11	; 0x0b
    1532:	7c 85       	ldd	r23, Y+12	; 0x0c
    1534:	8d 85       	ldd	r24, Y+13	; 0x0d
    1536:	9e 85       	ldd	r25, Y+14	; 0x0e
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e2       	ldi	r20, 0x20	; 32
    153e:	51 e4       	ldi	r21, 0x41	; 65
    1540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	bc 01       	movw	r22, r24
    154a:	cd 01       	movw	r24, r26
    154c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	8d 83       	std	Y+5, r24	; 0x05
    1558:	0f c0       	rjmp	.+30     	; 0x1578 <option_two+0x1e6>
    155a:	88 ec       	ldi	r24, 0xC8	; 200
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <option_two+0x1d4>
    156a:	9c 83       	std	Y+4, r25	; 0x04
    156c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	9e 81       	ldd	r25, Y+6	; 0x06
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1578:	8d 81       	ldd	r24, Y+5	; 0x05
    157a:	9e 81       	ldd	r25, Y+6	; 0x06
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	69 f7       	brne	.-38     	; 0x155a <option_two+0x1c8>
    1580:	14 c0       	rjmp	.+40     	; 0x15aa <option_two+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1582:	6f 81       	ldd	r22, Y+7	; 0x07
    1584:	78 85       	ldd	r23, Y+8	; 0x08
    1586:	89 85       	ldd	r24, Y+9	; 0x09
    1588:	9a 85       	ldd	r25, Y+10	; 0x0a
    158a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	9e 83       	std	Y+6, r25	; 0x06
    1594:	8d 83       	std	Y+5, r24	; 0x05
    1596:	8d 81       	ldd	r24, Y+5	; 0x05
    1598:	9e 81       	ldd	r25, Y+6	; 0x06
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	9a 81       	ldd	r25, Y+2	; 0x02
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	f1 f7       	brne	.-4      	; 0x15a2 <option_two+0x210>
    15a6:	9a 83       	std	Y+2, r25	; 0x02
    15a8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);

		option_two();
    15aa:	0e 94 c9 09 	call	0x1392	; 0x1392 <option_two>
	}
}
    15ae:	66 96       	adiw	r28, 0x16	; 22
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <timer1_HMI_CallBack>:

void timer1_HMI_CallBack(void)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	/* Increment the seconds counter */
	g_secondsCount++;
    15c8:	80 91 56 01 	lds	r24, 0x0156
    15cc:	90 91 57 01 	lds	r25, 0x0157
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	90 93 57 01 	sts	0x0157, r25
    15d6:	80 93 56 01 	sts	0x0156, r24
}
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <__vector_9>:
#include <avr/io.h>

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_OVF_vect)
{
    15e0:	1f 92       	push	r1
    15e2:	0f 92       	push	r0
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	0f 92       	push	r0
    15e8:	11 24       	eor	r1, r1
    15ea:	2f 93       	push	r18
    15ec:	3f 93       	push	r19
    15ee:	4f 93       	push	r20
    15f0:	5f 93       	push	r21
    15f2:	6f 93       	push	r22
    15f4:	7f 93       	push	r23
    15f6:	8f 93       	push	r24
    15f8:	9f 93       	push	r25
    15fa:	af 93       	push	r26
    15fc:	bf 93       	push	r27
    15fe:	ef 93       	push	r30
    1600:	ff 93       	push	r31
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
	if( g_callBackPtr != NULL_PTR)
    160a:	80 91 5a 01 	lds	r24, 0x015A
    160e:	90 91 5b 01 	lds	r25, 0x015B
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	29 f0       	breq	.+10     	; 0x1620 <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    1616:	e0 91 5a 01 	lds	r30, 0x015A
    161a:	f0 91 5b 01 	lds	r31, 0x015B
    161e:	09 95       	icall
	}
}
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	ff 91       	pop	r31
    1626:	ef 91       	pop	r30
    1628:	bf 91       	pop	r27
    162a:	af 91       	pop	r26
    162c:	9f 91       	pop	r25
    162e:	8f 91       	pop	r24
    1630:	7f 91       	pop	r23
    1632:	6f 91       	pop	r22
    1634:	5f 91       	pop	r21
    1636:	4f 91       	pop	r20
    1638:	3f 91       	pop	r19
    163a:	2f 91       	pop	r18
    163c:	0f 90       	pop	r0
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	0f 90       	pop	r0
    1642:	1f 90       	pop	r1
    1644:	18 95       	reti

00001646 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1646:	1f 92       	push	r1
    1648:	0f 92       	push	r0
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	0f 92       	push	r0
    164e:	11 24       	eor	r1, r1
    1650:	2f 93       	push	r18
    1652:	3f 93       	push	r19
    1654:	4f 93       	push	r20
    1656:	5f 93       	push	r21
    1658:	6f 93       	push	r22
    165a:	7f 93       	push	r23
    165c:	8f 93       	push	r24
    165e:	9f 93       	push	r25
    1660:	af 93       	push	r26
    1662:	bf 93       	push	r27
    1664:	ef 93       	push	r30
    1666:	ff 93       	push	r31
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1670:	80 91 5a 01 	lds	r24, 0x015A
    1674:	90 91 5b 01 	lds	r25, 0x015B
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	29 f0       	breq	.+10     	; 0x1686 <__vector_7+0x40>
	{
		(*g_callBackPtr)();
    167c:	e0 91 5a 01 	lds	r30, 0x015A
    1680:	f0 91 5b 01 	lds	r31, 0x015B
    1684:	09 95       	icall
	}

}
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	ff 91       	pop	r31
    168c:	ef 91       	pop	r30
    168e:	bf 91       	pop	r27
    1690:	af 91       	pop	r26
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	7f 91       	pop	r23
    1698:	6f 91       	pop	r22
    169a:	5f 91       	pop	r21
    169c:	4f 91       	pop	r20
    169e:	3f 91       	pop	r19
    16a0:	2f 91       	pop	r18
    16a2:	0f 90       	pop	r0
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	0f 90       	pop	r0
    16a8:	1f 90       	pop	r1
    16aa:	18 95       	reti

000016ac <PWM_Timer0_Start>:


void PWM_Timer0_Start (uint8 duty_cycle)
{
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	0f 92       	push	r0
    16b2:	cd b7       	in	r28, 0x3d	; 61
    16b4:	de b7       	in	r29, 0x3e	; 62
    16b6:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0;
    16b8:	e2 e5       	ldi	r30, 0x52	; 82
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	10 82       	st	Z, r1

	if (duty_cycle == 25)
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	89 31       	cpi	r24, 0x19	; 25
    16c2:	29 f4       	brne	.+10     	; 0x16ce <PWM_Timer0_Start+0x22>
	{
		OCR0 = 63;
    16c4:	ec e5       	ldi	r30, 0x5C	; 92
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8f e3       	ldi	r24, 0x3F	; 63
    16ca:	80 83       	st	Z, r24
    16cc:	17 c0       	rjmp	.+46     	; 0x16fc <PWM_Timer0_Start+0x50>
	}
	else if (duty_cycle == 50)
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	82 33       	cpi	r24, 0x32	; 50
    16d2:	29 f4       	brne	.+10     	; 0x16de <PWM_Timer0_Start+0x32>
	{
		OCR0 = 127 ;
    16d4:	ec e5       	ldi	r30, 0x5C	; 92
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	8f e7       	ldi	r24, 0x7F	; 127
    16da:	80 83       	st	Z, r24
    16dc:	0f c0       	rjmp	.+30     	; 0x16fc <PWM_Timer0_Start+0x50>
	}
	else if (duty_cycle == 75)
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	8b 34       	cpi	r24, 0x4B	; 75
    16e2:	29 f4       	brne	.+10     	; 0x16ee <PWM_Timer0_Start+0x42>
	{
		OCR0 = 191;
    16e4:	ec e5       	ldi	r30, 0x5C	; 92
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	8f eb       	ldi	r24, 0xBF	; 191
    16ea:	80 83       	st	Z, r24
    16ec:	07 c0       	rjmp	.+14     	; 0x16fc <PWM_Timer0_Start+0x50>
	}
	else if (duty_cycle == 100)
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	84 36       	cpi	r24, 0x64	; 100
    16f2:	21 f4       	brne	.+8      	; 0x16fc <PWM_Timer0_Start+0x50>
	{
		OCR0  = 255;
    16f4:	ec e5       	ldi	r30, 0x5C	; 92
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	8f ef       	ldi	r24, 0xFF	; 255
    16fa:	80 83       	st	Z, r24
	}
	DDRB  |= (1<<PB3);
    16fc:	a7 e3       	ldi	r26, 0x37	; 55
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e7 e3       	ldi	r30, 0x37	; 55
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	88 60       	ori	r24, 0x08	; 8
    1708:	8c 93       	st	X, r24

	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    170a:	e3 e5       	ldi	r30, 0x53	; 83
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	8a e6       	ldi	r24, 0x6A	; 106
    1710:	80 83       	st	Z, r24
}
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <Timer1_init+0x6>
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr-> initial_value;
    1728:	ac e4       	ldi	r26, 0x4C	; 76
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	e9 81       	ldd	r30, Y+1	; 0x01
    172e:	fa 81       	ldd	r31, Y+2	; 0x02
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	11 96       	adiw	r26, 0x01	; 1
    1736:	9c 93       	st	X, r25
    1738:	8e 93       	st	-X, r24

	if ( Config_Ptr-> mode == normal)
    173a:	e9 81       	ldd	r30, Y+1	; 0x01
    173c:	fa 81       	ldd	r31, Y+2	; 0x02
    173e:	85 81       	ldd	r24, Z+5	; 0x05
    1740:	88 23       	and	r24, r24
    1742:	11 f5       	brne	.+68     	; 0x1788 <Timer1_init+0x6e>
	{
		TCCR1A |= (1<<FOC1A); /* Compare unit A */
    1744:	af e4       	ldi	r26, 0x4F	; 79
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	ef e4       	ldi	r30, 0x4F	; 79
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	88 60       	ori	r24, 0x08	; 8
    1750:	8c 93       	st	X, r24
		TCCR1B &= ~(1<<WGM12); /* Normal mode */
    1752:	ae e4       	ldi	r26, 0x4E	; 78
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ee e4       	ldi	r30, 0x4E	; 78
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	87 7f       	andi	r24, 0xF7	; 247
    175e:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | Config_Ptr-> prescaler;
    1760:	ae e4       	ldi	r26, 0x4E	; 78
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ee e4       	ldi	r30, 0x4E	; 78
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	98 2f       	mov	r25, r24
    176c:	98 7f       	andi	r25, 0xF8	; 248
    176e:	e9 81       	ldd	r30, Y+1	; 0x01
    1770:	fa 81       	ldd	r31, Y+2	; 0x02
    1772:	84 81       	ldd	r24, Z+4	; 0x04
    1774:	89 2b       	or	r24, r25
    1776:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE1); /* Enables interrupt of overflow */
    1778:	a9 e5       	ldi	r26, 0x59	; 89
    177a:	b0 e0       	ldi	r27, 0x00	; 0
    177c:	e9 e5       	ldi	r30, 0x59	; 89
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	80 81       	ld	r24, Z
    1782:	84 60       	ori	r24, 0x04	; 4
    1784:	8c 93       	st	X, r24
    1786:	58 c0       	rjmp	.+176    	; 0x1838 <Timer1_init+0x11e>
	}

	else if(Config_Ptr-> mode == compare)
    1788:	e9 81       	ldd	r30, Y+1	; 0x01
    178a:	fa 81       	ldd	r31, Y+2	; 0x02
    178c:	85 81       	ldd	r24, Z+5	; 0x05
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	59 f5       	brne	.+86     	; 0x17e8 <Timer1_init+0xce>
	{
		TCCR1A |= (1<<FOC1A); /* Compare unit A */
    1792:	af e4       	ldi	r26, 0x4F	; 79
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	ef e4       	ldi	r30, 0x4F	; 79
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	88 60       	ori	r24, 0x08	; 8
    179e:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12); /* CTC */
    17a0:	ae e4       	ldi	r26, 0x4E	; 78
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	ee e4       	ldi	r30, 0x4E	; 78
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	88 60       	ori	r24, 0x08	; 8
    17ac:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | Config_Ptr-> prescaler;
    17ae:	ae e4       	ldi	r26, 0x4E	; 78
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ee e4       	ldi	r30, 0x4E	; 78
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	98 2f       	mov	r25, r24
    17ba:	98 7f       	andi	r25, 0xF8	; 248
    17bc:	e9 81       	ldd	r30, Y+1	; 0x01
    17be:	fa 81       	ldd	r31, Y+2	; 0x02
    17c0:	84 81       	ldd	r24, Z+4	; 0x04
    17c2:	89 2b       	or	r24, r25
    17c4:	8c 93       	st	X, r24

		OCR1A = Config_Ptr-> compare_value; /* Output compare register A */
    17c6:	aa e4       	ldi	r26, 0x4A	; 74
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e9 81       	ldd	r30, Y+1	; 0x01
    17cc:	fa 81       	ldd	r31, Y+2	; 0x02
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	11 96       	adiw	r26, 0x01	; 1
    17d4:	9c 93       	st	X, r25
    17d6:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A); /*Enables interrupt of Compare Match A*/
    17d8:	a9 e5       	ldi	r26, 0x59	; 89
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e9 e5       	ldi	r30, 0x59	; 89
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	80 61       	ori	r24, 0x10	; 16
    17e4:	8c 93       	st	X, r24
    17e6:	28 c0       	rjmp	.+80     	; 0x1838 <Timer1_init+0x11e>
	}

	else if(Config_Ptr-> mode == PWM)
    17e8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ea:	fa 81       	ldd	r31, Y+2	; 0x02
    17ec:	85 81       	ldd	r24, Z+5	; 0x05
    17ee:	82 30       	cpi	r24, 0x02	; 2
    17f0:	19 f5       	brne	.+70     	; 0x1838 <Timer1_init+0x11e>
	{
		TCCR1A |= (1<<WGM10) | (1<<WGM11);
    17f2:	af e4       	ldi	r26, 0x4F	; 79
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	ef e4       	ldi	r30, 0x4F	; 79
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	83 60       	ori	r24, 0x03	; 3
    17fe:	8c 93       	st	X, r24
		TCCR1B |= (1<<WGM12) | (1<<WGM13);
    1800:	ae e4       	ldi	r26, 0x4E	; 78
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ee e4       	ldi	r30, 0x4E	; 78
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	88 61       	ori	r24, 0x18	; 24
    180c:	8c 93       	st	X, r24
		TCCR1B = (TCCR1B & 0xF8) | Config_Ptr-> prescaler;
    180e:	ae e4       	ldi	r26, 0x4E	; 78
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	ee e4       	ldi	r30, 0x4E	; 78
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	98 2f       	mov	r25, r24
    181a:	98 7f       	andi	r25, 0xF8	; 248
    181c:	e9 81       	ldd	r30, Y+1	; 0x01
    181e:	fa 81       	ldd	r31, Y+2	; 0x02
    1820:	84 81       	ldd	r24, Z+4	; 0x04
    1822:	89 2b       	or	r24, r25
    1824:	8c 93       	st	X, r24
		OCR1A = Config_Ptr-> compare_value;
    1826:	aa e4       	ldi	r26, 0x4A	; 74
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e9 81       	ldd	r30, Y+1	; 0x01
    182c:	fa 81       	ldd	r31, Y+2	; 0x02
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	11 96       	adiw	r26, 0x01	; 1
    1834:	9c 93       	st	X, r25
    1836:	8e 93       	st	-X, r24
	}
}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <Timer1_deInit>:

void Timer1_deInit(void)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
	TCCR1A &= 0x0B; 	/* FOC1A/WGM11/WGM10 =0*/
    184a:	af e4       	ldi	r26, 0x4F	; 79
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	ef e4       	ldi	r30, 0x4F	; 79
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	8b 70       	andi	r24, 0x0B	; 11
    1856:	8c 93       	st	X, r24
	TCCR1B &= 0xE0;     /* No clock source(Timer/counter stop)and WGM13/WGM12 =0 */
    1858:	ae e4       	ldi	r26, 0x4E	; 78
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	ee e4       	ldi	r30, 0x4E	; 78
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 7e       	andi	r24, 0xE0	; 224
    1864:	8c 93       	st	X, r24
	TCNT1 = 0;			/* clear the initial value */
    1866:	ec e4       	ldi	r30, 0x4C	; 76
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	11 82       	std	Z+1, r1	; 0x01
    186c:	10 82       	st	Z, r1
	TIMSK &= ~(1<<OCIE1A); /* disable interrupt of overflow */
    186e:	a9 e5       	ldi	r26, 0x59	; 89
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e9 e5       	ldi	r30, 0x59	; 89
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	8f 7e       	andi	r24, 0xEF	; 239
    187a:	8c 93       	st	X, r24
	TIMSK &= ~(1<<TOIE1); /*disable interrupt of Compare Match A*/
    187c:	a9 e5       	ldi	r26, 0x59	; 89
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e9 e5       	ldi	r30, 0x59	; 89
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	8b 7f       	andi	r24, 0xFB	; 251
    1888:	8c 93       	st	X, r24
}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <Timer1_setCallBack+0x6>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	9a 81       	ldd	r25, Y+2	; 0x02
    18a2:	90 93 5b 01 	sts	0x015B, r25
    18a6:	80 93 5a 01 	sts	0x015A, r24
}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <GPIO_setupPinDirection+0x6>
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <GPIO_setupPinDirection+0x8>
    18bc:	0f 92       	push	r0
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	89 83       	std	Y+1, r24	; 0x01
    18c4:	6a 83       	std	Y+2, r22	; 0x02
    18c6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	88 30       	cpi	r24, 0x08	; 8
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <GPIO_setupPinDirection+0x1c>
    18ce:	d5 c0       	rjmp	.+426    	; 0x1a7a <GPIO_setupPinDirection+0x1c6>
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <GPIO_setupPinDirection+0x24>
    18d6:	d1 c0       	rjmp	.+418    	; 0x1a7a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	3d 83       	std	Y+5, r19	; 0x05
    18e0:	2c 83       	std	Y+4, r18	; 0x04
    18e2:	8c 81       	ldd	r24, Y+4	; 0x04
    18e4:	9d 81       	ldd	r25, Y+5	; 0x05
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	91 05       	cpc	r25, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <GPIO_setupPinDirection+0x3a>
    18ec:	43 c0       	rjmp	.+134    	; 0x1974 <GPIO_setupPinDirection+0xc0>
    18ee:	2c 81       	ldd	r18, Y+4	; 0x04
    18f0:	3d 81       	ldd	r19, Y+5	; 0x05
    18f2:	22 30       	cpi	r18, 0x02	; 2
    18f4:	31 05       	cpc	r19, r1
    18f6:	2c f4       	brge	.+10     	; 0x1902 <GPIO_setupPinDirection+0x4e>
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	9d 81       	ldd	r25, Y+5	; 0x05
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	71 f0       	breq	.+28     	; 0x191c <GPIO_setupPinDirection+0x68>
    1900:	bc c0       	rjmp	.+376    	; 0x1a7a <GPIO_setupPinDirection+0x1c6>
    1902:	2c 81       	ldd	r18, Y+4	; 0x04
    1904:	3d 81       	ldd	r19, Y+5	; 0x05
    1906:	22 30       	cpi	r18, 0x02	; 2
    1908:	31 05       	cpc	r19, r1
    190a:	09 f4       	brne	.+2      	; 0x190e <GPIO_setupPinDirection+0x5a>
    190c:	5f c0       	rjmp	.+190    	; 0x19cc <GPIO_setupPinDirection+0x118>
    190e:	8c 81       	ldd	r24, Y+4	; 0x04
    1910:	9d 81       	ldd	r25, Y+5	; 0x05
    1912:	83 30       	cpi	r24, 0x03	; 3
    1914:	91 05       	cpc	r25, r1
    1916:	09 f4       	brne	.+2      	; 0x191a <GPIO_setupPinDirection+0x66>
    1918:	85 c0       	rjmp	.+266    	; 0x1a24 <GPIO_setupPinDirection+0x170>
    191a:	af c0       	rjmp	.+350    	; 0x1a7a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	a1 f4       	brne	.+40     	; 0x194a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1922:	aa e3       	ldi	r26, 0x3A	; 58
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	ea e3       	ldi	r30, 0x3A	; 58
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <GPIO_setupPinDirection+0x8c>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <GPIO_setupPinDirection+0x88>
    1944:	84 2b       	or	r24, r20
    1946:	8c 93       	st	X, r24
    1948:	98 c0       	rjmp	.+304    	; 0x1a7a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    194a:	aa e3       	ldi	r26, 0x3A	; 58
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	ea e3       	ldi	r30, 0x3A	; 58
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	48 2f       	mov	r20, r24
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <GPIO_setupPinDirection+0xb4>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <GPIO_setupPinDirection+0xb0>
    196c:	80 95       	com	r24
    196e:	84 23       	and	r24, r20
    1970:	8c 93       	st	X, r24
    1972:	83 c0       	rjmp	.+262    	; 0x1a7a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	a1 f4       	brne	.+40     	; 0x19a2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    197a:	a7 e3       	ldi	r26, 0x37	; 55
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e7 e3       	ldi	r30, 0x37	; 55
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	48 2f       	mov	r20, r24
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 2e       	mov	r0, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <GPIO_setupPinDirection+0xe4>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	0a 94       	dec	r0
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <GPIO_setupPinDirection+0xe0>
    199c:	84 2b       	or	r24, r20
    199e:	8c 93       	st	X, r24
    19a0:	6c c0       	rjmp	.+216    	; 0x1a7a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    19a2:	a7 e3       	ldi	r26, 0x37	; 55
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e7 e3       	ldi	r30, 0x37	; 55
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <GPIO_setupPinDirection+0x10c>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <GPIO_setupPinDirection+0x108>
    19c4:	80 95       	com	r24
    19c6:	84 23       	and	r24, r20
    19c8:	8c 93       	st	X, r24
    19ca:	57 c0       	rjmp	.+174    	; 0x1a7a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    19cc:	8b 81       	ldd	r24, Y+3	; 0x03
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	a1 f4       	brne	.+40     	; 0x19fa <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    19d2:	a4 e3       	ldi	r26, 0x34	; 52
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e4 e3       	ldi	r30, 0x34	; 52
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <GPIO_setupPinDirection+0x13c>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <GPIO_setupPinDirection+0x138>
    19f4:	84 2b       	or	r24, r20
    19f6:	8c 93       	st	X, r24
    19f8:	40 c0       	rjmp	.+128    	; 0x1a7a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19fa:	a4 e3       	ldi	r26, 0x34	; 52
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	e4 e3       	ldi	r30, 0x34	; 52
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	02 2e       	mov	r0, r18
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <GPIO_setupPinDirection+0x164>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	0a 94       	dec	r0
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <GPIO_setupPinDirection+0x160>
    1a1c:	80 95       	com	r24
    1a1e:	84 23       	and	r24, r20
    1a20:	8c 93       	st	X, r24
    1a22:	2b c0       	rjmp	.+86     	; 0x1a7a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a24:	8b 81       	ldd	r24, Y+3	; 0x03
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	a1 f4       	brne	.+40     	; 0x1a52 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a2a:	a1 e3       	ldi	r26, 0x31	; 49
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e1 e3       	ldi	r30, 0x31	; 49
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 2e       	mov	r0, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <GPIO_setupPinDirection+0x194>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	0a 94       	dec	r0
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <GPIO_setupPinDirection+0x190>
    1a4c:	84 2b       	or	r24, r20
    1a4e:	8c 93       	st	X, r24
    1a50:	14 c0       	rjmp	.+40     	; 0x1a7a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a52:	a1 e3       	ldi	r26, 0x31	; 49
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e1 e3       	ldi	r30, 0x31	; 49
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	28 2f       	mov	r18, r24
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	02 2e       	mov	r0, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <GPIO_setupPinDirection+0x1bc>
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	0a 94       	dec	r0
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <GPIO_setupPinDirection+0x1b8>
    1a74:	80 95       	com	r24
    1a76:	84 23       	and	r24, r20
    1a78:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <GPIO_writePin+0x6>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <GPIO_writePin+0x8>
    1a92:	0f 92       	push	r0
    1a94:	cd b7       	in	r28, 0x3d	; 61
    1a96:	de b7       	in	r29, 0x3e	; 62
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	6a 83       	std	Y+2, r22	; 0x02
    1a9c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	88 30       	cpi	r24, 0x08	; 8
    1aa2:	08 f0       	brcs	.+2      	; 0x1aa6 <GPIO_writePin+0x1c>
    1aa4:	d5 c0       	rjmp	.+426    	; 0x1c50 <GPIO_writePin+0x1c6>
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	84 30       	cpi	r24, 0x04	; 4
    1aaa:	08 f0       	brcs	.+2      	; 0x1aae <GPIO_writePin+0x24>
    1aac:	d1 c0       	rjmp	.+418    	; 0x1c50 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	3d 83       	std	Y+5, r19	; 0x05
    1ab6:	2c 83       	std	Y+4, r18	; 0x04
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9d 81       	ldd	r25, Y+5	; 0x05
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	91 05       	cpc	r25, r1
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <GPIO_writePin+0x3a>
    1ac2:	43 c0       	rjmp	.+134    	; 0x1b4a <GPIO_writePin+0xc0>
    1ac4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac8:	22 30       	cpi	r18, 0x02	; 2
    1aca:	31 05       	cpc	r19, r1
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <GPIO_writePin+0x4e>
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	71 f0       	breq	.+28     	; 0x1af2 <GPIO_writePin+0x68>
    1ad6:	bc c0       	rjmp	.+376    	; 0x1c50 <GPIO_writePin+0x1c6>
    1ad8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ada:	3d 81       	ldd	r19, Y+5	; 0x05
    1adc:	22 30       	cpi	r18, 0x02	; 2
    1ade:	31 05       	cpc	r19, r1
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <GPIO_writePin+0x5a>
    1ae2:	5f c0       	rjmp	.+190    	; 0x1ba2 <GPIO_writePin+0x118>
    1ae4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae8:	83 30       	cpi	r24, 0x03	; 3
    1aea:	91 05       	cpc	r25, r1
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <GPIO_writePin+0x66>
    1aee:	85 c0       	rjmp	.+266    	; 0x1bfa <GPIO_writePin+0x170>
    1af0:	af c0       	rjmp	.+350    	; 0x1c50 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	81 30       	cpi	r24, 0x01	; 1
    1af6:	a1 f4       	brne	.+40     	; 0x1b20 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1af8:	ab e3       	ldi	r26, 0x3B	; 59
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	eb e3       	ldi	r30, 0x3B	; 59
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	02 2e       	mov	r0, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <GPIO_writePin+0x8c>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	0a 94       	dec	r0
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <GPIO_writePin+0x88>
    1b1a:	84 2b       	or	r24, r20
    1b1c:	8c 93       	st	X, r24
    1b1e:	98 c0       	rjmp	.+304    	; 0x1c50 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b20:	ab e3       	ldi	r26, 0x3B	; 59
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	eb e3       	ldi	r30, 0x3B	; 59
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	48 2f       	mov	r20, r24
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	02 2e       	mov	r0, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <GPIO_writePin+0xb4>
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	0a 94       	dec	r0
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <GPIO_writePin+0xb0>
    1b42:	80 95       	com	r24
    1b44:	84 23       	and	r24, r20
    1b46:	8c 93       	st	X, r24
    1b48:	83 c0       	rjmp	.+262    	; 0x1c50 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	a1 f4       	brne	.+40     	; 0x1b78 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b50:	a8 e3       	ldi	r26, 0x38	; 56
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e8 e3       	ldi	r30, 0x38	; 56
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	48 2f       	mov	r20, r24
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 2e       	mov	r0, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <GPIO_writePin+0xe4>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0a 94       	dec	r0
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <GPIO_writePin+0xe0>
    1b72:	84 2b       	or	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	6c c0       	rjmp	.+216    	; 0x1c50 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b78:	a8 e3       	ldi	r26, 0x38	; 56
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e8 e3       	ldi	r30, 0x38	; 56
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <GPIO_writePin+0x10c>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <GPIO_writePin+0x108>
    1b9a:	80 95       	com	r24
    1b9c:	84 23       	and	r24, r20
    1b9e:	8c 93       	st	X, r24
    1ba0:	57 c0       	rjmp	.+174    	; 0x1c50 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	81 30       	cpi	r24, 0x01	; 1
    1ba6:	a1 f4       	brne	.+40     	; 0x1bd0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1ba8:	a5 e3       	ldi	r26, 0x35	; 53
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e5 e3       	ldi	r30, 0x35	; 53
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <GPIO_writePin+0x13c>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <GPIO_writePin+0x138>
    1bca:	84 2b       	or	r24, r20
    1bcc:	8c 93       	st	X, r24
    1bce:	40 c0       	rjmp	.+128    	; 0x1c50 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1bd0:	a5 e3       	ldi	r26, 0x35	; 53
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	e5 e3       	ldi	r30, 0x35	; 53
    1bd6:	f0 e0       	ldi	r31, 0x00	; 0
    1bd8:	80 81       	ld	r24, Z
    1bda:	48 2f       	mov	r20, r24
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 2e       	mov	r0, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <GPIO_writePin+0x164>
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	0a 94       	dec	r0
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <GPIO_writePin+0x160>
    1bf2:	80 95       	com	r24
    1bf4:	84 23       	and	r24, r20
    1bf6:	8c 93       	st	X, r24
    1bf8:	2b c0       	rjmp	.+86     	; 0x1c50 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	a1 f4       	brne	.+40     	; 0x1c28 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c00:	a2 e3       	ldi	r26, 0x32	; 50
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e2 e3       	ldi	r30, 0x32	; 50
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 2e       	mov	r0, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <GPIO_writePin+0x194>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <GPIO_writePin+0x190>
    1c22:	84 2b       	or	r24, r20
    1c24:	8c 93       	st	X, r24
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c28:	a2 e3       	ldi	r26, 0x32	; 50
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e2 e3       	ldi	r30, 0x32	; 50
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	48 2f       	mov	r20, r24
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	02 2e       	mov	r0, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <GPIO_writePin+0x1bc>
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	0a 94       	dec	r0
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <GPIO_writePin+0x1b8>
    1c4a:	80 95       	com	r24
    1c4c:	84 23       	and	r24, r20
    1c4e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <GPIO_readPin+0x6>
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <GPIO_readPin+0x8>
    1c68:	0f 92       	push	r0
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
    1c70:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c72:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	88 30       	cpi	r24, 0x08	; 8
    1c78:	08 f0       	brcs	.+2      	; 0x1c7c <GPIO_readPin+0x1c>
    1c7a:	84 c0       	rjmp	.+264    	; 0x1d84 <GPIO_readPin+0x124>
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	84 30       	cpi	r24, 0x04	; 4
    1c80:	08 f0       	brcs	.+2      	; 0x1c84 <GPIO_readPin+0x24>
    1c82:	80 c0       	rjmp	.+256    	; 0x1d84 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	28 2f       	mov	r18, r24
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	3d 83       	std	Y+5, r19	; 0x05
    1c8c:	2c 83       	std	Y+4, r18	; 0x04
    1c8e:	4c 81       	ldd	r20, Y+4	; 0x04
    1c90:	5d 81       	ldd	r21, Y+5	; 0x05
    1c92:	41 30       	cpi	r20, 0x01	; 1
    1c94:	51 05       	cpc	r21, r1
    1c96:	79 f1       	breq	.+94     	; 0x1cf6 <GPIO_readPin+0x96>
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9c:	82 30       	cpi	r24, 0x02	; 2
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	34 f4       	brge	.+12     	; 0x1cae <GPIO_readPin+0x4e>
    1ca2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca6:	21 15       	cp	r18, r1
    1ca8:	31 05       	cpc	r19, r1
    1caa:	69 f0       	breq	.+26     	; 0x1cc6 <GPIO_readPin+0x66>
    1cac:	6b c0       	rjmp	.+214    	; 0x1d84 <GPIO_readPin+0x124>
    1cae:	4c 81       	ldd	r20, Y+4	; 0x04
    1cb0:	5d 81       	ldd	r21, Y+5	; 0x05
    1cb2:	42 30       	cpi	r20, 0x02	; 2
    1cb4:	51 05       	cpc	r21, r1
    1cb6:	b9 f1       	breq	.+110    	; 0x1d26 <GPIO_readPin+0xc6>
    1cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cba:	9d 81       	ldd	r25, Y+5	; 0x05
    1cbc:	83 30       	cpi	r24, 0x03	; 3
    1cbe:	91 05       	cpc	r25, r1
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <GPIO_readPin+0x64>
    1cc2:	49 c0       	rjmp	.+146    	; 0x1d56 <GPIO_readPin+0xf6>
    1cc4:	5f c0       	rjmp	.+190    	; 0x1d84 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1cc6:	e9 e3       	ldi	r30, 0x39	; 57
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	88 2f       	mov	r24, r24
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	a9 01       	movw	r20, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <GPIO_readPin+0x7e>
    1cda:	55 95       	asr	r21
    1cdc:	47 95       	ror	r20
    1cde:	8a 95       	dec	r24
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <GPIO_readPin+0x7a>
    1ce2:	ca 01       	movw	r24, r20
    1ce4:	81 70       	andi	r24, 0x01	; 1
    1ce6:	90 70       	andi	r25, 0x00	; 0
    1ce8:	88 23       	and	r24, r24
    1cea:	19 f0       	breq	.+6      	; 0x1cf2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	49 c0       	rjmp	.+146    	; 0x1d84 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cf2:	19 82       	std	Y+1, r1	; 0x01
    1cf4:	47 c0       	rjmp	.+142    	; 0x1d84 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1cf6:	e6 e3       	ldi	r30, 0x36	; 54
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	80 81       	ld	r24, Z
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	88 2f       	mov	r24, r24
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a9 01       	movw	r20, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <GPIO_readPin+0xae>
    1d0a:	55 95       	asr	r21
    1d0c:	47 95       	ror	r20
    1d0e:	8a 95       	dec	r24
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <GPIO_readPin+0xaa>
    1d12:	ca 01       	movw	r24, r20
    1d14:	81 70       	andi	r24, 0x01	; 1
    1d16:	90 70       	andi	r25, 0x00	; 0
    1d18:	88 23       	and	r24, r24
    1d1a:	19 f0       	breq	.+6      	; 0x1d22 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	89 83       	std	Y+1, r24	; 0x01
    1d20:	31 c0       	rjmp	.+98     	; 0x1d84 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d22:	19 82       	std	Y+1, r1	; 0x01
    1d24:	2f c0       	rjmp	.+94     	; 0x1d84 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d26:	e3 e3       	ldi	r30, 0x33	; 51
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	88 2f       	mov	r24, r24
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	a9 01       	movw	r20, r18
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <GPIO_readPin+0xde>
    1d3a:	55 95       	asr	r21
    1d3c:	47 95       	ror	r20
    1d3e:	8a 95       	dec	r24
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <GPIO_readPin+0xda>
    1d42:	ca 01       	movw	r24, r20
    1d44:	81 70       	andi	r24, 0x01	; 1
    1d46:	90 70       	andi	r25, 0x00	; 0
    1d48:	88 23       	and	r24, r24
    1d4a:	19 f0       	breq	.+6      	; 0x1d52 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	19 c0       	rjmp	.+50     	; 0x1d84 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d52:	19 82       	std	Y+1, r1	; 0x01
    1d54:	17 c0       	rjmp	.+46     	; 0x1d84 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d56:	e0 e3       	ldi	r30, 0x30	; 48
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	88 2f       	mov	r24, r24
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a9 01       	movw	r20, r18
    1d68:	02 c0       	rjmp	.+4      	; 0x1d6e <GPIO_readPin+0x10e>
    1d6a:	55 95       	asr	r21
    1d6c:	47 95       	ror	r20
    1d6e:	8a 95       	dec	r24
    1d70:	e2 f7       	brpl	.-8      	; 0x1d6a <GPIO_readPin+0x10a>
    1d72:	ca 01       	movw	r24, r20
    1d74:	81 70       	andi	r24, 0x01	; 1
    1d76:	90 70       	andi	r25, 0x00	; 0
    1d78:	88 23       	and	r24, r24
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d82:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <GPIO_setupPortDirection+0x6>
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <GPIO_setupPortDirection+0x8>
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	84 30       	cpi	r24, 0x04	; 4
    1daa:	90 f5       	brcc	.+100    	; 0x1e10 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	3c 83       	std	Y+4, r19	; 0x04
    1db4:	2b 83       	std	Y+3, r18	; 0x03
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	d1 f0       	breq	.+52     	; 0x1df4 <GPIO_setupPortDirection+0x5e>
    1dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <GPIO_setupPortDirection+0x3e>
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	61 f0       	breq	.+24     	; 0x1dea <GPIO_setupPortDirection+0x54>
    1dd2:	1e c0       	rjmp	.+60     	; 0x1e10 <GPIO_setupPortDirection+0x7a>
    1dd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd8:	22 30       	cpi	r18, 0x02	; 2
    1dda:	31 05       	cpc	r19, r1
    1ddc:	81 f0       	breq	.+32     	; 0x1dfe <GPIO_setupPortDirection+0x68>
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	83 30       	cpi	r24, 0x03	; 3
    1de4:	91 05       	cpc	r25, r1
    1de6:	81 f0       	breq	.+32     	; 0x1e08 <GPIO_setupPortDirection+0x72>
    1de8:	13 c0       	rjmp	.+38     	; 0x1e10 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1dea:	ea e3       	ldi	r30, 0x3A	; 58
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	80 83       	st	Z, r24
    1df2:	0e c0       	rjmp	.+28     	; 0x1e10 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1df4:	e7 e3       	ldi	r30, 0x37	; 55
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	80 83       	st	Z, r24
    1dfc:	09 c0       	rjmp	.+18     	; 0x1e10 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1dfe:	e4 e3       	ldi	r30, 0x34	; 52
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	80 83       	st	Z, r24
    1e06:	04 c0       	rjmp	.+8      	; 0x1e10 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e08:	e1 e3       	ldi	r30, 0x31	; 49
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <GPIO_writePort+0x6>
    1e24:	00 d0       	rcall	.+0      	; 0x1e26 <GPIO_writePort+0x8>
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	90 f5       	brcc	.+100    	; 0x1e98 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1e34:	89 81       	ldd	r24, Y+1	; 0x01
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	3c 83       	std	Y+4, r19	; 0x04
    1e3c:	2b 83       	std	Y+3, r18	; 0x03
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	81 30       	cpi	r24, 0x01	; 1
    1e44:	91 05       	cpc	r25, r1
    1e46:	d1 f0       	breq	.+52     	; 0x1e7c <GPIO_writePort+0x5e>
    1e48:	2b 81       	ldd	r18, Y+3	; 0x03
    1e4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e4c:	22 30       	cpi	r18, 0x02	; 2
    1e4e:	31 05       	cpc	r19, r1
    1e50:	2c f4       	brge	.+10     	; 0x1e5c <GPIO_writePort+0x3e>
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	61 f0       	breq	.+24     	; 0x1e72 <GPIO_writePort+0x54>
    1e5a:	1e c0       	rjmp	.+60     	; 0x1e98 <GPIO_writePort+0x7a>
    1e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e60:	22 30       	cpi	r18, 0x02	; 2
    1e62:	31 05       	cpc	r19, r1
    1e64:	81 f0       	breq	.+32     	; 0x1e86 <GPIO_writePort+0x68>
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	83 30       	cpi	r24, 0x03	; 3
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	81 f0       	breq	.+32     	; 0x1e90 <GPIO_writePort+0x72>
    1e70:	13 c0       	rjmp	.+38     	; 0x1e98 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e72:	eb e3       	ldi	r30, 0x3B	; 59
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	80 83       	st	Z, r24
    1e7a:	0e c0       	rjmp	.+28     	; 0x1e98 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e7c:	e8 e3       	ldi	r30, 0x38	; 56
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	80 83       	st	Z, r24
    1e84:	09 c0       	rjmp	.+18     	; 0x1e98 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e86:	e5 e3       	ldi	r30, 0x35	; 53
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	80 83       	st	Z, r24
    1e8e:	04 c0       	rjmp	.+8      	; 0x1e98 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e90:	e2 e3       	ldi	r30, 0x32	; 50
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	cf 91       	pop	r28
    1ea2:	df 91       	pop	r29
    1ea4:	08 95       	ret

00001ea6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ea6:	df 93       	push	r29
    1ea8:	cf 93       	push	r28
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <GPIO_readPort+0x6>
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <GPIO_readPort+0x8>
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1eb4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	84 30       	cpi	r24, 0x04	; 4
    1eba:	90 f5       	brcc	.+100    	; 0x1f20 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	3c 83       	std	Y+4, r19	; 0x04
    1ec4:	2b 83       	std	Y+3, r18	; 0x03
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	81 30       	cpi	r24, 0x01	; 1
    1ecc:	91 05       	cpc	r25, r1
    1ece:	d1 f0       	breq	.+52     	; 0x1f04 <GPIO_readPort+0x5e>
    1ed0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed4:	22 30       	cpi	r18, 0x02	; 2
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	2c f4       	brge	.+10     	; 0x1ee4 <GPIO_readPort+0x3e>
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	61 f0       	breq	.+24     	; 0x1efa <GPIO_readPort+0x54>
    1ee2:	1e c0       	rjmp	.+60     	; 0x1f20 <GPIO_readPort+0x7a>
    1ee4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee8:	22 30       	cpi	r18, 0x02	; 2
    1eea:	31 05       	cpc	r19, r1
    1eec:	81 f0       	breq	.+32     	; 0x1f0e <GPIO_readPort+0x68>
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	83 30       	cpi	r24, 0x03	; 3
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	81 f0       	breq	.+32     	; 0x1f18 <GPIO_readPort+0x72>
    1ef8:	13 c0       	rjmp	.+38     	; 0x1f20 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1efa:	e9 e3       	ldi	r30, 0x39	; 57
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	89 83       	std	Y+1, r24	; 0x01
    1f02:	0e c0       	rjmp	.+28     	; 0x1f20 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f04:	e6 e3       	ldi	r30, 0x36	; 54
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	09 c0       	rjmp	.+18     	; 0x1f20 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f0e:	e3 e3       	ldi	r30, 0x33	; 51
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	89 83       	std	Y+1, r24	; 0x01
    1f16:	04 c0       	rjmp	.+8      	; 0x1f20 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f18:	e0 e3       	ldi	r30, 0x30	; 48
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f22:	0f 90       	pop	r0
    1f24:	0f 90       	pop	r0
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	08 95       	ret

00001f30 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1f30:	df 93       	push	r29
    1f32:	cf 93       	push	r28
    1f34:	00 d0       	rcall	.+0      	; 0x1f36 <KEYPAD_getPressedKey+0x6>
    1f36:	0f 92       	push	r0
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1f3c:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1f3e:	1b 82       	std	Y+3, r1	; 0x03
    1f40:	43 c0       	rjmp	.+134    	; 0x1fc8 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1f42:	82 e0       	ldi	r24, 0x02	; 2
    1f44:	60 e0       	ldi	r22, 0x00	; 0
    1f46:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col,PIN_OUTPUT);
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	98 2f       	mov	r25, r24
    1f4e:	9c 5f       	subi	r25, 0xFC	; 252
    1f50:	82 e0       	ldi	r24, 0x02	; 2
    1f52:	69 2f       	mov	r22, r25
    1f54:	41 e0       	ldi	r20, 0x01	; 1
    1f56:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COL_PIN_ID+col));
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	88 2f       	mov	r24, r24
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9c 01       	movw	r18, r24
    1f62:	2c 5f       	subi	r18, 0xFC	; 252
    1f64:	3f 4f       	sbci	r19, 0xFF	; 255
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <KEYPAD_getPressedKey+0x40>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	2a 95       	dec	r18
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <KEYPAD_getPressedKey+0x3c>
    1f74:	80 95       	com	r24
    1f76:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1f78:	82 e0       	ldi	r24, 0x02	; 2
    1f7a:	69 81       	ldd	r22, Y+1	; 0x01
    1f7c:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1f80:	1a 82       	std	Y+2, r1	; 0x02
    1f82:	1c c0       	rjmp	.+56     	; 0x1fbc <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1f84:	82 e0       	ldi	r24, 0x02	; 2
    1f86:	6a 81       	ldd	r22, Y+2	; 0x02
    1f88:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <GPIO_readPin>
    1f8c:	88 23       	and	r24, r24
    1f8e:	99 f4       	brne	.+38     	; 0x1fb6 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	98 2f       	mov	r25, r24
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	89 0f       	add	r24, r25
    1fa4:	8f 5f       	subi	r24, 0xFF	; 255
    1fa6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	8f 5f       	subi	r24, 0xFF	; 255
    1fba:	8a 83       	std	Y+2, r24	; 0x02
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	84 30       	cpi	r24, 0x04	; 4
    1fc0:	08 f3       	brcs	.-62     	; 0x1f84 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	8f 5f       	subi	r24, 0xFF	; 255
    1fc6:	8b 83       	std	Y+3, r24	; 0x03
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	84 30       	cpi	r24, 0x04	; 4
    1fcc:	08 f4       	brcc	.+2      	; 0x1fd0 <KEYPAD_getPressedKey+0xa0>
    1fce:	b9 cf       	rjmp	.-142    	; 0x1f42 <KEYPAD_getPressedKey+0x12>
    1fd0:	b6 cf       	rjmp	.-148    	; 0x1f3e <KEYPAD_getPressedKey+0xe>

00001fd2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <KEYPAD_4x4_adjustKeyNumber+0x8>
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1fe0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	3c 83       	std	Y+4, r19	; 0x04
    1fea:	2b 83       	std	Y+3, r18	; 0x03
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	88 30       	cpi	r24, 0x08	; 8
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1ff6:	70 c0       	rjmp	.+224    	; 0x20d8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ff8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffa:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffc:	29 30       	cpi	r18, 0x09	; 9
    1ffe:	31 05       	cpc	r19, r1
    2000:	5c f5       	brge	.+86     	; 0x2058 <KEYPAD_4x4_adjustKeyNumber+0x86>
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	9c 81       	ldd	r25, Y+4	; 0x04
    2006:	84 30       	cpi	r24, 0x04	; 4
    2008:	91 05       	cpc	r25, r1
    200a:	09 f4       	brne	.+2      	; 0x200e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    200c:	59 c0       	rjmp	.+178    	; 0x20c0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    200e:	2b 81       	ldd	r18, Y+3	; 0x03
    2010:	3c 81       	ldd	r19, Y+4	; 0x04
    2012:	25 30       	cpi	r18, 0x05	; 5
    2014:	31 05       	cpc	r19, r1
    2016:	9c f4       	brge	.+38     	; 0x203e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	9c 81       	ldd	r25, Y+4	; 0x04
    201c:	82 30       	cpi	r24, 0x02	; 2
    201e:	91 05       	cpc	r25, r1
    2020:	09 f4       	brne	.+2      	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2022:	48 c0       	rjmp	.+144    	; 0x20b4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2024:	2b 81       	ldd	r18, Y+3	; 0x03
    2026:	3c 81       	ldd	r19, Y+4	; 0x04
    2028:	23 30       	cpi	r18, 0x03	; 3
    202a:	31 05       	cpc	r19, r1
    202c:	0c f0       	brlt	.+2      	; 0x2030 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    202e:	45 c0       	rjmp	.+138    	; 0x20ba <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	9c 81       	ldd	r25, Y+4	; 0x04
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	91 05       	cpc	r25, r1
    2038:	09 f4       	brne	.+2      	; 0x203c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    203a:	39 c0       	rjmp	.+114    	; 0x20ae <KEYPAD_4x4_adjustKeyNumber+0xdc>
    203c:	67 c0       	rjmp	.+206    	; 0x210c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    203e:	2b 81       	ldd	r18, Y+3	; 0x03
    2040:	3c 81       	ldd	r19, Y+4	; 0x04
    2042:	26 30       	cpi	r18, 0x06	; 6
    2044:	31 05       	cpc	r19, r1
    2046:	09 f4       	brne	.+2      	; 0x204a <KEYPAD_4x4_adjustKeyNumber+0x78>
    2048:	41 c0       	rjmp	.+130    	; 0x20cc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	87 30       	cpi	r24, 0x07	; 7
    2050:	91 05       	cpc	r25, r1
    2052:	0c f0       	brlt	.+2      	; 0x2056 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2054:	3e c0       	rjmp	.+124    	; 0x20d2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2056:	37 c0       	rjmp	.+110    	; 0x20c6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2058:	2b 81       	ldd	r18, Y+3	; 0x03
    205a:	3c 81       	ldd	r19, Y+4	; 0x04
    205c:	2c 30       	cpi	r18, 0x0C	; 12
    205e:	31 05       	cpc	r19, r1
    2060:	09 f4       	brne	.+2      	; 0x2064 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2062:	46 c0       	rjmp	.+140    	; 0x20f0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	9c 81       	ldd	r25, Y+4	; 0x04
    2068:	8d 30       	cpi	r24, 0x0D	; 13
    206a:	91 05       	cpc	r25, r1
    206c:	5c f4       	brge	.+22     	; 0x2084 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    206e:	2b 81       	ldd	r18, Y+3	; 0x03
    2070:	3c 81       	ldd	r19, Y+4	; 0x04
    2072:	2a 30       	cpi	r18, 0x0A	; 10
    2074:	31 05       	cpc	r19, r1
    2076:	b1 f1       	breq	.+108    	; 0x20e4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	8b 30       	cpi	r24, 0x0B	; 11
    207e:	91 05       	cpc	r25, r1
    2080:	a4 f5       	brge	.+104    	; 0x20ea <KEYPAD_4x4_adjustKeyNumber+0x118>
    2082:	2d c0       	rjmp	.+90     	; 0x20de <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2084:	2b 81       	ldd	r18, Y+3	; 0x03
    2086:	3c 81       	ldd	r19, Y+4	; 0x04
    2088:	2e 30       	cpi	r18, 0x0E	; 14
    208a:	31 05       	cpc	r19, r1
    208c:	b9 f1       	breq	.+110    	; 0x20fc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	9c 81       	ldd	r25, Y+4	; 0x04
    2092:	8e 30       	cpi	r24, 0x0E	; 14
    2094:	91 05       	cpc	r25, r1
    2096:	7c f1       	brlt	.+94     	; 0x20f6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2098:	2b 81       	ldd	r18, Y+3	; 0x03
    209a:	3c 81       	ldd	r19, Y+4	; 0x04
    209c:	2f 30       	cpi	r18, 0x0F	; 15
    209e:	31 05       	cpc	r19, r1
    20a0:	79 f1       	breq	.+94     	; 0x2100 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	80 31       	cpi	r24, 0x10	; 16
    20a8:	91 05       	cpc	r25, r1
    20aa:	69 f1       	breq	.+90     	; 0x2106 <KEYPAD_4x4_adjustKeyNumber+0x134>
    20ac:	2f c0       	rjmp	.+94     	; 0x210c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    20ae:	87 e0       	ldi	r24, 0x07	; 7
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	2e c0       	rjmp	.+92     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    20b4:	88 e0       	ldi	r24, 0x08	; 8
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	2b c0       	rjmp	.+86     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    20ba:	89 e0       	ldi	r24, 0x09	; 9
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	28 c0       	rjmp	.+80     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    20c0:	85 e2       	ldi	r24, 0x25	; 37
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	25 c0       	rjmp	.+74     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    20c6:	84 e0       	ldi	r24, 0x04	; 4
    20c8:	89 83       	std	Y+1, r24	; 0x01
    20ca:	22 c0       	rjmp	.+68     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    20cc:	85 e0       	ldi	r24, 0x05	; 5
    20ce:	89 83       	std	Y+1, r24	; 0x01
    20d0:	1f c0       	rjmp	.+62     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    20d2:	86 e0       	ldi	r24, 0x06	; 6
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	1c c0       	rjmp	.+56     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    20d8:	8a e2       	ldi	r24, 0x2A	; 42
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	19 c0       	rjmp	.+50     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	16 c0       	rjmp	.+44     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	13 c0       	rjmp	.+38     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    20ea:	83 e0       	ldi	r24, 0x03	; 3
    20ec:	89 83       	std	Y+1, r24	; 0x01
    20ee:	10 c0       	rjmp	.+32     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    20f0:	8d e2       	ldi	r24, 0x2D	; 45
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	0d c0       	rjmp	.+26     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    20f6:	8d e0       	ldi	r24, 0x0D	; 13
    20f8:	89 83       	std	Y+1, r24	; 0x01
    20fa:	0a c0       	rjmp	.+20     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    20fc:	19 82       	std	Y+1, r1	; 0x01
    20fe:	08 c0       	rjmp	.+16     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2100:	8d e3       	ldi	r24, 0x3D	; 61
    2102:	89 83       	std	Y+1, r24	; 0x01
    2104:	05 c0       	rjmp	.+10     	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2106:	8b e2       	ldi	r24, 0x2B	; 43
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2110:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	08 95       	ret

00002120 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	2e 97       	sbiw	r28, 0x0e	; 14
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	64 e0       	ldi	r22, 0x04	; 4
    2138:	41 e0       	ldi	r20, 0x01	; 1
    213a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	65 e0       	ldi	r22, 0x05	; 5
    2142:	41 e0       	ldi	r20, 0x01	; 1
    2144:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <GPIO_setupPinDirection>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a0 ea       	ldi	r26, 0xA0	; 160
    214e:	b1 e4       	ldi	r27, 0x41	; 65
    2150:	8b 87       	std	Y+11, r24	; 0x0b
    2152:	9c 87       	std	Y+12, r25	; 0x0c
    2154:	ad 87       	std	Y+13, r26	; 0x0d
    2156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2158:	6b 85       	ldd	r22, Y+11	; 0x0b
    215a:	7c 85       	ldd	r23, Y+12	; 0x0c
    215c:	8d 85       	ldd	r24, Y+13	; 0x0d
    215e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	4a ef       	ldi	r20, 0xFA	; 250
    2166:	54 e4       	ldi	r21, 0x44	; 68
    2168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	8f 83       	std	Y+7, r24	; 0x07
    2172:	98 87       	std	Y+8, r25	; 0x08
    2174:	a9 87       	std	Y+9, r26	; 0x09
    2176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2178:	6f 81       	ldd	r22, Y+7	; 0x07
    217a:	78 85       	ldd	r23, Y+8	; 0x08
    217c:	89 85       	ldd	r24, Y+9	; 0x09
    217e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <LCD_init+0x7a>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	3f c0       	rjmp	.+126    	; 0x2218 <LCD_init+0xf8>
	else if (__tmp > 65535)
    219a:	6f 81       	ldd	r22, Y+7	; 0x07
    219c:	78 85       	ldd	r23, Y+8	; 0x08
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	3f ef       	ldi	r19, 0xFF	; 255
    21a6:	4f e7       	ldi	r20, 0x7F	; 127
    21a8:	57 e4       	ldi	r21, 0x47	; 71
    21aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ae:	18 16       	cp	r1, r24
    21b0:	4c f5       	brge	.+82     	; 0x2204 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	40 e2       	ldi	r20, 0x20	; 32
    21c0:	51 e4       	ldi	r21, 0x41	; 65
    21c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	bc 01       	movw	r22, r24
    21cc:	cd 01       	movw	r24, r26
    21ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
    21da:	0f c0       	rjmp	.+30     	; 0x21fa <LCD_init+0xda>
    21dc:	88 ec       	ldi	r24, 0xC8	; 200
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <LCD_init+0xc8>
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f0:	8d 81       	ldd	r24, Y+5	; 0x05
    21f2:	9e 81       	ldd	r25, Y+6	; 0x06
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	69 f7       	brne	.-38     	; 0x21dc <LCD_init+0xbc>
    2202:	14 c0       	rjmp	.+40     	; 0x222c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2204:	6f 81       	ldd	r22, Y+7	; 0x07
    2206:	78 85       	ldd	r23, Y+8	; 0x08
    2208:	89 85       	ldd	r24, Y+9	; 0x09
    220a:	9a 85       	ldd	r25, Y+10	; 0x0a
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	8d 81       	ldd	r24, Y+5	; 0x05
    221a:	9e 81       	ldd	r25, Y+6	; 0x06
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_init+0x104>
    2228:	9a 83       	std	Y+2, r25	; 0x02
    222a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	41 e0       	ldi	r20, 0x01	; 1
    223c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	62 e0       	ldi	r22, 0x02	; 2
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	63 e0       	ldi	r22, 0x03	; 3
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2254:	83 e3       	ldi	r24, 0x33	; 51
    2256:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    225a:	82 e3       	ldi	r24, 0x32	; 50
    225c:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2260:	88 e2       	ldi	r24, 0x28	; 40
    2262:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2266:	8c e0       	ldi	r24, 0x0C	; 12
    2268:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_sendCommand>
}
    2272:	2e 96       	adiw	r28, 0x0e	; 14
    2274:	0f b6       	in	r0, 0x3f	; 63
    2276:	f8 94       	cli
    2278:	de bf       	out	0x3e, r29	; 62
    227a:	0f be       	out	0x3f, r0	; 63
    227c:	cd bf       	out	0x3d, r28	; 61
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
    2290:	c3 56       	subi	r28, 0x63	; 99
    2292:	d0 40       	sbci	r29, 0x00	; 0
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	fe 01       	movw	r30, r28
    22a0:	ed 59       	subi	r30, 0x9D	; 157
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	64 e0       	ldi	r22, 0x04	; 4
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    22b0:	fe 01       	movw	r30, r28
    22b2:	e1 5a       	subi	r30, 0xA1	; 161
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a0 e8       	ldi	r26, 0x80	; 128
    22bc:	bf e3       	ldi	r27, 0x3F	; 63
    22be:	80 83       	st	Z, r24
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	a2 83       	std	Z+2, r26	; 0x02
    22c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c6:	8e 01       	movw	r16, r28
    22c8:	05 5a       	subi	r16, 0xA5	; 165
    22ca:	1f 4f       	sbci	r17, 0xFF	; 255
    22cc:	fe 01       	movw	r30, r28
    22ce:	e1 5a       	subi	r30, 0xA1	; 161
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a ef       	ldi	r20, 0xFA	; 250
    22e0:	54 e4       	ldi	r21, 0x44	; 68
    22e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	f8 01       	movw	r30, r16
    22ec:	80 83       	st	Z, r24
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	a2 83       	std	Z+2, r26	; 0x02
    22f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22f4:	fe 01       	movw	r30, r28
    22f6:	e5 5a       	subi	r30, 0xA5	; 165
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	60 81       	ld	r22, Z
    22fc:	71 81       	ldd	r23, Z+1	; 0x01
    22fe:	82 81       	ldd	r24, Z+2	; 0x02
    2300:	93 81       	ldd	r25, Z+3	; 0x03
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	44 f4       	brge	.+16     	; 0x2322 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2312:	fe 01       	movw	r30, r28
    2314:	e7 5a       	subi	r30, 0xA7	; 167
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	91 83       	std	Z+1, r25	; 0x01
    231e:	80 83       	st	Z, r24
    2320:	64 c0       	rjmp	.+200    	; 0x23ea <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2322:	fe 01       	movw	r30, r28
    2324:	e5 5a       	subi	r30, 0xA5	; 165
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	60 81       	ld	r22, Z
    232a:	71 81       	ldd	r23, Z+1	; 0x01
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	4f e7       	ldi	r20, 0x7F	; 127
    2336:	57 e4       	ldi	r21, 0x47	; 71
    2338:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233c:	18 16       	cp	r1, r24
    233e:	0c f0       	brlt	.+2      	; 0x2342 <LCD_sendCommand+0xbe>
    2340:	43 c0       	rjmp	.+134    	; 0x23c8 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	fe 01       	movw	r30, r28
    2344:	e1 5a       	subi	r30, 0xA1	; 161
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	8e 01       	movw	r16, r28
    2362:	07 5a       	subi	r16, 0xA7	; 167
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	bc 01       	movw	r22, r24
    2368:	cd 01       	movw	r24, r26
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	f8 01       	movw	r30, r16
    2374:	91 83       	std	Z+1, r25	; 0x01
    2376:	80 83       	st	Z, r24
    2378:	1f c0       	rjmp	.+62     	; 0x23b8 <LCD_sendCommand+0x134>
    237a:	fe 01       	movw	r30, r28
    237c:	e9 5a       	subi	r30, 0xA9	; 169
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	88 ec       	ldi	r24, 0xC8	; 200
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	91 83       	std	Z+1, r25	; 0x01
    2386:	80 83       	st	Z, r24
    2388:	fe 01       	movw	r30, r28
    238a:	e9 5a       	subi	r30, 0xA9	; 169
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCD_sendCommand+0x10e>
    2396:	fe 01       	movw	r30, r28
    2398:	e9 5a       	subi	r30, 0xA9	; 169
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a0:	de 01       	movw	r26, r28
    23a2:	a7 5a       	subi	r26, 0xA7	; 167
    23a4:	bf 4f       	sbci	r27, 0xFF	; 255
    23a6:	fe 01       	movw	r30, r28
    23a8:	e7 5a       	subi	r30, 0xA7	; 167
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	91 81       	ldd	r25, Z+1	; 0x01
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	11 96       	adiw	r26, 0x01	; 1
    23b4:	9c 93       	st	X, r25
    23b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	fe 01       	movw	r30, r28
    23ba:	e7 5a       	subi	r30, 0xA7	; 167
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	d1 f6       	brne	.-76     	; 0x237a <LCD_sendCommand+0xf6>
    23c6:	27 c0       	rjmp	.+78     	; 0x2416 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c8:	8e 01       	movw	r16, r28
    23ca:	07 5a       	subi	r16, 0xA7	; 167
    23cc:	1f 4f       	sbci	r17, 0xFF	; 255
    23ce:	fe 01       	movw	r30, r28
    23d0:	e5 5a       	subi	r30, 0xA5	; 165
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	60 81       	ld	r22, Z
    23d6:	71 81       	ldd	r23, Z+1	; 0x01
    23d8:	82 81       	ldd	r24, Z+2	; 0x02
    23da:	93 81       	ldd	r25, Z+3	; 0x03
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	f8 01       	movw	r30, r16
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
    23ea:	de 01       	movw	r26, r28
    23ec:	ab 5a       	subi	r26, 0xAB	; 171
    23ee:	bf 4f       	sbci	r27, 0xFF	; 255
    23f0:	fe 01       	movw	r30, r28
    23f2:	e7 5a       	subi	r30, 0xA7	; 167
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 81       	ld	r24, Z
    23f8:	91 81       	ldd	r25, Z+1	; 0x01
    23fa:	8d 93       	st	X+, r24
    23fc:	9c 93       	st	X, r25
    23fe:	fe 01       	movw	r30, r28
    2400:	eb 5a       	subi	r30, 0xAB	; 171
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <LCD_sendCommand+0x184>
    240c:	fe 01       	movw	r30, r28
    240e:	eb 5a       	subi	r30, 0xAB	; 171
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2416:	80 e0       	ldi	r24, 0x00	; 0
    2418:	65 e0       	ldi	r22, 0x05	; 5
    241a:	41 e0       	ldi	r20, 0x01	; 1
    241c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    2420:	fe 01       	movw	r30, r28
    2422:	ef 5a       	subi	r30, 0xAF	; 175
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	a0 e8       	ldi	r26, 0x80	; 128
    242c:	bf e3       	ldi	r27, 0x3F	; 63
    242e:	80 83       	st	Z, r24
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	a2 83       	std	Z+2, r26	; 0x02
    2434:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2436:	8e 01       	movw	r16, r28
    2438:	03 5b       	subi	r16, 0xB3	; 179
    243a:	1f 4f       	sbci	r17, 0xFF	; 255
    243c:	fe 01       	movw	r30, r28
    243e:	ef 5a       	subi	r30, 0xAF	; 175
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	60 81       	ld	r22, Z
    2444:	71 81       	ldd	r23, Z+1	; 0x01
    2446:	82 81       	ldd	r24, Z+2	; 0x02
    2448:	93 81       	ldd	r25, Z+3	; 0x03
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a ef       	ldi	r20, 0xFA	; 250
    2450:	54 e4       	ldi	r21, 0x44	; 68
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	f8 01       	movw	r30, r16
    245c:	80 83       	st	Z, r24
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	a2 83       	std	Z+2, r26	; 0x02
    2462:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2464:	fe 01       	movw	r30, r28
    2466:	e3 5b       	subi	r30, 0xB3	; 179
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	60 81       	ld	r22, Z
    246c:	71 81       	ldd	r23, Z+1	; 0x01
    246e:	82 81       	ldd	r24, Z+2	; 0x02
    2470:	93 81       	ldd	r25, Z+3	; 0x03
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e8       	ldi	r20, 0x80	; 128
    2478:	5f e3       	ldi	r21, 0x3F	; 63
    247a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247e:	88 23       	and	r24, r24
    2480:	44 f4       	brge	.+16     	; 0x2492 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2482:	fe 01       	movw	r30, r28
    2484:	e5 5b       	subi	r30, 0xB5	; 181
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	80 83       	st	Z, r24
    2490:	64 c0       	rjmp	.+200    	; 0x255a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2492:	fe 01       	movw	r30, r28
    2494:	e3 5b       	subi	r30, 0xB3	; 179
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	60 81       	ld	r22, Z
    249a:	71 81       	ldd	r23, Z+1	; 0x01
    249c:	82 81       	ldd	r24, Z+2	; 0x02
    249e:	93 81       	ldd	r25, Z+3	; 0x03
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	3f ef       	ldi	r19, 0xFF	; 255
    24a4:	4f e7       	ldi	r20, 0x7F	; 127
    24a6:	57 e4       	ldi	r21, 0x47	; 71
    24a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ac:	18 16       	cp	r1, r24
    24ae:	0c f0       	brlt	.+2      	; 0x24b2 <LCD_sendCommand+0x22e>
    24b0:	43 c0       	rjmp	.+134    	; 0x2538 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	fe 01       	movw	r30, r28
    24b4:	ef 5a       	subi	r30, 0xAF	; 175
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8e 01       	movw	r16, r28
    24d2:	05 5b       	subi	r16, 0xB5	; 181
    24d4:	1f 4f       	sbci	r17, 0xFF	; 255
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	f8 01       	movw	r30, r16
    24e4:	91 83       	std	Z+1, r25	; 0x01
    24e6:	80 83       	st	Z, r24
    24e8:	1f c0       	rjmp	.+62     	; 0x2528 <LCD_sendCommand+0x2a4>
    24ea:	fe 01       	movw	r30, r28
    24ec:	e7 5b       	subi	r30, 0xB7	; 183
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	88 ec       	ldi	r24, 0xC8	; 200
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	91 83       	std	Z+1, r25	; 0x01
    24f6:	80 83       	st	Z, r24
    24f8:	fe 01       	movw	r30, r28
    24fa:	e7 5b       	subi	r30, 0xB7	; 183
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	80 81       	ld	r24, Z
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_sendCommand+0x27e>
    2506:	fe 01       	movw	r30, r28
    2508:	e7 5b       	subi	r30, 0xB7	; 183
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2510:	de 01       	movw	r26, r28
    2512:	a5 5b       	subi	r26, 0xB5	; 181
    2514:	bf 4f       	sbci	r27, 0xFF	; 255
    2516:	fe 01       	movw	r30, r28
    2518:	e5 5b       	subi	r30, 0xB5	; 181
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 81       	ld	r24, Z
    251e:	91 81       	ldd	r25, Z+1	; 0x01
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	11 96       	adiw	r26, 0x01	; 1
    2524:	9c 93       	st	X, r25
    2526:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2528:	fe 01       	movw	r30, r28
    252a:	e5 5b       	subi	r30, 0xB5	; 181
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	00 97       	sbiw	r24, 0x00	; 0
    2534:	d1 f6       	brne	.-76     	; 0x24ea <LCD_sendCommand+0x266>
    2536:	27 c0       	rjmp	.+78     	; 0x2586 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2538:	8e 01       	movw	r16, r28
    253a:	05 5b       	subi	r16, 0xB5	; 181
    253c:	1f 4f       	sbci	r17, 0xFF	; 255
    253e:	fe 01       	movw	r30, r28
    2540:	e3 5b       	subi	r30, 0xB3	; 179
    2542:	ff 4f       	sbci	r31, 0xFF	; 255
    2544:	60 81       	ld	r22, Z
    2546:	71 81       	ldd	r23, Z+1	; 0x01
    2548:	82 81       	ldd	r24, Z+2	; 0x02
    254a:	93 81       	ldd	r25, Z+3	; 0x03
    254c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	f8 01       	movw	r30, r16
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	80 83       	st	Z, r24
    255a:	de 01       	movw	r26, r28
    255c:	a9 5b       	subi	r26, 0xB9	; 185
    255e:	bf 4f       	sbci	r27, 0xFF	; 255
    2560:	fe 01       	movw	r30, r28
    2562:	e5 5b       	subi	r30, 0xB5	; 181
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
    2568:	91 81       	ldd	r25, Z+1	; 0x01
    256a:	8d 93       	st	X+, r24
    256c:	9c 93       	st	X, r25
    256e:	fe 01       	movw	r30, r28
    2570:	e9 5b       	subi	r30, 0xB9	; 185
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_sendCommand+0x2f4>
    257c:	fe 01       	movw	r30, r28
    257e:	e9 5b       	subi	r30, 0xB9	; 185
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2586:	fe 01       	movw	r30, r28
    2588:	ed 59       	subi	r30, 0x9D	; 157
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	80 71       	andi	r24, 0x10	; 16
    2594:	90 70       	andi	r25, 0x00	; 0
    2596:	95 95       	asr	r25
    2598:	87 95       	ror	r24
    259a:	95 95       	asr	r25
    259c:	87 95       	ror	r24
    259e:	95 95       	asr	r25
    25a0:	87 95       	ror	r24
    25a2:	95 95       	asr	r25
    25a4:	87 95       	ror	r24
    25a6:	98 2f       	mov	r25, r24
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	60 e0       	ldi	r22, 0x00	; 0
    25ac:	49 2f       	mov	r20, r25
    25ae:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    25b2:	fe 01       	movw	r30, r28
    25b4:	ed 59       	subi	r30, 0x9D	; 157
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	88 2f       	mov	r24, r24
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	80 72       	andi	r24, 0x20	; 32
    25c0:	90 70       	andi	r25, 0x00	; 0
    25c2:	95 95       	asr	r25
    25c4:	87 95       	ror	r24
    25c6:	95 95       	asr	r25
    25c8:	87 95       	ror	r24
    25ca:	95 95       	asr	r25
    25cc:	87 95       	ror	r24
    25ce:	95 95       	asr	r25
    25d0:	87 95       	ror	r24
    25d2:	95 95       	asr	r25
    25d4:	87 95       	ror	r24
    25d6:	98 2f       	mov	r25, r24
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	61 e0       	ldi	r22, 0x01	; 1
    25dc:	49 2f       	mov	r20, r25
    25de:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    25e2:	fe 01       	movw	r30, r28
    25e4:	ed 59       	subi	r30, 0x9D	; 157
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	88 2f       	mov	r24, r24
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	80 74       	andi	r24, 0x40	; 64
    25f0:	90 70       	andi	r25, 0x00	; 0
    25f2:	08 2e       	mov	r0, r24
    25f4:	89 2f       	mov	r24, r25
    25f6:	00 0c       	add	r0, r0
    25f8:	88 1f       	adc	r24, r24
    25fa:	99 0b       	sbc	r25, r25
    25fc:	00 0c       	add	r0, r0
    25fe:	88 1f       	adc	r24, r24
    2600:	99 1f       	adc	r25, r25
    2602:	98 2f       	mov	r25, r24
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	62 e0       	ldi	r22, 0x02	; 2
    2608:	49 2f       	mov	r20, r25
    260a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    260e:	fe 01       	movw	r30, r28
    2610:	ed 59       	subi	r30, 0x9D	; 157
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 81       	ld	r24, Z
    2616:	98 2f       	mov	r25, r24
    2618:	99 1f       	adc	r25, r25
    261a:	99 27       	eor	r25, r25
    261c:	99 1f       	adc	r25, r25
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	63 e0       	ldi	r22, 0x03	; 3
    2622:	49 2f       	mov	r20, r25
    2624:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    2628:	fe 01       	movw	r30, r28
    262a:	ed 5b       	subi	r30, 0xBD	; 189
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	a0 e8       	ldi	r26, 0x80	; 128
    2634:	bf e3       	ldi	r27, 0x3F	; 63
    2636:	80 83       	st	Z, r24
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	a2 83       	std	Z+2, r26	; 0x02
    263c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263e:	8e 01       	movw	r16, r28
    2640:	01 5c       	subi	r16, 0xC1	; 193
    2642:	1f 4f       	sbci	r17, 0xFF	; 255
    2644:	fe 01       	movw	r30, r28
    2646:	ed 5b       	subi	r30, 0xBD	; 189
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	60 81       	ld	r22, Z
    264c:	71 81       	ldd	r23, Z+1	; 0x01
    264e:	82 81       	ldd	r24, Z+2	; 0x02
    2650:	93 81       	ldd	r25, Z+3	; 0x03
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	4a ef       	ldi	r20, 0xFA	; 250
    2658:	54 e4       	ldi	r21, 0x44	; 68
    265a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265e:	dc 01       	movw	r26, r24
    2660:	cb 01       	movw	r24, r22
    2662:	f8 01       	movw	r30, r16
    2664:	80 83       	st	Z, r24
    2666:	91 83       	std	Z+1, r25	; 0x01
    2668:	a2 83       	std	Z+2, r26	; 0x02
    266a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    266c:	fe 01       	movw	r30, r28
    266e:	ff 96       	adiw	r30, 0x3f	; 63
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2684:	88 23       	and	r24, r24
    2686:	2c f4       	brge	.+10     	; 0x2692 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	9e af       	std	Y+62, r25	; 0x3e
    268e:	8d af       	std	Y+61, r24	; 0x3d
    2690:	46 c0       	rjmp	.+140    	; 0x271e <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2692:	fe 01       	movw	r30, r28
    2694:	ff 96       	adiw	r30, 0x3f	; 63
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	3f ef       	ldi	r19, 0xFF	; 255
    26a2:	4f e7       	ldi	r20, 0x7F	; 127
    26a4:	57 e4       	ldi	r21, 0x47	; 71
    26a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26aa:	18 16       	cp	r1, r24
    26ac:	64 f5       	brge	.+88     	; 0x2706 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ae:	fe 01       	movw	r30, r28
    26b0:	ed 5b       	subi	r30, 0xBD	; 189
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	60 81       	ld	r22, Z
    26b6:	71 81       	ldd	r23, Z+1	; 0x01
    26b8:	82 81       	ldd	r24, Z+2	; 0x02
    26ba:	93 81       	ldd	r25, Z+3	; 0x03
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e2       	ldi	r20, 0x20	; 32
    26c2:	51 e4       	ldi	r21, 0x41	; 65
    26c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	bc 01       	movw	r22, r24
    26ce:	cd 01       	movw	r24, r26
    26d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	9e af       	std	Y+62, r25	; 0x3e
    26da:	8d af       	std	Y+61, r24	; 0x3d
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <LCD_sendCommand+0x478>
    26de:	88 ec       	ldi	r24, 0xC8	; 200
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	9c af       	std	Y+60, r25	; 0x3c
    26e4:	8b af       	std	Y+59, r24	; 0x3b
    26e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    26e8:	9c ad       	ldd	r25, Y+60	; 0x3c
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <LCD_sendCommand+0x466>
    26ee:	9c af       	std	Y+60, r25	; 0x3c
    26f0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    26f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	9e af       	std	Y+62, r25	; 0x3e
    26fa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    26fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	69 f7       	brne	.-38     	; 0x26de <LCD_sendCommand+0x45a>
    2704:	16 c0       	rjmp	.+44     	; 0x2732 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2706:	fe 01       	movw	r30, r28
    2708:	ff 96       	adiw	r30, 0x3f	; 63
    270a:	60 81       	ld	r22, Z
    270c:	71 81       	ldd	r23, Z+1	; 0x01
    270e:	82 81       	ldd	r24, Z+2	; 0x02
    2710:	93 81       	ldd	r25, Z+3	; 0x03
    2712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	9e af       	std	Y+62, r25	; 0x3e
    271c:	8d af       	std	Y+61, r24	; 0x3d
    271e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2720:	9e ad       	ldd	r25, Y+62	; 0x3e
    2722:	9a af       	std	Y+58, r25	; 0x3a
    2724:	89 af       	std	Y+57, r24	; 0x39
    2726:	89 ad       	ldd	r24, Y+57	; 0x39
    2728:	9a ad       	ldd	r25, Y+58	; 0x3a
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <LCD_sendCommand+0x4a6>
    272e:	9a af       	std	Y+58, r25	; 0x3a
    2730:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	65 e0       	ldi	r22, 0x05	; 5
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a0 e8       	ldi	r26, 0x80	; 128
    2742:	bf e3       	ldi	r27, 0x3F	; 63
    2744:	8d ab       	std	Y+53, r24	; 0x35
    2746:	9e ab       	std	Y+54, r25	; 0x36
    2748:	af ab       	std	Y+55, r26	; 0x37
    274a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274c:	6d a9       	ldd	r22, Y+53	; 0x35
    274e:	7e a9       	ldd	r23, Y+54	; 0x36
    2750:	8f a9       	ldd	r24, Y+55	; 0x37
    2752:	98 ad       	ldd	r25, Y+56	; 0x38
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	4a ef       	ldi	r20, 0xFA	; 250
    275a:	54 e4       	ldi	r21, 0x44	; 68
    275c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	89 ab       	std	Y+49, r24	; 0x31
    2766:	9a ab       	std	Y+50, r25	; 0x32
    2768:	ab ab       	std	Y+51, r26	; 0x33
    276a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    276c:	69 a9       	ldd	r22, Y+49	; 0x31
    276e:	7a a9       	ldd	r23, Y+50	; 0x32
    2770:	8b a9       	ldd	r24, Y+51	; 0x33
    2772:	9c a9       	ldd	r25, Y+52	; 0x34
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e8       	ldi	r20, 0x80	; 128
    277a:	5f e3       	ldi	r21, 0x3F	; 63
    277c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2780:	88 23       	and	r24, r24
    2782:	2c f4       	brge	.+10     	; 0x278e <LCD_sendCommand+0x50a>
		__ticks = 1;
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	98 ab       	std	Y+48, r25	; 0x30
    278a:	8f a7       	std	Y+47, r24	; 0x2f
    278c:	3f c0       	rjmp	.+126    	; 0x280c <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    278e:	69 a9       	ldd	r22, Y+49	; 0x31
    2790:	7a a9       	ldd	r23, Y+50	; 0x32
    2792:	8b a9       	ldd	r24, Y+51	; 0x33
    2794:	9c a9       	ldd	r25, Y+52	; 0x34
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	3f ef       	ldi	r19, 0xFF	; 255
    279a:	4f e7       	ldi	r20, 0x7F	; 127
    279c:	57 e4       	ldi	r21, 0x47	; 71
    279e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a2:	18 16       	cp	r1, r24
    27a4:	4c f5       	brge	.+82     	; 0x27f8 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a6:	6d a9       	ldd	r22, Y+53	; 0x35
    27a8:	7e a9       	ldd	r23, Y+54	; 0x36
    27aa:	8f a9       	ldd	r24, Y+55	; 0x37
    27ac:	98 ad       	ldd	r25, Y+56	; 0x38
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e2       	ldi	r20, 0x20	; 32
    27b4:	51 e4       	ldi	r21, 0x41	; 65
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	98 ab       	std	Y+48, r25	; 0x30
    27cc:	8f a7       	std	Y+47, r24	; 0x2f
    27ce:	0f c0       	rjmp	.+30     	; 0x27ee <LCD_sendCommand+0x56a>
    27d0:	88 ec       	ldi	r24, 0xC8	; 200
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9e a7       	std	Y+46, r25	; 0x2e
    27d6:	8d a7       	std	Y+45, r24	; 0x2d
    27d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    27da:	9e a5       	ldd	r25, Y+46	; 0x2e
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <LCD_sendCommand+0x558>
    27e0:	9e a7       	std	Y+46, r25	; 0x2e
    27e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e6:	98 a9       	ldd	r25, Y+48	; 0x30
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	98 ab       	std	Y+48, r25	; 0x30
    27ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f0:	98 a9       	ldd	r25, Y+48	; 0x30
    27f2:	00 97       	sbiw	r24, 0x00	; 0
    27f4:	69 f7       	brne	.-38     	; 0x27d0 <LCD_sendCommand+0x54c>
    27f6:	14 c0       	rjmp	.+40     	; 0x2820 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f8:	69 a9       	ldd	r22, Y+49	; 0x31
    27fa:	7a a9       	ldd	r23, Y+50	; 0x32
    27fc:	8b a9       	ldd	r24, Y+51	; 0x33
    27fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	98 ab       	std	Y+48, r25	; 0x30
    280a:	8f a7       	std	Y+47, r24	; 0x2f
    280c:	8f a5       	ldd	r24, Y+47	; 0x2f
    280e:	98 a9       	ldd	r25, Y+48	; 0x30
    2810:	9c a7       	std	Y+44, r25	; 0x2c
    2812:	8b a7       	std	Y+43, r24	; 0x2b
    2814:	8b a5       	ldd	r24, Y+43	; 0x2b
    2816:	9c a5       	ldd	r25, Y+44	; 0x2c
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <LCD_sendCommand+0x594>
    281c:	9c a7       	std	Y+44, r25	; 0x2c
    281e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	65 e0       	ldi	r22, 0x05	; 5
    2824:	41 e0       	ldi	r20, 0x01	; 1
    2826:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    282a:	80 e0       	ldi	r24, 0x00	; 0
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	a0 e8       	ldi	r26, 0x80	; 128
    2830:	bf e3       	ldi	r27, 0x3F	; 63
    2832:	8f a3       	std	Y+39, r24	; 0x27
    2834:	98 a7       	std	Y+40, r25	; 0x28
    2836:	a9 a7       	std	Y+41, r26	; 0x29
    2838:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283a:	6f a1       	ldd	r22, Y+39	; 0x27
    283c:	78 a5       	ldd	r23, Y+40	; 0x28
    283e:	89 a5       	ldd	r24, Y+41	; 0x29
    2840:	9a a5       	ldd	r25, Y+42	; 0x2a
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	4a ef       	ldi	r20, 0xFA	; 250
    2848:	54 e4       	ldi	r21, 0x44	; 68
    284a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	8b a3       	std	Y+35, r24	; 0x23
    2854:	9c a3       	std	Y+36, r25	; 0x24
    2856:	ad a3       	std	Y+37, r26	; 0x25
    2858:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    285a:	6b a1       	ldd	r22, Y+35	; 0x23
    285c:	7c a1       	ldd	r23, Y+36	; 0x24
    285e:	8d a1       	ldd	r24, Y+37	; 0x25
    2860:	9e a1       	ldd	r25, Y+38	; 0x26
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e8       	ldi	r20, 0x80	; 128
    2868:	5f e3       	ldi	r21, 0x3F	; 63
    286a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286e:	88 23       	and	r24, r24
    2870:	2c f4       	brge	.+10     	; 0x287c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	9a a3       	std	Y+34, r25	; 0x22
    2878:	89 a3       	std	Y+33, r24	; 0x21
    287a:	3f c0       	rjmp	.+126    	; 0x28fa <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    287c:	6b a1       	ldd	r22, Y+35	; 0x23
    287e:	7c a1       	ldd	r23, Y+36	; 0x24
    2880:	8d a1       	ldd	r24, Y+37	; 0x25
    2882:	9e a1       	ldd	r25, Y+38	; 0x26
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	3f ef       	ldi	r19, 0xFF	; 255
    2888:	4f e7       	ldi	r20, 0x7F	; 127
    288a:	57 e4       	ldi	r21, 0x47	; 71
    288c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2890:	18 16       	cp	r1, r24
    2892:	4c f5       	brge	.+82     	; 0x28e6 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2894:	6f a1       	ldd	r22, Y+39	; 0x27
    2896:	78 a5       	ldd	r23, Y+40	; 0x28
    2898:	89 a5       	ldd	r24, Y+41	; 0x29
    289a:	9a a5       	ldd	r25, Y+42	; 0x2a
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e2       	ldi	r20, 0x20	; 32
    28a2:	51 e4       	ldi	r21, 0x41	; 65
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	bc 01       	movw	r22, r24
    28ae:	cd 01       	movw	r24, r26
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9a a3       	std	Y+34, r25	; 0x22
    28ba:	89 a3       	std	Y+33, r24	; 0x21
    28bc:	0f c0       	rjmp	.+30     	; 0x28dc <LCD_sendCommand+0x658>
    28be:	88 ec       	ldi	r24, 0xC8	; 200
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	98 a3       	std	Y+32, r25	; 0x20
    28c4:	8f 8f       	std	Y+31, r24	; 0x1f
    28c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28c8:	98 a1       	ldd	r25, Y+32	; 0x20
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <LCD_sendCommand+0x646>
    28ce:	98 a3       	std	Y+32, r25	; 0x20
    28d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d2:	89 a1       	ldd	r24, Y+33	; 0x21
    28d4:	9a a1       	ldd	r25, Y+34	; 0x22
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	9a a3       	std	Y+34, r25	; 0x22
    28da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28dc:	89 a1       	ldd	r24, Y+33	; 0x21
    28de:	9a a1       	ldd	r25, Y+34	; 0x22
    28e0:	00 97       	sbiw	r24, 0x00	; 0
    28e2:	69 f7       	brne	.-38     	; 0x28be <LCD_sendCommand+0x63a>
    28e4:	14 c0       	rjmp	.+40     	; 0x290e <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e6:	6b a1       	ldd	r22, Y+35	; 0x23
    28e8:	7c a1       	ldd	r23, Y+36	; 0x24
    28ea:	8d a1       	ldd	r24, Y+37	; 0x25
    28ec:	9e a1       	ldd	r25, Y+38	; 0x26
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	9a a3       	std	Y+34, r25	; 0x22
    28f8:	89 a3       	std	Y+33, r24	; 0x21
    28fa:	89 a1       	ldd	r24, Y+33	; 0x21
    28fc:	9a a1       	ldd	r25, Y+34	; 0x22
    28fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2900:	8d 8f       	std	Y+29, r24	; 0x1d
    2902:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2904:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2906:	01 97       	sbiw	r24, 0x01	; 1
    2908:	f1 f7       	brne	.-4      	; 0x2906 <LCD_sendCommand+0x682>
    290a:	9e 8f       	std	Y+30, r25	; 0x1e
    290c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    290e:	fe 01       	movw	r30, r28
    2910:	ed 59       	subi	r30, 0x9D	; 157
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 81       	ld	r24, Z
    2916:	98 2f       	mov	r25, r24
    2918:	91 70       	andi	r25, 0x01	; 1
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	49 2f       	mov	r20, r25
    2920:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2924:	fe 01       	movw	r30, r28
    2926:	ed 59       	subi	r30, 0x9D	; 157
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	80 81       	ld	r24, Z
    292c:	88 2f       	mov	r24, r24
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	82 70       	andi	r24, 0x02	; 2
    2932:	90 70       	andi	r25, 0x00	; 0
    2934:	95 95       	asr	r25
    2936:	87 95       	ror	r24
    2938:	98 2f       	mov	r25, r24
    293a:	80 e0       	ldi	r24, 0x00	; 0
    293c:	61 e0       	ldi	r22, 0x01	; 1
    293e:	49 2f       	mov	r20, r25
    2940:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2944:	fe 01       	movw	r30, r28
    2946:	ed 59       	subi	r30, 0x9D	; 157
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	88 2f       	mov	r24, r24
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	84 70       	andi	r24, 0x04	; 4
    2952:	90 70       	andi	r25, 0x00	; 0
    2954:	95 95       	asr	r25
    2956:	87 95       	ror	r24
    2958:	95 95       	asr	r25
    295a:	87 95       	ror	r24
    295c:	98 2f       	mov	r25, r24
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	62 e0       	ldi	r22, 0x02	; 2
    2962:	49 2f       	mov	r20, r25
    2964:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2968:	fe 01       	movw	r30, r28
    296a:	ed 59       	subi	r30, 0x9D	; 157
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	88 2f       	mov	r24, r24
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	88 70       	andi	r24, 0x08	; 8
    2976:	90 70       	andi	r25, 0x00	; 0
    2978:	95 95       	asr	r25
    297a:	87 95       	ror	r24
    297c:	95 95       	asr	r25
    297e:	87 95       	ror	r24
    2980:	95 95       	asr	r25
    2982:	87 95       	ror	r24
    2984:	98 2f       	mov	r25, r24
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	63 e0       	ldi	r22, 0x03	; 3
    298a:	49 2f       	mov	r20, r25
    298c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	a0 e8       	ldi	r26, 0x80	; 128
    2996:	bf e3       	ldi	r27, 0x3F	; 63
    2998:	89 8f       	std	Y+25, r24	; 0x19
    299a:	9a 8f       	std	Y+26, r25	; 0x1a
    299c:	ab 8f       	std	Y+27, r26	; 0x1b
    299e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a0:	69 8d       	ldd	r22, Y+25	; 0x19
    29a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	4a ef       	ldi	r20, 0xFA	; 250
    29ae:	54 e4       	ldi	r21, 0x44	; 68
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	8d 8b       	std	Y+21, r24	; 0x15
    29ba:	9e 8b       	std	Y+22, r25	; 0x16
    29bc:	af 8b       	std	Y+23, r26	; 0x17
    29be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29c0:	6d 89       	ldd	r22, Y+21	; 0x15
    29c2:	7e 89       	ldd	r23, Y+22	; 0x16
    29c4:	8f 89       	ldd	r24, Y+23	; 0x17
    29c6:	98 8d       	ldd	r25, Y+24	; 0x18
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e8       	ldi	r20, 0x80	; 128
    29ce:	5f e3       	ldi	r21, 0x3F	; 63
    29d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	2c f4       	brge	.+10     	; 0x29e2 <LCD_sendCommand+0x75e>
		__ticks = 1;
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	9c 8b       	std	Y+20, r25	; 0x14
    29de:	8b 8b       	std	Y+19, r24	; 0x13
    29e0:	3f c0       	rjmp	.+126    	; 0x2a60 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    29e2:	6d 89       	ldd	r22, Y+21	; 0x15
    29e4:	7e 89       	ldd	r23, Y+22	; 0x16
    29e6:	8f 89       	ldd	r24, Y+23	; 0x17
    29e8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	3f ef       	ldi	r19, 0xFF	; 255
    29ee:	4f e7       	ldi	r20, 0x7F	; 127
    29f0:	57 e4       	ldi	r21, 0x47	; 71
    29f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f6:	18 16       	cp	r1, r24
    29f8:	4c f5       	brge	.+82     	; 0x2a4c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29fa:	69 8d       	ldd	r22, Y+25	; 0x19
    29fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e2       	ldi	r20, 0x20	; 32
    2a08:	51 e4       	ldi	r21, 0x41	; 65
    2a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	9c 8b       	std	Y+20, r25	; 0x14
    2a20:	8b 8b       	std	Y+19, r24	; 0x13
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <LCD_sendCommand+0x7be>
    2a24:	88 ec       	ldi	r24, 0xC8	; 200
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9a 8b       	std	Y+18, r25	; 0x12
    2a2a:	89 8b       	std	Y+17, r24	; 0x11
    2a2c:	89 89       	ldd	r24, Y+17	; 0x11
    2a2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a30:	01 97       	sbiw	r24, 0x01	; 1
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <LCD_sendCommand+0x7ac>
    2a34:	9a 8b       	std	Y+18, r25	; 0x12
    2a36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a38:	8b 89       	ldd	r24, Y+19	; 0x13
    2a3a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	9c 8b       	std	Y+20, r25	; 0x14
    2a40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a42:	8b 89       	ldd	r24, Y+19	; 0x13
    2a44:	9c 89       	ldd	r25, Y+20	; 0x14
    2a46:	00 97       	sbiw	r24, 0x00	; 0
    2a48:	69 f7       	brne	.-38     	; 0x2a24 <LCD_sendCommand+0x7a0>
    2a4a:	14 c0       	rjmp	.+40     	; 0x2a74 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a50:	8f 89       	ldd	r24, Y+23	; 0x17
    2a52:	98 8d       	ldd	r25, Y+24	; 0x18
    2a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	9c 8b       	std	Y+20, r25	; 0x14
    2a5e:	8b 8b       	std	Y+19, r24	; 0x13
    2a60:	8b 89       	ldd	r24, Y+19	; 0x13
    2a62:	9c 89       	ldd	r25, Y+20	; 0x14
    2a64:	98 8b       	std	Y+16, r25	; 0x10
    2a66:	8f 87       	std	Y+15, r24	; 0x0f
    2a68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a6a:	98 89       	ldd	r25, Y+16	; 0x10
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <LCD_sendCommand+0x7e8>
    2a70:	98 8b       	std	Y+16, r25	; 0x10
    2a72:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	65 e0       	ldi	r22, 0x05	; 5
    2a78:	40 e0       	ldi	r20, 0x00	; 0
    2a7a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	a0 e8       	ldi	r26, 0x80	; 128
    2a84:	bf e3       	ldi	r27, 0x3F	; 63
    2a86:	8b 87       	std	Y+11, r24	; 0x0b
    2a88:	9c 87       	std	Y+12, r25	; 0x0c
    2a8a:	ad 87       	std	Y+13, r26	; 0x0d
    2a8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4a ef       	ldi	r20, 0xFA	; 250
    2a9c:	54 e4       	ldi	r21, 0x44	; 68
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	8f 83       	std	Y+7, r24	; 0x07
    2aa8:	98 87       	std	Y+8, r25	; 0x08
    2aaa:	a9 87       	std	Y+9, r26	; 0x09
    2aac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2aae:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab0:	78 85       	ldd	r23, Y+8	; 0x08
    2ab2:	89 85       	ldd	r24, Y+9	; 0x09
    2ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	40 e8       	ldi	r20, 0x80	; 128
    2abc:	5f e3       	ldi	r21, 0x3F	; 63
    2abe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac2:	88 23       	and	r24, r24
    2ac4:	2c f4       	brge	.+10     	; 0x2ad0 <LCD_sendCommand+0x84c>
		__ticks = 1;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9e 83       	std	Y+6, r25	; 0x06
    2acc:	8d 83       	std	Y+5, r24	; 0x05
    2ace:	3f c0       	rjmp	.+126    	; 0x2b4e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad2:	78 85       	ldd	r23, Y+8	; 0x08
    2ad4:	89 85       	ldd	r24, Y+9	; 0x09
    2ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad8:	20 e0       	ldi	r18, 0x00	; 0
    2ada:	3f ef       	ldi	r19, 0xFF	; 255
    2adc:	4f e7       	ldi	r20, 0x7F	; 127
    2ade:	57 e4       	ldi	r21, 0x47	; 71
    2ae0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae4:	18 16       	cp	r1, r24
    2ae6:	4c f5       	brge	.+82     	; 0x2b3a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	40 e2       	ldi	r20, 0x20	; 32
    2af6:	51 e4       	ldi	r21, 0x41	; 65
    2af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	9e 83       	std	Y+6, r25	; 0x06
    2b0e:	8d 83       	std	Y+5, r24	; 0x05
    2b10:	0f c0       	rjmp	.+30     	; 0x2b30 <LCD_sendCommand+0x8ac>
    2b12:	88 ec       	ldi	r24, 0xC8	; 200
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	9c 83       	std	Y+4, r25	; 0x04
    2b18:	8b 83       	std	Y+3, r24	; 0x03
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <LCD_sendCommand+0x89a>
    2b22:	9c 83       	std	Y+4, r25	; 0x04
    2b24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b26:	8d 81       	ldd	r24, Y+5	; 0x05
    2b28:	9e 81       	ldd	r25, Y+6	; 0x06
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	9e 83       	std	Y+6, r25	; 0x06
    2b2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b30:	8d 81       	ldd	r24, Y+5	; 0x05
    2b32:	9e 81       	ldd	r25, Y+6	; 0x06
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	69 f7       	brne	.-38     	; 0x2b12 <LCD_sendCommand+0x88e>
    2b38:	14 c0       	rjmp	.+40     	; 0x2b62 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3c:	78 85       	ldd	r23, Y+8	; 0x08
    2b3e:	89 85       	ldd	r24, Y+9	; 0x09
    2b40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b46:	dc 01       	movw	r26, r24
    2b48:	cb 01       	movw	r24, r22
    2b4a:	9e 83       	std	Y+6, r25	; 0x06
    2b4c:	8d 83       	std	Y+5, r24	; 0x05
    2b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b50:	9e 81       	ldd	r25, Y+6	; 0x06
    2b52:	9a 83       	std	Y+2, r25	; 0x02
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	9a 81       	ldd	r25, Y+2	; 0x02
    2b5a:	01 97       	sbiw	r24, 0x01	; 1
    2b5c:	f1 f7       	brne	.-4      	; 0x2b5a <LCD_sendCommand+0x8d6>
    2b5e:	9a 83       	std	Y+2, r25	; 0x02
    2b60:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b62:	cd 59       	subi	r28, 0x9D	; 157
    2b64:	df 4f       	sbci	r29, 0xFF	; 255
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	1f 91       	pop	r17
    2b76:	0f 91       	pop	r16
    2b78:	08 95       	ret

00002b7a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2b7a:	0f 93       	push	r16
    2b7c:	1f 93       	push	r17
    2b7e:	df 93       	push	r29
    2b80:	cf 93       	push	r28
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	c3 56       	subi	r28, 0x63	; 99
    2b88:	d0 40       	sbci	r29, 0x00	; 0
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
    2b94:	fe 01       	movw	r30, r28
    2b96:	ed 59       	subi	r30, 0x9D	; 157
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	64 e0       	ldi	r22, 0x04	; 4
    2ba0:	41 e0       	ldi	r20, 0x01	; 1
    2ba2:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e1 5a       	subi	r30, 0xA1	; 161
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	a0 e8       	ldi	r26, 0x80	; 128
    2bb2:	bf e3       	ldi	r27, 0x3F	; 63
    2bb4:	80 83       	st	Z, r24
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	a2 83       	std	Z+2, r26	; 0x02
    2bba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbc:	8e 01       	movw	r16, r28
    2bbe:	05 5a       	subi	r16, 0xA5	; 165
    2bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e1 5a       	subi	r30, 0xA1	; 161
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	60 81       	ld	r22, Z
    2bca:	71 81       	ldd	r23, Z+1	; 0x01
    2bcc:	82 81       	ldd	r24, Z+2	; 0x02
    2bce:	93 81       	ldd	r25, Z+3	; 0x03
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	4a ef       	ldi	r20, 0xFA	; 250
    2bd6:	54 e4       	ldi	r21, 0x44	; 68
    2bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	f8 01       	movw	r30, r16
    2be2:	80 83       	st	Z, r24
    2be4:	91 83       	std	Z+1, r25	; 0x01
    2be6:	a2 83       	std	Z+2, r26	; 0x02
    2be8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bea:	fe 01       	movw	r30, r28
    2bec:	e5 5a       	subi	r30, 0xA5	; 165
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	20 e0       	ldi	r18, 0x00	; 0
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	40 e8       	ldi	r20, 0x80	; 128
    2bfe:	5f e3       	ldi	r21, 0x3F	; 63
    2c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c04:	88 23       	and	r24, r24
    2c06:	44 f4       	brge	.+16     	; 0x2c18 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e7 5a       	subi	r30, 0xA7	; 167
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	91 83       	std	Z+1, r25	; 0x01
    2c14:	80 83       	st	Z, r24
    2c16:	64 c0       	rjmp	.+200    	; 0x2ce0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2c18:	fe 01       	movw	r30, r28
    2c1a:	e5 5a       	subi	r30, 0xA5	; 165
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	60 81       	ld	r22, Z
    2c20:	71 81       	ldd	r23, Z+1	; 0x01
    2c22:	82 81       	ldd	r24, Z+2	; 0x02
    2c24:	93 81       	ldd	r25, Z+3	; 0x03
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	57 e4       	ldi	r21, 0x47	; 71
    2c2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	0c f0       	brlt	.+2      	; 0x2c38 <LCD_displayCharacter+0xbe>
    2c36:	43 c0       	rjmp	.+134    	; 0x2cbe <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e1 5a       	subi	r30, 0xA1	; 161
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	60 81       	ld	r22, Z
    2c40:	71 81       	ldd	r23, Z+1	; 0x01
    2c42:	82 81       	ldd	r24, Z+2	; 0x02
    2c44:	93 81       	ldd	r25, Z+3	; 0x03
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	51 e4       	ldi	r21, 0x41	; 65
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	8e 01       	movw	r16, r28
    2c58:	07 5a       	subi	r16, 0xA7	; 167
    2c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5c:	bc 01       	movw	r22, r24
    2c5e:	cd 01       	movw	r24, r26
    2c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c64:	dc 01       	movw	r26, r24
    2c66:	cb 01       	movw	r24, r22
    2c68:	f8 01       	movw	r30, r16
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	80 83       	st	Z, r24
    2c6e:	1f c0       	rjmp	.+62     	; 0x2cae <LCD_displayCharacter+0x134>
    2c70:	fe 01       	movw	r30, r28
    2c72:	e9 5a       	subi	r30, 0xA9	; 169
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	88 ec       	ldi	r24, 0xC8	; 200
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	91 83       	std	Z+1, r25	; 0x01
    2c7c:	80 83       	st	Z, r24
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e9 5a       	subi	r30, 0xA9	; 169
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	80 81       	ld	r24, Z
    2c86:	91 81       	ldd	r25, Z+1	; 0x01
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	f1 f7       	brne	.-4      	; 0x2c88 <LCD_displayCharacter+0x10e>
    2c8c:	fe 01       	movw	r30, r28
    2c8e:	e9 5a       	subi	r30, 0xA9	; 169
    2c90:	ff 4f       	sbci	r31, 0xFF	; 255
    2c92:	91 83       	std	Z+1, r25	; 0x01
    2c94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c96:	de 01       	movw	r26, r28
    2c98:	a7 5a       	subi	r26, 0xA7	; 167
    2c9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e7 5a       	subi	r30, 0xA7	; 167
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	80 81       	ld	r24, Z
    2ca4:	91 81       	ldd	r25, Z+1	; 0x01
    2ca6:	01 97       	sbiw	r24, 0x01	; 1
    2ca8:	11 96       	adiw	r26, 0x01	; 1
    2caa:	9c 93       	st	X, r25
    2cac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e7 5a       	subi	r30, 0xA7	; 167
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	d1 f6       	brne	.-76     	; 0x2c70 <LCD_displayCharacter+0xf6>
    2cbc:	27 c0       	rjmp	.+78     	; 0x2d0c <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbe:	8e 01       	movw	r16, r28
    2cc0:	07 5a       	subi	r16, 0xA7	; 167
    2cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	e5 5a       	subi	r30, 0xA5	; 165
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	60 81       	ld	r22, Z
    2ccc:	71 81       	ldd	r23, Z+1	; 0x01
    2cce:	82 81       	ldd	r24, Z+2	; 0x02
    2cd0:	93 81       	ldd	r25, Z+3	; 0x03
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	f8 01       	movw	r30, r16
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	80 83       	st	Z, r24
    2ce0:	de 01       	movw	r26, r28
    2ce2:	ab 5a       	subi	r26, 0xAB	; 171
    2ce4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	e7 5a       	subi	r30, 0xA7	; 167
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	80 81       	ld	r24, Z
    2cee:	91 81       	ldd	r25, Z+1	; 0x01
    2cf0:	8d 93       	st	X+, r24
    2cf2:	9c 93       	st	X, r25
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	eb 5a       	subi	r30, 0xAB	; 171
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <LCD_displayCharacter+0x184>
    2d02:	fe 01       	movw	r30, r28
    2d04:	eb 5a       	subi	r30, 0xAB	; 171
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	65 e0       	ldi	r22, 0x05	; 5
    2d10:	41 e0       	ldi	r20, 0x01	; 1
    2d12:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    2d16:	fe 01       	movw	r30, r28
    2d18:	ef 5a       	subi	r30, 0xAF	; 175
    2d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	a0 e8       	ldi	r26, 0x80	; 128
    2d22:	bf e3       	ldi	r27, 0x3F	; 63
    2d24:	80 83       	st	Z, r24
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	a2 83       	std	Z+2, r26	; 0x02
    2d2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2c:	8e 01       	movw	r16, r28
    2d2e:	03 5b       	subi	r16, 0xB3	; 179
    2d30:	1f 4f       	sbci	r17, 0xFF	; 255
    2d32:	fe 01       	movw	r30, r28
    2d34:	ef 5a       	subi	r30, 0xAF	; 175
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	60 81       	ld	r22, Z
    2d3a:	71 81       	ldd	r23, Z+1	; 0x01
    2d3c:	82 81       	ldd	r24, Z+2	; 0x02
    2d3e:	93 81       	ldd	r25, Z+3	; 0x03
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	4a ef       	ldi	r20, 0xFA	; 250
    2d46:	54 e4       	ldi	r21, 0x44	; 68
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	f8 01       	movw	r30, r16
    2d52:	80 83       	st	Z, r24
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	a2 83       	std	Z+2, r26	; 0x02
    2d58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e3 5b       	subi	r30, 0xB3	; 179
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	60 81       	ld	r22, Z
    2d62:	71 81       	ldd	r23, Z+1	; 0x01
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e8       	ldi	r20, 0x80	; 128
    2d6e:	5f e3       	ldi	r21, 0x3F	; 63
    2d70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d74:	88 23       	and	r24, r24
    2d76:	44 f4       	brge	.+16     	; 0x2d88 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2d78:	fe 01       	movw	r30, r28
    2d7a:	e5 5b       	subi	r30, 0xB5	; 181
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	91 83       	std	Z+1, r25	; 0x01
    2d84:	80 83       	st	Z, r24
    2d86:	64 c0       	rjmp	.+200    	; 0x2e50 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e3 5b       	subi	r30, 0xB3	; 179
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	60 81       	ld	r22, Z
    2d90:	71 81       	ldd	r23, Z+1	; 0x01
    2d92:	82 81       	ldd	r24, Z+2	; 0x02
    2d94:	93 81       	ldd	r25, Z+3	; 0x03
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	3f ef       	ldi	r19, 0xFF	; 255
    2d9a:	4f e7       	ldi	r20, 0x7F	; 127
    2d9c:	57 e4       	ldi	r21, 0x47	; 71
    2d9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2da2:	18 16       	cp	r1, r24
    2da4:	0c f0       	brlt	.+2      	; 0x2da8 <LCD_displayCharacter+0x22e>
    2da6:	43 c0       	rjmp	.+134    	; 0x2e2e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da8:	fe 01       	movw	r30, r28
    2daa:	ef 5a       	subi	r30, 0xAF	; 175
    2dac:	ff 4f       	sbci	r31, 0xFF	; 255
    2dae:	60 81       	ld	r22, Z
    2db0:	71 81       	ldd	r23, Z+1	; 0x01
    2db2:	82 81       	ldd	r24, Z+2	; 0x02
    2db4:	93 81       	ldd	r25, Z+3	; 0x03
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e2       	ldi	r20, 0x20	; 32
    2dbc:	51 e4       	ldi	r21, 0x41	; 65
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	8e 01       	movw	r16, r28
    2dc8:	05 5b       	subi	r16, 0xB5	; 181
    2dca:	1f 4f       	sbci	r17, 0xFF	; 255
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	f8 01       	movw	r30, r16
    2dda:	91 83       	std	Z+1, r25	; 0x01
    2ddc:	80 83       	st	Z, r24
    2dde:	1f c0       	rjmp	.+62     	; 0x2e1e <LCD_displayCharacter+0x2a4>
    2de0:	fe 01       	movw	r30, r28
    2de2:	e7 5b       	subi	r30, 0xB7	; 183
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	88 ec       	ldi	r24, 0xC8	; 200
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	91 83       	std	Z+1, r25	; 0x01
    2dec:	80 83       	st	Z, r24
    2dee:	fe 01       	movw	r30, r28
    2df0:	e7 5b       	subi	r30, 0xB7	; 183
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	80 81       	ld	r24, Z
    2df6:	91 81       	ldd	r25, Z+1	; 0x01
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <LCD_displayCharacter+0x27e>
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e7 5b       	subi	r30, 0xB7	; 183
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e06:	de 01       	movw	r26, r28
    2e08:	a5 5b       	subi	r26, 0xB5	; 181
    2e0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	e5 5b       	subi	r30, 0xB5	; 181
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	80 81       	ld	r24, Z
    2e14:	91 81       	ldd	r25, Z+1	; 0x01
    2e16:	01 97       	sbiw	r24, 0x01	; 1
    2e18:	11 96       	adiw	r26, 0x01	; 1
    2e1a:	9c 93       	st	X, r25
    2e1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e5 5b       	subi	r30, 0xB5	; 181
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	80 81       	ld	r24, Z
    2e26:	91 81       	ldd	r25, Z+1	; 0x01
    2e28:	00 97       	sbiw	r24, 0x00	; 0
    2e2a:	d1 f6       	brne	.-76     	; 0x2de0 <LCD_displayCharacter+0x266>
    2e2c:	27 c0       	rjmp	.+78     	; 0x2e7c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e2e:	8e 01       	movw	r16, r28
    2e30:	05 5b       	subi	r16, 0xB5	; 181
    2e32:	1f 4f       	sbci	r17, 0xFF	; 255
    2e34:	fe 01       	movw	r30, r28
    2e36:	e3 5b       	subi	r30, 0xB3	; 179
    2e38:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3a:	60 81       	ld	r22, Z
    2e3c:	71 81       	ldd	r23, Z+1	; 0x01
    2e3e:	82 81       	ldd	r24, Z+2	; 0x02
    2e40:	93 81       	ldd	r25, Z+3	; 0x03
    2e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	f8 01       	movw	r30, r16
    2e4c:	91 83       	std	Z+1, r25	; 0x01
    2e4e:	80 83       	st	Z, r24
    2e50:	de 01       	movw	r26, r28
    2e52:	a9 5b       	subi	r26, 0xB9	; 185
    2e54:	bf 4f       	sbci	r27, 0xFF	; 255
    2e56:	fe 01       	movw	r30, r28
    2e58:	e5 5b       	subi	r30, 0xB5	; 181
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	80 81       	ld	r24, Z
    2e5e:	91 81       	ldd	r25, Z+1	; 0x01
    2e60:	8d 93       	st	X+, r24
    2e62:	9c 93       	st	X, r25
    2e64:	fe 01       	movw	r30, r28
    2e66:	e9 5b       	subi	r30, 0xB9	; 185
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	80 81       	ld	r24, Z
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	f1 f7       	brne	.-4      	; 0x2e6e <LCD_displayCharacter+0x2f4>
    2e72:	fe 01       	movw	r30, r28
    2e74:	e9 5b       	subi	r30, 0xB9	; 185
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	91 83       	std	Z+1, r25	; 0x01
    2e7a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	ed 59       	subi	r30, 0x9D	; 157
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	80 81       	ld	r24, Z
    2e84:	88 2f       	mov	r24, r24
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	80 71       	andi	r24, 0x10	; 16
    2e8a:	90 70       	andi	r25, 0x00	; 0
    2e8c:	95 95       	asr	r25
    2e8e:	87 95       	ror	r24
    2e90:	95 95       	asr	r25
    2e92:	87 95       	ror	r24
    2e94:	95 95       	asr	r25
    2e96:	87 95       	ror	r24
    2e98:	95 95       	asr	r25
    2e9a:	87 95       	ror	r24
    2e9c:	98 2f       	mov	r25, r24
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	49 2f       	mov	r20, r25
    2ea4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ed 59       	subi	r30, 0x9D	; 157
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 81       	ld	r24, Z
    2eb0:	88 2f       	mov	r24, r24
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	80 72       	andi	r24, 0x20	; 32
    2eb6:	90 70       	andi	r25, 0x00	; 0
    2eb8:	95 95       	asr	r25
    2eba:	87 95       	ror	r24
    2ebc:	95 95       	asr	r25
    2ebe:	87 95       	ror	r24
    2ec0:	95 95       	asr	r25
    2ec2:	87 95       	ror	r24
    2ec4:	95 95       	asr	r25
    2ec6:	87 95       	ror	r24
    2ec8:	95 95       	asr	r25
    2eca:	87 95       	ror	r24
    2ecc:	98 2f       	mov	r25, r24
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	61 e0       	ldi	r22, 0x01	; 1
    2ed2:	49 2f       	mov	r20, r25
    2ed4:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2ed8:	fe 01       	movw	r30, r28
    2eda:	ed 59       	subi	r30, 0x9D	; 157
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	80 81       	ld	r24, Z
    2ee0:	88 2f       	mov	r24, r24
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	80 74       	andi	r24, 0x40	; 64
    2ee6:	90 70       	andi	r25, 0x00	; 0
    2ee8:	08 2e       	mov	r0, r24
    2eea:	89 2f       	mov	r24, r25
    2eec:	00 0c       	add	r0, r0
    2eee:	88 1f       	adc	r24, r24
    2ef0:	99 0b       	sbc	r25, r25
    2ef2:	00 0c       	add	r0, r0
    2ef4:	88 1f       	adc	r24, r24
    2ef6:	99 1f       	adc	r25, r25
    2ef8:	98 2f       	mov	r25, r24
    2efa:	80 e0       	ldi	r24, 0x00	; 0
    2efc:	62 e0       	ldi	r22, 0x02	; 2
    2efe:	49 2f       	mov	r20, r25
    2f00:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2f04:	fe 01       	movw	r30, r28
    2f06:	ed 59       	subi	r30, 0x9D	; 157
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 81       	ld	r24, Z
    2f0c:	98 2f       	mov	r25, r24
    2f0e:	99 1f       	adc	r25, r25
    2f10:	99 27       	eor	r25, r25
    2f12:	99 1f       	adc	r25, r25
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	63 e0       	ldi	r22, 0x03	; 3
    2f18:	49 2f       	mov	r20, r25
    2f1a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    2f1e:	fe 01       	movw	r30, r28
    2f20:	ed 5b       	subi	r30, 0xBD	; 189
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	a0 e8       	ldi	r26, 0x80	; 128
    2f2a:	bf e3       	ldi	r27, 0x3F	; 63
    2f2c:	80 83       	st	Z, r24
    2f2e:	91 83       	std	Z+1, r25	; 0x01
    2f30:	a2 83       	std	Z+2, r26	; 0x02
    2f32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f34:	8e 01       	movw	r16, r28
    2f36:	01 5c       	subi	r16, 0xC1	; 193
    2f38:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	ed 5b       	subi	r30, 0xBD	; 189
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	60 81       	ld	r22, Z
    2f42:	71 81       	ldd	r23, Z+1	; 0x01
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	93 81       	ldd	r25, Z+3	; 0x03
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	4a ef       	ldi	r20, 0xFA	; 250
    2f4e:	54 e4       	ldi	r21, 0x44	; 68
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	f8 01       	movw	r30, r16
    2f5a:	80 83       	st	Z, r24
    2f5c:	91 83       	std	Z+1, r25	; 0x01
    2f5e:	a2 83       	std	Z+2, r26	; 0x02
    2f60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f62:	fe 01       	movw	r30, r28
    2f64:	ff 96       	adiw	r30, 0x3f	; 63
    2f66:	60 81       	ld	r22, Z
    2f68:	71 81       	ldd	r23, Z+1	; 0x01
    2f6a:	82 81       	ldd	r24, Z+2	; 0x02
    2f6c:	93 81       	ldd	r25, Z+3	; 0x03
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e8       	ldi	r20, 0x80	; 128
    2f74:	5f e3       	ldi	r21, 0x3F	; 63
    2f76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f7a:	88 23       	and	r24, r24
    2f7c:	2c f4       	brge	.+10     	; 0x2f88 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	9e af       	std	Y+62, r25	; 0x3e
    2f84:	8d af       	std	Y+61, r24	; 0x3d
    2f86:	46 c0       	rjmp	.+140    	; 0x3014 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2f88:	fe 01       	movw	r30, r28
    2f8a:	ff 96       	adiw	r30, 0x3f	; 63
    2f8c:	60 81       	ld	r22, Z
    2f8e:	71 81       	ldd	r23, Z+1	; 0x01
    2f90:	82 81       	ldd	r24, Z+2	; 0x02
    2f92:	93 81       	ldd	r25, Z+3	; 0x03
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	3f ef       	ldi	r19, 0xFF	; 255
    2f98:	4f e7       	ldi	r20, 0x7F	; 127
    2f9a:	57 e4       	ldi	r21, 0x47	; 71
    2f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fa0:	18 16       	cp	r1, r24
    2fa2:	64 f5       	brge	.+88     	; 0x2ffc <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa4:	fe 01       	movw	r30, r28
    2fa6:	ed 5b       	subi	r30, 0xBD	; 189
    2fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2faa:	60 81       	ld	r22, Z
    2fac:	71 81       	ldd	r23, Z+1	; 0x01
    2fae:	82 81       	ldd	r24, Z+2	; 0x02
    2fb0:	93 81       	ldd	r25, Z+3	; 0x03
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e2       	ldi	r20, 0x20	; 32
    2fb8:	51 e4       	ldi	r21, 0x41	; 65
    2fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	bc 01       	movw	r22, r24
    2fc4:	cd 01       	movw	r24, r26
    2fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	9e af       	std	Y+62, r25	; 0x3e
    2fd0:	8d af       	std	Y+61, r24	; 0x3d
    2fd2:	0f c0       	rjmp	.+30     	; 0x2ff2 <LCD_displayCharacter+0x478>
    2fd4:	88 ec       	ldi	r24, 0xC8	; 200
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	9c af       	std	Y+60, r25	; 0x3c
    2fda:	8b af       	std	Y+59, r24	; 0x3b
    2fdc:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fde:	9c ad       	ldd	r25, Y+60	; 0x3c
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <LCD_displayCharacter+0x466>
    2fe4:	9c af       	std	Y+60, r25	; 0x3c
    2fe6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fea:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	9e af       	std	Y+62, r25	; 0x3e
    2ff0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ff4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	69 f7       	brne	.-38     	; 0x2fd4 <LCD_displayCharacter+0x45a>
    2ffa:	16 c0       	rjmp	.+44     	; 0x3028 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	ff 96       	adiw	r30, 0x3f	; 63
    3000:	60 81       	ld	r22, Z
    3002:	71 81       	ldd	r23, Z+1	; 0x01
    3004:	82 81       	ldd	r24, Z+2	; 0x02
    3006:	93 81       	ldd	r25, Z+3	; 0x03
    3008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	9e af       	std	Y+62, r25	; 0x3e
    3012:	8d af       	std	Y+61, r24	; 0x3d
    3014:	8d ad       	ldd	r24, Y+61	; 0x3d
    3016:	9e ad       	ldd	r25, Y+62	; 0x3e
    3018:	9a af       	std	Y+58, r25	; 0x3a
    301a:	89 af       	std	Y+57, r24	; 0x39
    301c:	89 ad       	ldd	r24, Y+57	; 0x39
    301e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	f1 f7       	brne	.-4      	; 0x3020 <LCD_displayCharacter+0x4a6>
    3024:	9a af       	std	Y+58, r25	; 0x3a
    3026:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3028:	80 e0       	ldi	r24, 0x00	; 0
    302a:	65 e0       	ldi	r22, 0x05	; 5
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    3032:	80 e0       	ldi	r24, 0x00	; 0
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	a0 e8       	ldi	r26, 0x80	; 128
    3038:	bf e3       	ldi	r27, 0x3F	; 63
    303a:	8d ab       	std	Y+53, r24	; 0x35
    303c:	9e ab       	std	Y+54, r25	; 0x36
    303e:	af ab       	std	Y+55, r26	; 0x37
    3040:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3042:	6d a9       	ldd	r22, Y+53	; 0x35
    3044:	7e a9       	ldd	r23, Y+54	; 0x36
    3046:	8f a9       	ldd	r24, Y+55	; 0x37
    3048:	98 ad       	ldd	r25, Y+56	; 0x38
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	4a ef       	ldi	r20, 0xFA	; 250
    3050:	54 e4       	ldi	r21, 0x44	; 68
    3052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	89 ab       	std	Y+49, r24	; 0x31
    305c:	9a ab       	std	Y+50, r25	; 0x32
    305e:	ab ab       	std	Y+51, r26	; 0x33
    3060:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3062:	69 a9       	ldd	r22, Y+49	; 0x31
    3064:	7a a9       	ldd	r23, Y+50	; 0x32
    3066:	8b a9       	ldd	r24, Y+51	; 0x33
    3068:	9c a9       	ldd	r25, Y+52	; 0x34
    306a:	20 e0       	ldi	r18, 0x00	; 0
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	40 e8       	ldi	r20, 0x80	; 128
    3070:	5f e3       	ldi	r21, 0x3F	; 63
    3072:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3076:	88 23       	and	r24, r24
    3078:	2c f4       	brge	.+10     	; 0x3084 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	98 ab       	std	Y+48, r25	; 0x30
    3080:	8f a7       	std	Y+47, r24	; 0x2f
    3082:	3f c0       	rjmp	.+126    	; 0x3102 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    3084:	69 a9       	ldd	r22, Y+49	; 0x31
    3086:	7a a9       	ldd	r23, Y+50	; 0x32
    3088:	8b a9       	ldd	r24, Y+51	; 0x33
    308a:	9c a9       	ldd	r25, Y+52	; 0x34
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	3f ef       	ldi	r19, 0xFF	; 255
    3090:	4f e7       	ldi	r20, 0x7F	; 127
    3092:	57 e4       	ldi	r21, 0x47	; 71
    3094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3098:	18 16       	cp	r1, r24
    309a:	4c f5       	brge	.+82     	; 0x30ee <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309c:	6d a9       	ldd	r22, Y+53	; 0x35
    309e:	7e a9       	ldd	r23, Y+54	; 0x36
    30a0:	8f a9       	ldd	r24, Y+55	; 0x37
    30a2:	98 ad       	ldd	r25, Y+56	; 0x38
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	40 e2       	ldi	r20, 0x20	; 32
    30aa:	51 e4       	ldi	r21, 0x41	; 65
    30ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	bc 01       	movw	r22, r24
    30b6:	cd 01       	movw	r24, r26
    30b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	98 ab       	std	Y+48, r25	; 0x30
    30c2:	8f a7       	std	Y+47, r24	; 0x2f
    30c4:	0f c0       	rjmp	.+30     	; 0x30e4 <LCD_displayCharacter+0x56a>
    30c6:	88 ec       	ldi	r24, 0xC8	; 200
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	9e a7       	std	Y+46, r25	; 0x2e
    30cc:	8d a7       	std	Y+45, r24	; 0x2d
    30ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    30d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	f1 f7       	brne	.-4      	; 0x30d2 <LCD_displayCharacter+0x558>
    30d6:	9e a7       	std	Y+46, r25	; 0x2e
    30d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30da:	8f a5       	ldd	r24, Y+47	; 0x2f
    30dc:	98 a9       	ldd	r25, Y+48	; 0x30
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	98 ab       	std	Y+48, r25	; 0x30
    30e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    30e6:	98 a9       	ldd	r25, Y+48	; 0x30
    30e8:	00 97       	sbiw	r24, 0x00	; 0
    30ea:	69 f7       	brne	.-38     	; 0x30c6 <LCD_displayCharacter+0x54c>
    30ec:	14 c0       	rjmp	.+40     	; 0x3116 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ee:	69 a9       	ldd	r22, Y+49	; 0x31
    30f0:	7a a9       	ldd	r23, Y+50	; 0x32
    30f2:	8b a9       	ldd	r24, Y+51	; 0x33
    30f4:	9c a9       	ldd	r25, Y+52	; 0x34
    30f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	98 ab       	std	Y+48, r25	; 0x30
    3100:	8f a7       	std	Y+47, r24	; 0x2f
    3102:	8f a5       	ldd	r24, Y+47	; 0x2f
    3104:	98 a9       	ldd	r25, Y+48	; 0x30
    3106:	9c a7       	std	Y+44, r25	; 0x2c
    3108:	8b a7       	std	Y+43, r24	; 0x2b
    310a:	8b a5       	ldd	r24, Y+43	; 0x2b
    310c:	9c a5       	ldd	r25, Y+44	; 0x2c
    310e:	01 97       	sbiw	r24, 0x01	; 1
    3110:	f1 f7       	brne	.-4      	; 0x310e <LCD_displayCharacter+0x594>
    3112:	9c a7       	std	Y+44, r25	; 0x2c
    3114:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	65 e0       	ldi	r22, 0x05	; 5
    311a:	41 e0       	ldi	r20, 0x01	; 1
    311c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	a0 e8       	ldi	r26, 0x80	; 128
    3126:	bf e3       	ldi	r27, 0x3F	; 63
    3128:	8f a3       	std	Y+39, r24	; 0x27
    312a:	98 a7       	std	Y+40, r25	; 0x28
    312c:	a9 a7       	std	Y+41, r26	; 0x29
    312e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3130:	6f a1       	ldd	r22, Y+39	; 0x27
    3132:	78 a5       	ldd	r23, Y+40	; 0x28
    3134:	89 a5       	ldd	r24, Y+41	; 0x29
    3136:	9a a5       	ldd	r25, Y+42	; 0x2a
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	4a ef       	ldi	r20, 0xFA	; 250
    313e:	54 e4       	ldi	r21, 0x44	; 68
    3140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	8b a3       	std	Y+35, r24	; 0x23
    314a:	9c a3       	std	Y+36, r25	; 0x24
    314c:	ad a3       	std	Y+37, r26	; 0x25
    314e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3150:	6b a1       	ldd	r22, Y+35	; 0x23
    3152:	7c a1       	ldd	r23, Y+36	; 0x24
    3154:	8d a1       	ldd	r24, Y+37	; 0x25
    3156:	9e a1       	ldd	r25, Y+38	; 0x26
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e8       	ldi	r20, 0x80	; 128
    315e:	5f e3       	ldi	r21, 0x3F	; 63
    3160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3164:	88 23       	and	r24, r24
    3166:	2c f4       	brge	.+10     	; 0x3172 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	9a a3       	std	Y+34, r25	; 0x22
    316e:	89 a3       	std	Y+33, r24	; 0x21
    3170:	3f c0       	rjmp	.+126    	; 0x31f0 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3172:	6b a1       	ldd	r22, Y+35	; 0x23
    3174:	7c a1       	ldd	r23, Y+36	; 0x24
    3176:	8d a1       	ldd	r24, Y+37	; 0x25
    3178:	9e a1       	ldd	r25, Y+38	; 0x26
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	3f ef       	ldi	r19, 0xFF	; 255
    317e:	4f e7       	ldi	r20, 0x7F	; 127
    3180:	57 e4       	ldi	r21, 0x47	; 71
    3182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3186:	18 16       	cp	r1, r24
    3188:	4c f5       	brge	.+82     	; 0x31dc <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318a:	6f a1       	ldd	r22, Y+39	; 0x27
    318c:	78 a5       	ldd	r23, Y+40	; 0x28
    318e:	89 a5       	ldd	r24, Y+41	; 0x29
    3190:	9a a5       	ldd	r25, Y+42	; 0x2a
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	40 e2       	ldi	r20, 0x20	; 32
    3198:	51 e4       	ldi	r21, 0x41	; 65
    319a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	bc 01       	movw	r22, r24
    31a4:	cd 01       	movw	r24, r26
    31a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	9a a3       	std	Y+34, r25	; 0x22
    31b0:	89 a3       	std	Y+33, r24	; 0x21
    31b2:	0f c0       	rjmp	.+30     	; 0x31d2 <LCD_displayCharacter+0x658>
    31b4:	88 ec       	ldi	r24, 0xC8	; 200
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	98 a3       	std	Y+32, r25	; 0x20
    31ba:	8f 8f       	std	Y+31, r24	; 0x1f
    31bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31be:	98 a1       	ldd	r25, Y+32	; 0x20
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	f1 f7       	brne	.-4      	; 0x31c0 <LCD_displayCharacter+0x646>
    31c4:	98 a3       	std	Y+32, r25	; 0x20
    31c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c8:	89 a1       	ldd	r24, Y+33	; 0x21
    31ca:	9a a1       	ldd	r25, Y+34	; 0x22
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	9a a3       	std	Y+34, r25	; 0x22
    31d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d2:	89 a1       	ldd	r24, Y+33	; 0x21
    31d4:	9a a1       	ldd	r25, Y+34	; 0x22
    31d6:	00 97       	sbiw	r24, 0x00	; 0
    31d8:	69 f7       	brne	.-38     	; 0x31b4 <LCD_displayCharacter+0x63a>
    31da:	14 c0       	rjmp	.+40     	; 0x3204 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31dc:	6b a1       	ldd	r22, Y+35	; 0x23
    31de:	7c a1       	ldd	r23, Y+36	; 0x24
    31e0:	8d a1       	ldd	r24, Y+37	; 0x25
    31e2:	9e a1       	ldd	r25, Y+38	; 0x26
    31e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	9a a3       	std	Y+34, r25	; 0x22
    31ee:	89 a3       	std	Y+33, r24	; 0x21
    31f0:	89 a1       	ldd	r24, Y+33	; 0x21
    31f2:	9a a1       	ldd	r25, Y+34	; 0x22
    31f4:	9e 8f       	std	Y+30, r25	; 0x1e
    31f6:	8d 8f       	std	Y+29, r24	; 0x1d
    31f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	f1 f7       	brne	.-4      	; 0x31fc <LCD_displayCharacter+0x682>
    3200:	9e 8f       	std	Y+30, r25	; 0x1e
    3202:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3204:	fe 01       	movw	r30, r28
    3206:	ed 59       	subi	r30, 0x9D	; 157
    3208:	ff 4f       	sbci	r31, 0xFF	; 255
    320a:	80 81       	ld	r24, Z
    320c:	98 2f       	mov	r25, r24
    320e:	91 70       	andi	r25, 0x01	; 1
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	60 e0       	ldi	r22, 0x00	; 0
    3214:	49 2f       	mov	r20, r25
    3216:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    321a:	fe 01       	movw	r30, r28
    321c:	ed 59       	subi	r30, 0x9D	; 157
    321e:	ff 4f       	sbci	r31, 0xFF	; 255
    3220:	80 81       	ld	r24, Z
    3222:	88 2f       	mov	r24, r24
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	82 70       	andi	r24, 0x02	; 2
    3228:	90 70       	andi	r25, 0x00	; 0
    322a:	95 95       	asr	r25
    322c:	87 95       	ror	r24
    322e:	98 2f       	mov	r25, r24
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	61 e0       	ldi	r22, 0x01	; 1
    3234:	49 2f       	mov	r20, r25
    3236:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    323a:	fe 01       	movw	r30, r28
    323c:	ed 59       	subi	r30, 0x9D	; 157
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 81       	ld	r24, Z
    3242:	88 2f       	mov	r24, r24
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	84 70       	andi	r24, 0x04	; 4
    3248:	90 70       	andi	r25, 0x00	; 0
    324a:	95 95       	asr	r25
    324c:	87 95       	ror	r24
    324e:	95 95       	asr	r25
    3250:	87 95       	ror	r24
    3252:	98 2f       	mov	r25, r24
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	62 e0       	ldi	r22, 0x02	; 2
    3258:	49 2f       	mov	r20, r25
    325a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    325e:	fe 01       	movw	r30, r28
    3260:	ed 59       	subi	r30, 0x9D	; 157
    3262:	ff 4f       	sbci	r31, 0xFF	; 255
    3264:	80 81       	ld	r24, Z
    3266:	88 2f       	mov	r24, r24
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	88 70       	andi	r24, 0x08	; 8
    326c:	90 70       	andi	r25, 0x00	; 0
    326e:	95 95       	asr	r25
    3270:	87 95       	ror	r24
    3272:	95 95       	asr	r25
    3274:	87 95       	ror	r24
    3276:	95 95       	asr	r25
    3278:	87 95       	ror	r24
    327a:	98 2f       	mov	r25, r24
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	63 e0       	ldi	r22, 0x03	; 3
    3280:	49 2f       	mov	r20, r25
    3282:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	a0 e8       	ldi	r26, 0x80	; 128
    328c:	bf e3       	ldi	r27, 0x3F	; 63
    328e:	89 8f       	std	Y+25, r24	; 0x19
    3290:	9a 8f       	std	Y+26, r25	; 0x1a
    3292:	ab 8f       	std	Y+27, r26	; 0x1b
    3294:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3296:	69 8d       	ldd	r22, Y+25	; 0x19
    3298:	7a 8d       	ldd	r23, Y+26	; 0x1a
    329a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    329c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	4a ef       	ldi	r20, 0xFA	; 250
    32a4:	54 e4       	ldi	r21, 0x44	; 68
    32a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	8d 8b       	std	Y+21, r24	; 0x15
    32b0:	9e 8b       	std	Y+22, r25	; 0x16
    32b2:	af 8b       	std	Y+23, r26	; 0x17
    32b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32b6:	6d 89       	ldd	r22, Y+21	; 0x15
    32b8:	7e 89       	ldd	r23, Y+22	; 0x16
    32ba:	8f 89       	ldd	r24, Y+23	; 0x17
    32bc:	98 8d       	ldd	r25, Y+24	; 0x18
    32be:	20 e0       	ldi	r18, 0x00	; 0
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	40 e8       	ldi	r20, 0x80	; 128
    32c4:	5f e3       	ldi	r21, 0x3F	; 63
    32c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32ca:	88 23       	and	r24, r24
    32cc:	2c f4       	brge	.+10     	; 0x32d8 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	9c 8b       	std	Y+20, r25	; 0x14
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
    32d6:	3f c0       	rjmp	.+126    	; 0x3356 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    32d8:	6d 89       	ldd	r22, Y+21	; 0x15
    32da:	7e 89       	ldd	r23, Y+22	; 0x16
    32dc:	8f 89       	ldd	r24, Y+23	; 0x17
    32de:	98 8d       	ldd	r25, Y+24	; 0x18
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	3f ef       	ldi	r19, 0xFF	; 255
    32e4:	4f e7       	ldi	r20, 0x7F	; 127
    32e6:	57 e4       	ldi	r21, 0x47	; 71
    32e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32ec:	18 16       	cp	r1, r24
    32ee:	4c f5       	brge	.+82     	; 0x3342 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32f0:	69 8d       	ldd	r22, Y+25	; 0x19
    32f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e2       	ldi	r20, 0x20	; 32
    32fe:	51 e4       	ldi	r21, 0x41	; 65
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	bc 01       	movw	r22, r24
    330a:	cd 01       	movw	r24, r26
    330c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	9c 8b       	std	Y+20, r25	; 0x14
    3316:	8b 8b       	std	Y+19, r24	; 0x13
    3318:	0f c0       	rjmp	.+30     	; 0x3338 <LCD_displayCharacter+0x7be>
    331a:	88 ec       	ldi	r24, 0xC8	; 200
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	9a 8b       	std	Y+18, r25	; 0x12
    3320:	89 8b       	std	Y+17, r24	; 0x11
    3322:	89 89       	ldd	r24, Y+17	; 0x11
    3324:	9a 89       	ldd	r25, Y+18	; 0x12
    3326:	01 97       	sbiw	r24, 0x01	; 1
    3328:	f1 f7       	brne	.-4      	; 0x3326 <LCD_displayCharacter+0x7ac>
    332a:	9a 8b       	std	Y+18, r25	; 0x12
    332c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332e:	8b 89       	ldd	r24, Y+19	; 0x13
    3330:	9c 89       	ldd	r25, Y+20	; 0x14
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	9c 8b       	std	Y+20, r25	; 0x14
    3336:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3338:	8b 89       	ldd	r24, Y+19	; 0x13
    333a:	9c 89       	ldd	r25, Y+20	; 0x14
    333c:	00 97       	sbiw	r24, 0x00	; 0
    333e:	69 f7       	brne	.-38     	; 0x331a <LCD_displayCharacter+0x7a0>
    3340:	14 c0       	rjmp	.+40     	; 0x336a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3342:	6d 89       	ldd	r22, Y+21	; 0x15
    3344:	7e 89       	ldd	r23, Y+22	; 0x16
    3346:	8f 89       	ldd	r24, Y+23	; 0x17
    3348:	98 8d       	ldd	r25, Y+24	; 0x18
    334a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334e:	dc 01       	movw	r26, r24
    3350:	cb 01       	movw	r24, r22
    3352:	9c 8b       	std	Y+20, r25	; 0x14
    3354:	8b 8b       	std	Y+19, r24	; 0x13
    3356:	8b 89       	ldd	r24, Y+19	; 0x13
    3358:	9c 89       	ldd	r25, Y+20	; 0x14
    335a:	98 8b       	std	Y+16, r25	; 0x10
    335c:	8f 87       	std	Y+15, r24	; 0x0f
    335e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3360:	98 89       	ldd	r25, Y+16	; 0x10
    3362:	01 97       	sbiw	r24, 0x01	; 1
    3364:	f1 f7       	brne	.-4      	; 0x3362 <LCD_displayCharacter+0x7e8>
    3366:	98 8b       	std	Y+16, r25	; 0x10
    3368:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	65 e0       	ldi	r22, 0x05	; 5
    336e:	40 e0       	ldi	r20, 0x00	; 0
    3370:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <GPIO_writePin>
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	a0 e8       	ldi	r26, 0x80	; 128
    337a:	bf e3       	ldi	r27, 0x3F	; 63
    337c:	8b 87       	std	Y+11, r24	; 0x0b
    337e:	9c 87       	std	Y+12, r25	; 0x0c
    3380:	ad 87       	std	Y+13, r26	; 0x0d
    3382:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3384:	6b 85       	ldd	r22, Y+11	; 0x0b
    3386:	7c 85       	ldd	r23, Y+12	; 0x0c
    3388:	8d 85       	ldd	r24, Y+13	; 0x0d
    338a:	9e 85       	ldd	r25, Y+14	; 0x0e
    338c:	20 e0       	ldi	r18, 0x00	; 0
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	4a ef       	ldi	r20, 0xFA	; 250
    3392:	54 e4       	ldi	r21, 0x44	; 68
    3394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3398:	dc 01       	movw	r26, r24
    339a:	cb 01       	movw	r24, r22
    339c:	8f 83       	std	Y+7, r24	; 0x07
    339e:	98 87       	std	Y+8, r25	; 0x08
    33a0:	a9 87       	std	Y+9, r26	; 0x09
    33a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33a4:	6f 81       	ldd	r22, Y+7	; 0x07
    33a6:	78 85       	ldd	r23, Y+8	; 0x08
    33a8:	89 85       	ldd	r24, Y+9	; 0x09
    33aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ac:	20 e0       	ldi	r18, 0x00	; 0
    33ae:	30 e0       	ldi	r19, 0x00	; 0
    33b0:	40 e8       	ldi	r20, 0x80	; 128
    33b2:	5f e3       	ldi	r21, 0x3F	; 63
    33b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33b8:	88 23       	and	r24, r24
    33ba:	2c f4       	brge	.+10     	; 0x33c6 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	9e 83       	std	Y+6, r25	; 0x06
    33c2:	8d 83       	std	Y+5, r24	; 0x05
    33c4:	3f c0       	rjmp	.+126    	; 0x3444 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    33c6:	6f 81       	ldd	r22, Y+7	; 0x07
    33c8:	78 85       	ldd	r23, Y+8	; 0x08
    33ca:	89 85       	ldd	r24, Y+9	; 0x09
    33cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    33ce:	20 e0       	ldi	r18, 0x00	; 0
    33d0:	3f ef       	ldi	r19, 0xFF	; 255
    33d2:	4f e7       	ldi	r20, 0x7F	; 127
    33d4:	57 e4       	ldi	r21, 0x47	; 71
    33d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33da:	18 16       	cp	r1, r24
    33dc:	4c f5       	brge	.+82     	; 0x3430 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33de:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	40 e2       	ldi	r20, 0x20	; 32
    33ec:	51 e4       	ldi	r21, 0x41	; 65
    33ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	bc 01       	movw	r22, r24
    33f8:	cd 01       	movw	r24, r26
    33fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	9e 83       	std	Y+6, r25	; 0x06
    3404:	8d 83       	std	Y+5, r24	; 0x05
    3406:	0f c0       	rjmp	.+30     	; 0x3426 <LCD_displayCharacter+0x8ac>
    3408:	88 ec       	ldi	r24, 0xC8	; 200
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	9c 83       	std	Y+4, r25	; 0x04
    340e:	8b 83       	std	Y+3, r24	; 0x03
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	9c 81       	ldd	r25, Y+4	; 0x04
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	f1 f7       	brne	.-4      	; 0x3414 <LCD_displayCharacter+0x89a>
    3418:	9c 83       	std	Y+4, r25	; 0x04
    341a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    341c:	8d 81       	ldd	r24, Y+5	; 0x05
    341e:	9e 81       	ldd	r25, Y+6	; 0x06
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	9e 83       	std	Y+6, r25	; 0x06
    3424:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3426:	8d 81       	ldd	r24, Y+5	; 0x05
    3428:	9e 81       	ldd	r25, Y+6	; 0x06
    342a:	00 97       	sbiw	r24, 0x00	; 0
    342c:	69 f7       	brne	.-38     	; 0x3408 <LCD_displayCharacter+0x88e>
    342e:	14 c0       	rjmp	.+40     	; 0x3458 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3430:	6f 81       	ldd	r22, Y+7	; 0x07
    3432:	78 85       	ldd	r23, Y+8	; 0x08
    3434:	89 85       	ldd	r24, Y+9	; 0x09
    3436:	9a 85       	ldd	r25, Y+10	; 0x0a
    3438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    343c:	dc 01       	movw	r26, r24
    343e:	cb 01       	movw	r24, r22
    3440:	9e 83       	std	Y+6, r25	; 0x06
    3442:	8d 83       	std	Y+5, r24	; 0x05
    3444:	8d 81       	ldd	r24, Y+5	; 0x05
    3446:	9e 81       	ldd	r25, Y+6	; 0x06
    3448:	9a 83       	std	Y+2, r25	; 0x02
    344a:	89 83       	std	Y+1, r24	; 0x01
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	9a 81       	ldd	r25, Y+2	; 0x02
    3450:	01 97       	sbiw	r24, 0x01	; 1
    3452:	f1 f7       	brne	.-4      	; 0x3450 <LCD_displayCharacter+0x8d6>
    3454:	9a 83       	std	Y+2, r25	; 0x02
    3456:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3458:	cd 59       	subi	r28, 0x9D	; 157
    345a:	df 4f       	sbci	r29, 0xFF	; 255
    345c:	0f b6       	in	r0, 0x3f	; 63
    345e:	f8 94       	cli
    3460:	de bf       	out	0x3e, r29	; 62
    3462:	0f be       	out	0x3f, r0	; 63
    3464:	cd bf       	out	0x3d, r28	; 61
    3466:	cf 91       	pop	r28
    3468:	df 91       	pop	r29
    346a:	1f 91       	pop	r17
    346c:	0f 91       	pop	r16
    346e:	08 95       	ret

00003470 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	00 d0       	rcall	.+0      	; 0x3476 <LCD_displayString+0x6>
    3476:	0f 92       	push	r0
    3478:	cd b7       	in	r28, 0x3d	; 61
    347a:	de b7       	in	r29, 0x3e	; 62
    347c:	9b 83       	std	Y+3, r25	; 0x03
    347e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3480:	19 82       	std	Y+1, r1	; 0x01
    3482:	0e c0       	rjmp	.+28     	; 0x34a0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	28 2f       	mov	r18, r24
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	9b 81       	ldd	r25, Y+3	; 0x03
    348e:	fc 01       	movw	r30, r24
    3490:	e2 0f       	add	r30, r18
    3492:	f3 1f       	adc	r31, r19
    3494:	80 81       	ld	r24, Z
    3496:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <LCD_displayCharacter>
		i++;
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	8f 5f       	subi	r24, 0xFF	; 255
    349e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	28 2f       	mov	r18, r24
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	8a 81       	ldd	r24, Y+2	; 0x02
    34a8:	9b 81       	ldd	r25, Y+3	; 0x03
    34aa:	fc 01       	movw	r30, r24
    34ac:	e2 0f       	add	r30, r18
    34ae:	f3 1f       	adc	r31, r19
    34b0:	80 81       	ld	r24, Z
    34b2:	88 23       	and	r24, r24
    34b4:	39 f7       	brne	.-50     	; 0x3484 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <LCD_moveCursor+0x6>
    34c8:	00 d0       	rcall	.+0      	; 0x34ca <LCD_moveCursor+0x8>
    34ca:	0f 92       	push	r0
    34cc:	cd b7       	in	r28, 0x3d	; 61
    34ce:	de b7       	in	r29, 0x3e	; 62
    34d0:	8a 83       	std	Y+2, r24	; 0x02
    34d2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    34d4:	8a 81       	ldd	r24, Y+2	; 0x02
    34d6:	28 2f       	mov	r18, r24
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	3d 83       	std	Y+5, r19	; 0x05
    34dc:	2c 83       	std	Y+4, r18	; 0x04
    34de:	8c 81       	ldd	r24, Y+4	; 0x04
    34e0:	9d 81       	ldd	r25, Y+5	; 0x05
    34e2:	81 30       	cpi	r24, 0x01	; 1
    34e4:	91 05       	cpc	r25, r1
    34e6:	c1 f0       	breq	.+48     	; 0x3518 <LCD_moveCursor+0x56>
    34e8:	2c 81       	ldd	r18, Y+4	; 0x04
    34ea:	3d 81       	ldd	r19, Y+5	; 0x05
    34ec:	22 30       	cpi	r18, 0x02	; 2
    34ee:	31 05       	cpc	r19, r1
    34f0:	2c f4       	brge	.+10     	; 0x34fc <LCD_moveCursor+0x3a>
    34f2:	8c 81       	ldd	r24, Y+4	; 0x04
    34f4:	9d 81       	ldd	r25, Y+5	; 0x05
    34f6:	00 97       	sbiw	r24, 0x00	; 0
    34f8:	61 f0       	breq	.+24     	; 0x3512 <LCD_moveCursor+0x50>
    34fa:	19 c0       	rjmp	.+50     	; 0x352e <LCD_moveCursor+0x6c>
    34fc:	2c 81       	ldd	r18, Y+4	; 0x04
    34fe:	3d 81       	ldd	r19, Y+5	; 0x05
    3500:	22 30       	cpi	r18, 0x02	; 2
    3502:	31 05       	cpc	r19, r1
    3504:	69 f0       	breq	.+26     	; 0x3520 <LCD_moveCursor+0x5e>
    3506:	8c 81       	ldd	r24, Y+4	; 0x04
    3508:	9d 81       	ldd	r25, Y+5	; 0x05
    350a:	83 30       	cpi	r24, 0x03	; 3
    350c:	91 05       	cpc	r25, r1
    350e:	61 f0       	breq	.+24     	; 0x3528 <LCD_moveCursor+0x66>
    3510:	0e c0       	rjmp	.+28     	; 0x352e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3512:	8b 81       	ldd	r24, Y+3	; 0x03
    3514:	89 83       	std	Y+1, r24	; 0x01
    3516:	0b c0       	rjmp	.+22     	; 0x352e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3518:	8b 81       	ldd	r24, Y+3	; 0x03
    351a:	80 5c       	subi	r24, 0xC0	; 192
    351c:	89 83       	std	Y+1, r24	; 0x01
    351e:	07 c0       	rjmp	.+14     	; 0x352e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3520:	8b 81       	ldd	r24, Y+3	; 0x03
    3522:	80 5f       	subi	r24, 0xF0	; 240
    3524:	89 83       	std	Y+1, r24	; 0x01
    3526:	03 c0       	rjmp	.+6      	; 0x352e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3528:	8b 81       	ldd	r24, Y+3	; 0x03
    352a:	80 5b       	subi	r24, 0xB0	; 176
    352c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    352e:	89 81       	ldd	r24, Y+1	; 0x01
    3530:	80 68       	ori	r24, 0x80	; 128
    3532:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_sendCommand>
}
    3536:	0f 90       	pop	r0
    3538:	0f 90       	pop	r0
    353a:	0f 90       	pop	r0
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0
    3540:	cf 91       	pop	r28
    3542:	df 91       	pop	r29
    3544:	08 95       	ret

00003546 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	00 d0       	rcall	.+0      	; 0x354c <LCD_displayStringRowColumn+0x6>
    354c:	00 d0       	rcall	.+0      	; 0x354e <LCD_displayStringRowColumn+0x8>
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	6a 83       	std	Y+2, r22	; 0x02
    3556:	5c 83       	std	Y+4, r21	; 0x04
    3558:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	6a 81       	ldd	r22, Y+2	; 0x02
    355e:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3562:	8b 81       	ldd	r24, Y+3	; 0x03
    3564:	9c 81       	ldd	r25, Y+4	; 0x04
    3566:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_displayString>
}
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	08 95       	ret

00003578 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3578:	df 93       	push	r29
    357a:	cf 93       	push	r28
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
    3580:	62 97       	sbiw	r28, 0x12	; 18
    3582:	0f b6       	in	r0, 0x3f	; 63
    3584:	f8 94       	cli
    3586:	de bf       	out	0x3e, r29	; 62
    3588:	0f be       	out	0x3f, r0	; 63
    358a:	cd bf       	out	0x3d, r28	; 61
    358c:	9a 8b       	std	Y+18, r25	; 0x12
    358e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3590:	89 89       	ldd	r24, Y+17	; 0x11
    3592:	9a 89       	ldd	r25, Y+18	; 0x12
    3594:	9e 01       	movw	r18, r28
    3596:	2f 5f       	subi	r18, 0xFF	; 255
    3598:	3f 4f       	sbci	r19, 0xFF	; 255
    359a:	b9 01       	movw	r22, r18
    359c:	4a e0       	ldi	r20, 0x0A	; 10
    359e:	50 e0       	ldi	r21, 0x00	; 0
    35a0:	0e 94 45 1c 	call	0x388a	; 0x388a <itoa>
   LCD_displayString(buff); /* Display the string */
    35a4:	ce 01       	movw	r24, r28
    35a6:	01 96       	adiw	r24, 0x01	; 1
    35a8:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_displayString>
}
    35ac:	62 96       	adiw	r28, 0x12	; 18
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	cf 91       	pop	r28
    35ba:	df 91       	pop	r29
    35bc:	08 95       	ret

000035be <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    35be:	df 93       	push	r29
    35c0:	cf 93       	push	r28
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	0e 94 42 11 	call	0x2284	; 0x2284 <LCD_sendCommand>
}
    35cc:	cf 91       	pop	r28
    35ce:	df 91       	pop	r29
    35d0:	08 95       	ret

000035d2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    35d2:	df 93       	push	r29
    35d4:	cf 93       	push	r28
    35d6:	00 d0       	rcall	.+0      	; 0x35d8 <UART_init+0x6>
    35d8:	00 d0       	rcall	.+0      	; 0x35da <UART_init+0x8>
    35da:	cd b7       	in	r28, 0x3d	; 61
    35dc:	de b7       	in	r29, 0x3e	; 62
    35de:	9c 83       	std	Y+4, r25	; 0x04
    35e0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    35e2:	1a 82       	std	Y+2, r1	; 0x02
    35e4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    35e6:	eb e2       	ldi	r30, 0x2B	; 43
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	82 e0       	ldi	r24, 0x02	; 2
    35ec:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    35ee:	ea e2       	ldi	r30, 0x2A	; 42
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	88 e1       	ldi	r24, 0x18	; 24
    35f4:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    35f6:	e0 e4       	ldi	r30, 0x40	; 64
    35f8:	f0 e0       	ldi	r31, 0x00	; 0
    35fa:	80 e8       	ldi	r24, 0x80	; 128
    35fc:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xC1) | (Config_Ptr->parity) << 4 | (Config_Ptr->stop_bit) << 3 | (Config_Ptr->bit_data) << 1;
    35fe:	a0 e4       	ldi	r26, 0x40	; 64
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	e0 e4       	ldi	r30, 0x40	; 64
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	28 2f       	mov	r18, r24
    360a:	21 7c       	andi	r18, 0xC1	; 193
    360c:	eb 81       	ldd	r30, Y+3	; 0x03
    360e:	fc 81       	ldd	r31, Y+4	; 0x04
    3610:	81 81       	ldd	r24, Z+1	; 0x01
    3612:	88 2f       	mov	r24, r24
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	82 95       	swap	r24
    3618:	92 95       	swap	r25
    361a:	90 7f       	andi	r25, 0xF0	; 240
    361c:	98 27       	eor	r25, r24
    361e:	80 7f       	andi	r24, 0xF0	; 240
    3620:	98 27       	eor	r25, r24
    3622:	28 2b       	or	r18, r24
    3624:	eb 81       	ldd	r30, Y+3	; 0x03
    3626:	fc 81       	ldd	r31, Y+4	; 0x04
    3628:	82 81       	ldd	r24, Z+2	; 0x02
    362a:	88 2f       	mov	r24, r24
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	88 0f       	add	r24, r24
    3630:	99 1f       	adc	r25, r25
    3632:	88 0f       	add	r24, r24
    3634:	99 1f       	adc	r25, r25
    3636:	88 0f       	add	r24, r24
    3638:	99 1f       	adc	r25, r25
    363a:	28 2b       	or	r18, r24
    363c:	eb 81       	ldd	r30, Y+3	; 0x03
    363e:	fc 81       	ldd	r31, Y+4	; 0x04
    3640:	80 81       	ld	r24, Z
    3642:	88 2f       	mov	r24, r24
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	82 2b       	or	r24, r18
    364c:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    364e:	eb 81       	ldd	r30, Y+3	; 0x03
    3650:	fc 81       	ldd	r31, Y+4	; 0x04
    3652:	83 81       	ldd	r24, Z+3	; 0x03
    3654:	94 81       	ldd	r25, Z+4	; 0x04
    3656:	a5 81       	ldd	r26, Z+5	; 0x05
    3658:	b6 81       	ldd	r27, Z+6	; 0x06
    365a:	88 0f       	add	r24, r24
    365c:	99 1f       	adc	r25, r25
    365e:	aa 1f       	adc	r26, r26
    3660:	bb 1f       	adc	r27, r27
    3662:	88 0f       	add	r24, r24
    3664:	99 1f       	adc	r25, r25
    3666:	aa 1f       	adc	r26, r26
    3668:	bb 1f       	adc	r27, r27
    366a:	88 0f       	add	r24, r24
    366c:	99 1f       	adc	r25, r25
    366e:	aa 1f       	adc	r26, r26
    3670:	bb 1f       	adc	r27, r27
    3672:	9c 01       	movw	r18, r24
    3674:	ad 01       	movw	r20, r26
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	92 e1       	ldi	r25, 0x12	; 18
    367a:	aa e7       	ldi	r26, 0x7A	; 122
    367c:	b0 e0       	ldi	r27, 0x00	; 0
    367e:	bc 01       	movw	r22, r24
    3680:	cd 01       	movw	r24, r26
    3682:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__udivmodsi4>
    3686:	da 01       	movw	r26, r20
    3688:	c9 01       	movw	r24, r18
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	9a 83       	std	Y+2, r25	; 0x02
    368e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3690:	e0 e4       	ldi	r30, 0x40	; 64
    3692:	f0 e0       	ldi	r31, 0x00	; 0
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	9a 81       	ldd	r25, Y+2	; 0x02
    3698:	89 2f       	mov	r24, r25
    369a:	99 27       	eor	r25, r25
    369c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    369e:	e9 e2       	ldi	r30, 0x29	; 41
    36a0:	f0 e0       	ldi	r31, 0x00	; 0
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	80 83       	st	Z, r24
}
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	0f 90       	pop	r0
    36ac:	0f 90       	pop	r0
    36ae:	cf 91       	pop	r28
    36b0:	df 91       	pop	r29
    36b2:	08 95       	ret

000036b4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	0f 92       	push	r0
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    36c0:	eb e2       	ldi	r30, 0x2B	; 43
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	80 81       	ld	r24, Z
    36c6:	88 2f       	mov	r24, r24
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	80 72       	andi	r24, 0x20	; 32
    36cc:	90 70       	andi	r25, 0x00	; 0
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	b9 f3       	breq	.-18     	; 0x36c0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    36d2:	ec e2       	ldi	r30, 0x2C	; 44
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    36da:	0f 90       	pop	r0
    36dc:	cf 91       	pop	r28
    36de:	df 91       	pop	r29
    36e0:	08 95       	ret

000036e2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    36e2:	df 93       	push	r29
    36e4:	cf 93       	push	r28
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    36ea:	eb e2       	ldi	r30, 0x2B	; 43
    36ec:	f0 e0       	ldi	r31, 0x00	; 0
    36ee:	80 81       	ld	r24, Z
    36f0:	88 23       	and	r24, r24
    36f2:	dc f7       	brge	.-10     	; 0x36ea <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    36f4:	ec e2       	ldi	r30, 0x2C	; 44
    36f6:	f0 e0       	ldi	r31, 0x00	; 0
    36f8:	80 81       	ld	r24, Z
}
    36fa:	cf 91       	pop	r28
    36fc:	df 91       	pop	r29
    36fe:	08 95       	ret

00003700 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3700:	df 93       	push	r29
    3702:	cf 93       	push	r28
    3704:	00 d0       	rcall	.+0      	; 0x3706 <UART_sendString+0x6>
    3706:	0f 92       	push	r0
    3708:	cd b7       	in	r28, 0x3d	; 61
    370a:	de b7       	in	r29, 0x3e	; 62
    370c:	9b 83       	std	Y+3, r25	; 0x03
    370e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3710:	19 82       	std	Y+1, r1	; 0x01
    3712:	0e c0       	rjmp	.+28     	; 0x3730 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	28 2f       	mov	r18, r24
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	8a 81       	ldd	r24, Y+2	; 0x02
    371c:	9b 81       	ldd	r25, Y+3	; 0x03
    371e:	fc 01       	movw	r30, r24
    3720:	e2 0f       	add	r30, r18
    3722:	f3 1f       	adc	r31, r19
    3724:	80 81       	ld	r24, Z
    3726:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <UART_sendByte>
		i++;
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	8f 5f       	subi	r24, 0xFF	; 255
    372e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3730:	89 81       	ldd	r24, Y+1	; 0x01
    3732:	28 2f       	mov	r18, r24
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	8a 81       	ldd	r24, Y+2	; 0x02
    3738:	9b 81       	ldd	r25, Y+3	; 0x03
    373a:	fc 01       	movw	r30, r24
    373c:	e2 0f       	add	r30, r18
    373e:	f3 1f       	adc	r31, r19
    3740:	80 81       	ld	r24, Z
    3742:	88 23       	and	r24, r24
    3744:	39 f7       	brne	.-50     	; 0x3714 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	cf 91       	pop	r28
    374e:	df 91       	pop	r29
    3750:	08 95       	ret

00003752 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3752:	0f 93       	push	r16
    3754:	1f 93       	push	r17
    3756:	df 93       	push	r29
    3758:	cf 93       	push	r28
    375a:	00 d0       	rcall	.+0      	; 0x375c <UART_receiveString+0xa>
    375c:	0f 92       	push	r0
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	9b 83       	std	Y+3, r25	; 0x03
    3764:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3766:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	28 2f       	mov	r18, r24
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	9b 81       	ldd	r25, Y+3	; 0x03
    3772:	8c 01       	movw	r16, r24
    3774:	02 0f       	add	r16, r18
    3776:	13 1f       	adc	r17, r19
    3778:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
    377c:	f8 01       	movw	r30, r16
    377e:	80 83       	st	Z, r24
    3780:	0f c0       	rjmp	.+30     	; 0x37a0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	8f 5f       	subi	r24, 0xFF	; 255
    3786:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	28 2f       	mov	r18, r24
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	9b 81       	ldd	r25, Y+3	; 0x03
    3792:	8c 01       	movw	r16, r24
    3794:	02 0f       	add	r16, r18
    3796:	13 1f       	adc	r17, r19
    3798:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <UART_recieveByte>
    379c:	f8 01       	movw	r30, r16
    379e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	28 2f       	mov	r18, r24
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	8a 81       	ldd	r24, Y+2	; 0x02
    37a8:	9b 81       	ldd	r25, Y+3	; 0x03
    37aa:	fc 01       	movw	r30, r24
    37ac:	e2 0f       	add	r30, r18
    37ae:	f3 1f       	adc	r31, r19
    37b0:	80 81       	ld	r24, Z
    37b2:	83 32       	cpi	r24, 0x23	; 35
    37b4:	31 f7       	brne	.-52     	; 0x3782 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	28 2f       	mov	r18, r24
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	8a 81       	ldd	r24, Y+2	; 0x02
    37be:	9b 81       	ldd	r25, Y+3	; 0x03
    37c0:	fc 01       	movw	r30, r24
    37c2:	e2 0f       	add	r30, r18
    37c4:	f3 1f       	adc	r31, r19
    37c6:	10 82       	st	Z, r1
}
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	0f 90       	pop	r0
    37ce:	cf 91       	pop	r28
    37d0:	df 91       	pop	r29
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	08 95       	ret

000037d8 <__udivmodsi4>:
    37d8:	a1 e2       	ldi	r26, 0x21	; 33
    37da:	1a 2e       	mov	r1, r26
    37dc:	aa 1b       	sub	r26, r26
    37de:	bb 1b       	sub	r27, r27
    37e0:	fd 01       	movw	r30, r26
    37e2:	0d c0       	rjmp	.+26     	; 0x37fe <__udivmodsi4_ep>

000037e4 <__udivmodsi4_loop>:
    37e4:	aa 1f       	adc	r26, r26
    37e6:	bb 1f       	adc	r27, r27
    37e8:	ee 1f       	adc	r30, r30
    37ea:	ff 1f       	adc	r31, r31
    37ec:	a2 17       	cp	r26, r18
    37ee:	b3 07       	cpc	r27, r19
    37f0:	e4 07       	cpc	r30, r20
    37f2:	f5 07       	cpc	r31, r21
    37f4:	20 f0       	brcs	.+8      	; 0x37fe <__udivmodsi4_ep>
    37f6:	a2 1b       	sub	r26, r18
    37f8:	b3 0b       	sbc	r27, r19
    37fa:	e4 0b       	sbc	r30, r20
    37fc:	f5 0b       	sbc	r31, r21

000037fe <__udivmodsi4_ep>:
    37fe:	66 1f       	adc	r22, r22
    3800:	77 1f       	adc	r23, r23
    3802:	88 1f       	adc	r24, r24
    3804:	99 1f       	adc	r25, r25
    3806:	1a 94       	dec	r1
    3808:	69 f7       	brne	.-38     	; 0x37e4 <__udivmodsi4_loop>
    380a:	60 95       	com	r22
    380c:	70 95       	com	r23
    380e:	80 95       	com	r24
    3810:	90 95       	com	r25
    3812:	9b 01       	movw	r18, r22
    3814:	ac 01       	movw	r20, r24
    3816:	bd 01       	movw	r22, r26
    3818:	cf 01       	movw	r24, r30
    381a:	08 95       	ret

0000381c <__prologue_saves__>:
    381c:	2f 92       	push	r2
    381e:	3f 92       	push	r3
    3820:	4f 92       	push	r4
    3822:	5f 92       	push	r5
    3824:	6f 92       	push	r6
    3826:	7f 92       	push	r7
    3828:	8f 92       	push	r8
    382a:	9f 92       	push	r9
    382c:	af 92       	push	r10
    382e:	bf 92       	push	r11
    3830:	cf 92       	push	r12
    3832:	df 92       	push	r13
    3834:	ef 92       	push	r14
    3836:	ff 92       	push	r15
    3838:	0f 93       	push	r16
    383a:	1f 93       	push	r17
    383c:	cf 93       	push	r28
    383e:	df 93       	push	r29
    3840:	cd b7       	in	r28, 0x3d	; 61
    3842:	de b7       	in	r29, 0x3e	; 62
    3844:	ca 1b       	sub	r28, r26
    3846:	db 0b       	sbc	r29, r27
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	09 94       	ijmp

00003854 <__epilogue_restores__>:
    3854:	2a 88       	ldd	r2, Y+18	; 0x12
    3856:	39 88       	ldd	r3, Y+17	; 0x11
    3858:	48 88       	ldd	r4, Y+16	; 0x10
    385a:	5f 84       	ldd	r5, Y+15	; 0x0f
    385c:	6e 84       	ldd	r6, Y+14	; 0x0e
    385e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3860:	8c 84       	ldd	r8, Y+12	; 0x0c
    3862:	9b 84       	ldd	r9, Y+11	; 0x0b
    3864:	aa 84       	ldd	r10, Y+10	; 0x0a
    3866:	b9 84       	ldd	r11, Y+9	; 0x09
    3868:	c8 84       	ldd	r12, Y+8	; 0x08
    386a:	df 80       	ldd	r13, Y+7	; 0x07
    386c:	ee 80       	ldd	r14, Y+6	; 0x06
    386e:	fd 80       	ldd	r15, Y+5	; 0x05
    3870:	0c 81       	ldd	r16, Y+4	; 0x04
    3872:	1b 81       	ldd	r17, Y+3	; 0x03
    3874:	aa 81       	ldd	r26, Y+2	; 0x02
    3876:	b9 81       	ldd	r27, Y+1	; 0x01
    3878:	ce 0f       	add	r28, r30
    387a:	d1 1d       	adc	r29, r1
    387c:	0f b6       	in	r0, 0x3f	; 63
    387e:	f8 94       	cli
    3880:	de bf       	out	0x3e, r29	; 62
    3882:	0f be       	out	0x3f, r0	; 63
    3884:	cd bf       	out	0x3d, r28	; 61
    3886:	ed 01       	movw	r28, r26
    3888:	08 95       	ret

0000388a <itoa>:
    388a:	fb 01       	movw	r30, r22
    388c:	9f 01       	movw	r18, r30
    388e:	e8 94       	clt
    3890:	42 30       	cpi	r20, 0x02	; 2
    3892:	c4 f0       	brlt	.+48     	; 0x38c4 <itoa+0x3a>
    3894:	45 32       	cpi	r20, 0x25	; 37
    3896:	b4 f4       	brge	.+44     	; 0x38c4 <itoa+0x3a>
    3898:	4a 30       	cpi	r20, 0x0A	; 10
    389a:	29 f4       	brne	.+10     	; 0x38a6 <itoa+0x1c>
    389c:	97 fb       	bst	r25, 7
    389e:	1e f4       	brtc	.+6      	; 0x38a6 <itoa+0x1c>
    38a0:	90 95       	com	r25
    38a2:	81 95       	neg	r24
    38a4:	9f 4f       	sbci	r25, 0xFF	; 255
    38a6:	64 2f       	mov	r22, r20
    38a8:	77 27       	eor	r23, r23
    38aa:	0e 94 76 1c 	call	0x38ec	; 0x38ec <__udivmodhi4>
    38ae:	80 5d       	subi	r24, 0xD0	; 208
    38b0:	8a 33       	cpi	r24, 0x3A	; 58
    38b2:	0c f0       	brlt	.+2      	; 0x38b6 <itoa+0x2c>
    38b4:	89 5d       	subi	r24, 0xD9	; 217
    38b6:	81 93       	st	Z+, r24
    38b8:	cb 01       	movw	r24, r22
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	a1 f7       	brne	.-24     	; 0x38a6 <itoa+0x1c>
    38be:	16 f4       	brtc	.+4      	; 0x38c4 <itoa+0x3a>
    38c0:	5d e2       	ldi	r21, 0x2D	; 45
    38c2:	51 93       	st	Z+, r21
    38c4:	10 82       	st	Z, r1
    38c6:	c9 01       	movw	r24, r18
    38c8:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <strrev>

000038cc <strrev>:
    38cc:	dc 01       	movw	r26, r24
    38ce:	fc 01       	movw	r30, r24
    38d0:	67 2f       	mov	r22, r23
    38d2:	71 91       	ld	r23, Z+
    38d4:	77 23       	and	r23, r23
    38d6:	e1 f7       	brne	.-8      	; 0x38d0 <strrev+0x4>
    38d8:	32 97       	sbiw	r30, 0x02	; 2
    38da:	04 c0       	rjmp	.+8      	; 0x38e4 <strrev+0x18>
    38dc:	7c 91       	ld	r23, X
    38de:	6d 93       	st	X+, r22
    38e0:	70 83       	st	Z, r23
    38e2:	62 91       	ld	r22, -Z
    38e4:	ae 17       	cp	r26, r30
    38e6:	bf 07       	cpc	r27, r31
    38e8:	c8 f3       	brcs	.-14     	; 0x38dc <strrev+0x10>
    38ea:	08 95       	ret

000038ec <__udivmodhi4>:
    38ec:	aa 1b       	sub	r26, r26
    38ee:	bb 1b       	sub	r27, r27
    38f0:	51 e1       	ldi	r21, 0x11	; 17
    38f2:	07 c0       	rjmp	.+14     	; 0x3902 <__udivmodhi4_ep>

000038f4 <__udivmodhi4_loop>:
    38f4:	aa 1f       	adc	r26, r26
    38f6:	bb 1f       	adc	r27, r27
    38f8:	a6 17       	cp	r26, r22
    38fa:	b7 07       	cpc	r27, r23
    38fc:	10 f0       	brcs	.+4      	; 0x3902 <__udivmodhi4_ep>
    38fe:	a6 1b       	sub	r26, r22
    3900:	b7 0b       	sbc	r27, r23

00003902 <__udivmodhi4_ep>:
    3902:	88 1f       	adc	r24, r24
    3904:	99 1f       	adc	r25, r25
    3906:	5a 95       	dec	r21
    3908:	a9 f7       	brne	.-22     	; 0x38f4 <__udivmodhi4_loop>
    390a:	80 95       	com	r24
    390c:	90 95       	com	r25
    390e:	bc 01       	movw	r22, r24
    3910:	cd 01       	movw	r24, r26
    3912:	08 95       	ret

00003914 <_exit>:
    3914:	f8 94       	cli

00003916 <__stop_program>:
    3916:	ff cf       	rjmp	.-2      	; 0x3916 <__stop_program>
